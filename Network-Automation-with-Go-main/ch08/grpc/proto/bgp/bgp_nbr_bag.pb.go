//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: proto/bgp/bgp_nbr_bag.proto

package bgp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BgpNbrBag_KEYS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	AfName          string `protobuf:"bytes,2,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *BgpNbrBag_KEYS) Reset() {
	*x = BgpNbrBag_KEYS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrBag_KEYS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrBag_KEYS) ProtoMessage() {}

func (x *BgpNbrBag_KEYS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrBag_KEYS.ProtoReflect.Descriptor instead.
func (*BgpNbrBag_KEYS) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{0}
}

func (x *BgpNbrBag_KEYS) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *BgpNbrBag_KEYS) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *BgpNbrBag_KEYS) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

type BgpL2VpnAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VpnAddress []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (x *BgpL2VpnAddrT) Reset() {
	*x = BgpL2VpnAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpL2VpnAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpL2VpnAddrT) ProtoMessage() {}

func (x *BgpL2VpnAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpL2VpnAddrT.ProtoReflect.Descriptor instead.
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{1}
}

func (x *BgpL2VpnAddrT) GetL2VpnAddress() []uint32 {
	if x != nil {
		return x.L2VpnAddress
	}
	return nil
}

type BgpL2VpnEvpnAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VpnEvpnAddress []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
}

func (x *BgpL2VpnEvpnAddrT) Reset() {
	*x = BgpL2VpnEvpnAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpL2VpnEvpnAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpL2VpnEvpnAddrT) ProtoMessage() {}

func (x *BgpL2VpnEvpnAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpL2VpnEvpnAddrT.ProtoReflect.Descriptor instead.
func (*BgpL2VpnEvpnAddrT) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{2}
}

func (x *BgpL2VpnEvpnAddrT) GetL2VpnEvpnAddress() []uint32 {
	if x != nil {
		return x.L2VpnEvpnAddress
	}
	return nil
}

type BgpL2VpnMspwAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2VpnAddress []uint32 `protobuf:"varint,1,rep,packed,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (x *BgpL2VpnMspwAddrT) Reset() {
	*x = BgpL2VpnMspwAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpL2VpnMspwAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpL2VpnMspwAddrT) ProtoMessage() {}

func (x *BgpL2VpnMspwAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpL2VpnMspwAddrT.ProtoReflect.Descriptor instead.
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{3}
}

func (x *BgpL2VpnMspwAddrT) GetL2VpnAddress() []uint32 {
	if x != nil {
		return x.L2VpnAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4SrpolicyAddress []uint32 `protobuf:"varint,1,rep,packed,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (x *BgpIpv4SrpolicyAddrT) Reset() {
	*x = BgpIpv4SrpolicyAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpIpv4SrpolicyAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpIpv4SrpolicyAddrT) ProtoMessage() {}

func (x *BgpIpv4SrpolicyAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpIpv4SrpolicyAddrT.ProtoReflect.Descriptor instead.
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{4}
}

func (x *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []uint32 {
	if x != nil {
		return x.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6SrpolicyAddress []uint32 `protobuf:"varint,1,rep,packed,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (x *BgpIpv6SrpolicyAddrT) Reset() {
	*x = BgpIpv6SrpolicyAddrT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpIpv6SrpolicyAddrT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpIpv6SrpolicyAddrT) ProtoMessage() {}

func (x *BgpIpv6SrpolicyAddrT) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpIpv6SrpolicyAddrT.ProtoReflect.Descriptor instead.
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{5}
}

func (x *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []uint32 {
	if x != nil {
		return x.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpAddrtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afi                    string                `protobuf:"bytes,1,opt,name=afi,proto3" json:"afi,omitempty"`
	Ipv4Address            string                `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv4McastAddress       string                `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress,proto3" json:"ipv4_mcast_address,omitempty"`
	Ipv4LabelAddress       string                `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress,proto3" json:"ipv4_label_address,omitempty"`
	Ipv4TunnelAddress      string                `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress,proto3" json:"ipv4_tunnel_address,omitempty"`
	Ipv4MdtAddress         string                `protobuf:"bytes,6,opt,name=ipv4mdt_address,json=ipv4mdtAddress,proto3" json:"ipv4mdt_address,omitempty"`
	Ipv4VpnAddress         string                `protobuf:"bytes,7,opt,name=ipv4vpn_address,json=ipv4vpnAddress,proto3" json:"ipv4vpn_address,omitempty"`
	Ipv4VpnaMcastddress    string                `protobuf:"bytes,8,opt,name=ipv4vpna_mcastddress,json=ipv4vpnaMcastddress,proto3" json:"ipv4vpna_mcastddress,omitempty"`
	Ipv6Address            string                `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Ipv6McastAddress       string                `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress,proto3" json:"ipv6_mcast_address,omitempty"`
	IPv6LabelAddress       string                `protobuf:"bytes,11,opt,name=i_pv6_label_address,json=iPv6LabelAddress,proto3" json:"i_pv6_label_address,omitempty"`
	Ipv6VpnAddress         string                `protobuf:"bytes,12,opt,name=ipv6vpn_address,json=ipv6vpnAddress,proto3" json:"ipv6vpn_address,omitempty"`
	Ipv6VpnMcastAddress    string                `protobuf:"bytes,13,opt,name=ipv6vpn_mcast_address,json=ipv6vpnMcastAddress,proto3" json:"ipv6vpn_mcast_address,omitempty"`
	L2VpnvplsAddress       *BgpL2VpnAddrT        `protobuf:"bytes,14,opt,name=l2vpnvpls_address,json=l2vpnvplsAddress,proto3" json:"l2vpnvpls_address,omitempty"`
	RtConstraintAddress    string                `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress,proto3" json:"rt_constraint_address,omitempty"`
	Ipv6MvpnAddress        string                `protobuf:"bytes,16,opt,name=ipv6mvpn_address,json=ipv6mvpnAddress,proto3" json:"ipv6mvpn_address,omitempty"`
	Ipv4MvpnAddress        string                `protobuf:"bytes,17,opt,name=ipv4mvpn_address,json=ipv4mvpnAddress,proto3" json:"ipv4mvpn_address,omitempty"`
	L2VpnEvpnAddress       *BgpL2VpnEvpnAddrT    `protobuf:"bytes,18,opt,name=l2vpn_evpn_address,json=l2vpnEvpnAddress,proto3" json:"l2vpn_evpn_address,omitempty"`
	LsLsAddress            string                `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress,proto3" json:"ls_ls_address,omitempty"`
	L2VpnMspwAddress       *BgpL2VpnMspwAddrT    `protobuf:"bytes,20,opt,name=l2vpn_mspw_address,json=l2vpnMspwAddress,proto3" json:"l2vpn_mspw_address,omitempty"`
	Ipv4FlowspecAddress    string                `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress,proto3" json:"ipv4_flowspec_address,omitempty"`
	Ipv6FlowspecAddress    string                `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress,proto3" json:"ipv6_flowspec_address,omitempty"`
	Ipv4VpnFlowspecAddress string                `protobuf:"bytes,23,opt,name=ipv4vpn_flowspec_address,json=ipv4vpnFlowspecAddress,proto3" json:"ipv4vpn_flowspec_address,omitempty"`
	Ipv6VpnFlowspecAddress string                `protobuf:"bytes,24,opt,name=ipv6vpn_flowspec_address,json=ipv6vpnFlowspecAddress,proto3" json:"ipv6vpn_flowspec_address,omitempty"`
	Ipv4SrPolicyAddress    *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4sr_policy_address,json=ipv4srPolicyAddress,proto3" json:"ipv4sr_policy_address,omitempty"`
	Ipv6SrPolicyAddress    *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6sr_policy_address,json=ipv6srPolicyAddress,proto3" json:"ipv6sr_policy_address,omitempty"`
}

func (x *BgpAddrtype) Reset() {
	*x = BgpAddrtype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAddrtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddrtype) ProtoMessage() {}

func (x *BgpAddrtype) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddrtype.ProtoReflect.Descriptor instead.
func (*BgpAddrtype) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{6}
}

func (x *BgpAddrtype) GetAfi() string {
	if x != nil {
		return x.Afi
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4McastAddress() string {
	if x != nil {
		return x.Ipv4McastAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4LabelAddress() string {
	if x != nil {
		return x.Ipv4LabelAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4TunnelAddress() string {
	if x != nil {
		return x.Ipv4TunnelAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4MdtAddress() string {
	if x != nil {
		return x.Ipv4MdtAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4VpnAddress() string {
	if x != nil {
		return x.Ipv4VpnAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if x != nil {
		return x.Ipv4VpnaMcastddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6McastAddress() string {
	if x != nil {
		return x.Ipv6McastAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIPv6LabelAddress() string {
	if x != nil {
		return x.IPv6LabelAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6VpnAddress() string {
	if x != nil {
		return x.Ipv6VpnAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6VpnMcastAddress() string {
	if x != nil {
		return x.Ipv6VpnMcastAddress
	}
	return ""
}

func (x *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if x != nil {
		return x.L2VpnvplsAddress
	}
	return nil
}

func (x *BgpAddrtype) GetRtConstraintAddress() string {
	if x != nil {
		return x.RtConstraintAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6MvpnAddress() string {
	if x != nil {
		return x.Ipv6MvpnAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4MvpnAddress() string {
	if x != nil {
		return x.Ipv4MvpnAddress
	}
	return ""
}

func (x *BgpAddrtype) GetL2VpnEvpnAddress() *BgpL2VpnEvpnAddrT {
	if x != nil {
		return x.L2VpnEvpnAddress
	}
	return nil
}

func (x *BgpAddrtype) GetLsLsAddress() string {
	if x != nil {
		return x.LsLsAddress
	}
	return ""
}

func (x *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if x != nil {
		return x.L2VpnMspwAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv4FlowspecAddress() string {
	if x != nil {
		return x.Ipv4FlowspecAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6FlowspecAddress() string {
	if x != nil {
		return x.Ipv6FlowspecAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4VpnFlowspecAddress() string {
	if x != nil {
		return x.Ipv4VpnFlowspecAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv6VpnFlowspecAddress() string {
	if x != nil {
		return x.Ipv6VpnFlowspecAddress
	}
	return ""
}

func (x *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if x != nil {
		return x.Ipv4SrPolicyAddress
	}
	return nil
}

func (x *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if x != nil {
		return x.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpNotfntype_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSinceLastNotification uint32   `protobuf:"varint,1,opt,name=time_since_last_notification,json=timeSinceLastNotification,proto3" json:"time_since_last_notification,omitempty"`
	NotificationErrorCode     uint32   `protobuf:"varint,2,opt,name=notification_error_code,json=notificationErrorCode,proto3" json:"notification_error_code,omitempty"`
	NotificationErrorSubcode  uint32   `protobuf:"varint,3,opt,name=notification_error_subcode,json=notificationErrorSubcode,proto3" json:"notification_error_subcode,omitempty"`
	LastNotificationData      []uint32 `protobuf:"varint,4,rep,packed,name=last_notification_data,json=lastNotificationData,proto3" json:"last_notification_data,omitempty"`
}

func (x *BgpNotfntype_) Reset() {
	*x = BgpNotfntype_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNotfntype_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNotfntype_) ProtoMessage() {}

func (x *BgpNotfntype_) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNotfntype_.ProtoReflect.Descriptor instead.
func (*BgpNotfntype_) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{7}
}

func (x *BgpNotfntype_) GetTimeSinceLastNotification() uint32 {
	if x != nil {
		return x.TimeSinceLastNotification
	}
	return 0
}

func (x *BgpNotfntype_) GetNotificationErrorCode() uint32 {
	if x != nil {
		return x.NotificationErrorCode
	}
	return 0
}

func (x *BgpNotfntype_) GetNotificationErrorSubcode() uint32 {
	if x != nil {
		return x.NotificationErrorSubcode
	}
	return 0
}

func (x *BgpNotfntype_) GetLastNotificationData() []uint32 {
	if x != nil {
		return x.LastNotificationData
	}
	return nil
}

type BgpPerfNbr_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadThrottles               uint32 `protobuf:"varint,1,opt,name=read_throttles,json=readThrottles,proto3" json:"read_throttles,omitempty"`
	LowThrottledRead            uint32 `protobuf:"varint,2,opt,name=low_throttled_read,json=lowThrottledRead,proto3" json:"low_throttled_read,omitempty"`
	HighThrottledRead           uint32 `protobuf:"varint,3,opt,name=high_throttled_read,json=highThrottledRead,proto3" json:"high_throttled_read,omitempty"`
	TimeSinceLastThrottledRead  uint32 `protobuf:"varint,4,opt,name=time_since_last_throttled_read,json=timeSinceLastThrottledRead,proto3" json:"time_since_last_throttled_read,omitempty"`
	ReadCallsCount              uint32 `protobuf:"varint,5,opt,name=read_calls_count,json=readCallsCount,proto3" json:"read_calls_count,omitempty"`
	ReadMessagesCount           uint32 `protobuf:"varint,6,opt,name=read_messages_count,json=readMessagesCount,proto3" json:"read_messages_count,omitempty"`
	DataBytesRead               uint32 `protobuf:"varint,7,opt,name=data_bytes_read,json=dataBytesRead,proto3" json:"data_bytes_read,omitempty"`
	IoReadTime                  uint32 `protobuf:"varint,8,opt,name=io_read_time,json=ioReadTime,proto3" json:"io_read_time,omitempty"`
	WriteCallsCount             uint32 `protobuf:"varint,9,opt,name=write_calls_count,json=writeCallsCount,proto3" json:"write_calls_count,omitempty"`
	DataBytesWritten            uint32 `protobuf:"varint,10,opt,name=data_bytes_written,json=dataBytesWritten,proto3" json:"data_bytes_written,omitempty"`
	IoWriteTime                 uint32 `protobuf:"varint,11,opt,name=io_write_time,json=ioWriteTime,proto3" json:"io_write_time,omitempty"`
	LastSentSeqNo               uint32 `protobuf:"varint,12,opt,name=last_sent_seq_no,json=lastSentSeqNo,proto3" json:"last_sent_seq_no,omitempty"`
	WriteSubgroupCallsCount     uint32 `protobuf:"varint,13,opt,name=write_subgroup_calls_count,json=writeSubgroupCallsCount,proto3" json:"write_subgroup_calls_count,omitempty"`
	WriteSubgroupMessagesCount  uint32 `protobuf:"varint,14,opt,name=write_subgroup_messages_count,json=writeSubgroupMessagesCount,proto3" json:"write_subgroup_messages_count,omitempty"`
	SubgroupListTime            uint32 `protobuf:"varint,15,opt,name=subgroup_list_time,json=subgroupListTime,proto3" json:"subgroup_list_time,omitempty"`
	WriteQueueCallsCount        uint32 `protobuf:"varint,16,opt,name=write_queue_calls_count,json=writeQueueCallsCount,proto3" json:"write_queue_calls_count,omitempty"`
	WriteQueueMessagesCount     uint32 `protobuf:"varint,17,opt,name=write_queue_messages_count,json=writeQueueMessagesCount,proto3" json:"write_queue_messages_count,omitempty"`
	WriteQueueTime              uint32 `protobuf:"varint,18,opt,name=write_queue_time,json=writeQueueTime,proto3" json:"write_queue_time,omitempty"`
	InboundUpdateMessages       uint32 `protobuf:"varint,19,opt,name=inbound_update_messages,json=inboundUpdateMessages,proto3" json:"inbound_update_messages,omitempty"`
	InboundUpdateMessagesTime   uint32 `protobuf:"varint,20,opt,name=inbound_update_messages_time,json=inboundUpdateMessagesTime,proto3" json:"inbound_update_messages_time,omitempty"`
	MaximumReadSize             uint32 `protobuf:"varint,21,opt,name=maximum_read_size,json=maximumReadSize,proto3" json:"maximum_read_size,omitempty"`
	Actives                     uint32 `protobuf:"varint,22,opt,name=actives,proto3" json:"actives,omitempty"`
	FailedPostActives           uint32 `protobuf:"varint,23,opt,name=failed_post_actives,json=failedPostActives,proto3" json:"failed_post_actives,omitempty"`
	Passives                    uint32 `protobuf:"varint,24,opt,name=passives,proto3" json:"passives,omitempty"`
	RejectedPassives            uint32 `protobuf:"varint,25,opt,name=rejected_passives,json=rejectedPassives,proto3" json:"rejected_passives,omitempty"`
	ActiveCollision             uint32 `protobuf:"varint,26,opt,name=active_collision,json=activeCollision,proto3" json:"active_collision,omitempty"`
	PassiveCollision            uint32 `protobuf:"varint,27,opt,name=passive_collision,json=passiveCollision,proto3" json:"passive_collision,omitempty"`
	ControlToReadThreadTrigger  uint32 `protobuf:"varint,28,opt,name=control_to_read_thread_trigger,json=controlToReadThreadTrigger,proto3" json:"control_to_read_thread_trigger,omitempty"`
	ControlToWriteThreadTrigger uint32 `protobuf:"varint,29,opt,name=control_to_write_thread_trigger,json=controlToWriteThreadTrigger,proto3" json:"control_to_write_thread_trigger,omitempty"`
	NetworkStatus               uint32 `protobuf:"varint,30,opt,name=network_status,json=networkStatus,proto3" json:"network_status,omitempty"`
	ResetFlags                  uint32 `protobuf:"varint,31,opt,name=reset_flags,json=resetFlags,proto3" json:"reset_flags,omitempty"`
	NbrFlags                    uint32 `protobuf:"varint,32,opt,name=nbr_flags,json=nbrFlags,proto3" json:"nbr_flags,omitempty"`
	NbrFd                       int32  `protobuf:"zigzag32,33,opt,name=nbr_fd,json=nbrFd,proto3" json:"nbr_fd,omitempty"`
	ResetRetries                uint32 `protobuf:"varint,34,opt,name=reset_retries,json=resetRetries,proto3" json:"reset_retries,omitempty"`
	SyncFlags                   uint32 `protobuf:"varint,35,opt,name=sync_flags,json=syncFlags,proto3" json:"sync_flags,omitempty"`
	NsrOperDownCount            uint32 `protobuf:"varint,36,opt,name=nsr_oper_down_count,json=nsrOperDownCount,proto3" json:"nsr_oper_down_count,omitempty"`
	LastNsrScopedSync           uint32 `protobuf:"varint,37,opt,name=last_nsr_scoped_sync,json=lastNsrScopedSync,proto3" json:"last_nsr_scoped_sync,omitempty"`
}

func (x *BgpPerfNbr_) Reset() {
	*x = BgpPerfNbr_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPerfNbr_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPerfNbr_) ProtoMessage() {}

func (x *BgpPerfNbr_) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPerfNbr_.ProtoReflect.Descriptor instead.
func (*BgpPerfNbr_) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{8}
}

func (x *BgpPerfNbr_) GetReadThrottles() uint32 {
	if x != nil {
		return x.ReadThrottles
	}
	return 0
}

func (x *BgpPerfNbr_) GetLowThrottledRead() uint32 {
	if x != nil {
		return x.LowThrottledRead
	}
	return 0
}

func (x *BgpPerfNbr_) GetHighThrottledRead() uint32 {
	if x != nil {
		return x.HighThrottledRead
	}
	return 0
}

func (x *BgpPerfNbr_) GetTimeSinceLastThrottledRead() uint32 {
	if x != nil {
		return x.TimeSinceLastThrottledRead
	}
	return 0
}

func (x *BgpPerfNbr_) GetReadCallsCount() uint32 {
	if x != nil {
		return x.ReadCallsCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetReadMessagesCount() uint32 {
	if x != nil {
		return x.ReadMessagesCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetDataBytesRead() uint32 {
	if x != nil {
		return x.DataBytesRead
	}
	return 0
}

func (x *BgpPerfNbr_) GetIoReadTime() uint32 {
	if x != nil {
		return x.IoReadTime
	}
	return 0
}

func (x *BgpPerfNbr_) GetWriteCallsCount() uint32 {
	if x != nil {
		return x.WriteCallsCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetDataBytesWritten() uint32 {
	if x != nil {
		return x.DataBytesWritten
	}
	return 0
}

func (x *BgpPerfNbr_) GetIoWriteTime() uint32 {
	if x != nil {
		return x.IoWriteTime
	}
	return 0
}

func (x *BgpPerfNbr_) GetLastSentSeqNo() uint32 {
	if x != nil {
		return x.LastSentSeqNo
	}
	return 0
}

func (x *BgpPerfNbr_) GetWriteSubgroupCallsCount() uint32 {
	if x != nil {
		return x.WriteSubgroupCallsCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetWriteSubgroupMessagesCount() uint32 {
	if x != nil {
		return x.WriteSubgroupMessagesCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetSubgroupListTime() uint32 {
	if x != nil {
		return x.SubgroupListTime
	}
	return 0
}

func (x *BgpPerfNbr_) GetWriteQueueCallsCount() uint32 {
	if x != nil {
		return x.WriteQueueCallsCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetWriteQueueMessagesCount() uint32 {
	if x != nil {
		return x.WriteQueueMessagesCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetWriteQueueTime() uint32 {
	if x != nil {
		return x.WriteQueueTime
	}
	return 0
}

func (x *BgpPerfNbr_) GetInboundUpdateMessages() uint32 {
	if x != nil {
		return x.InboundUpdateMessages
	}
	return 0
}

func (x *BgpPerfNbr_) GetInboundUpdateMessagesTime() uint32 {
	if x != nil {
		return x.InboundUpdateMessagesTime
	}
	return 0
}

func (x *BgpPerfNbr_) GetMaximumReadSize() uint32 {
	if x != nil {
		return x.MaximumReadSize
	}
	return 0
}

func (x *BgpPerfNbr_) GetActives() uint32 {
	if x != nil {
		return x.Actives
	}
	return 0
}

func (x *BgpPerfNbr_) GetFailedPostActives() uint32 {
	if x != nil {
		return x.FailedPostActives
	}
	return 0
}

func (x *BgpPerfNbr_) GetPassives() uint32 {
	if x != nil {
		return x.Passives
	}
	return 0
}

func (x *BgpPerfNbr_) GetRejectedPassives() uint32 {
	if x != nil {
		return x.RejectedPassives
	}
	return 0
}

func (x *BgpPerfNbr_) GetActiveCollision() uint32 {
	if x != nil {
		return x.ActiveCollision
	}
	return 0
}

func (x *BgpPerfNbr_) GetPassiveCollision() uint32 {
	if x != nil {
		return x.PassiveCollision
	}
	return 0
}

func (x *BgpPerfNbr_) GetControlToReadThreadTrigger() uint32 {
	if x != nil {
		return x.ControlToReadThreadTrigger
	}
	return 0
}

func (x *BgpPerfNbr_) GetControlToWriteThreadTrigger() uint32 {
	if x != nil {
		return x.ControlToWriteThreadTrigger
	}
	return 0
}

func (x *BgpPerfNbr_) GetNetworkStatus() uint32 {
	if x != nil {
		return x.NetworkStatus
	}
	return 0
}

func (x *BgpPerfNbr_) GetResetFlags() uint32 {
	if x != nil {
		return x.ResetFlags
	}
	return 0
}

func (x *BgpPerfNbr_) GetNbrFlags() uint32 {
	if x != nil {
		return x.NbrFlags
	}
	return 0
}

func (x *BgpPerfNbr_) GetNbrFd() int32 {
	if x != nil {
		return x.NbrFd
	}
	return 0
}

func (x *BgpPerfNbr_) GetResetRetries() uint32 {
	if x != nil {
		return x.ResetRetries
	}
	return 0
}

func (x *BgpPerfNbr_) GetSyncFlags() uint32 {
	if x != nil {
		return x.SyncFlags
	}
	return 0
}

func (x *BgpPerfNbr_) GetNsrOperDownCount() uint32 {
	if x != nil {
		return x.NsrOperDownCount
	}
	return 0
}

func (x *BgpPerfNbr_) GetLastNsrScopedSync() uint32 {
	if x != nil {
		return x.LastNsrScopedSync
	}
	return 0
}

type BgpPerfNbrAf_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubGroupPendingMessageCount  uint32 `protobuf:"varint,1,opt,name=sub_group_pending_message_count,json=subGroupPendingMessageCount,proto3" json:"sub_group_pending_message_count,omitempty"`
	ProcessedMessages            uint32 `protobuf:"varint,2,opt,name=processed_messages,json=processedMessages,proto3" json:"processed_messages,omitempty"`
	SentMessages                 uint32 `protobuf:"varint,3,opt,name=sent_messages,json=sentMessages,proto3" json:"sent_messages,omitempty"`
	SplitHorizonUpdateTransmit   uint32 `protobuf:"varint,4,opt,name=split_horizon_update_transmit,json=splitHorizonUpdateTransmit,proto3" json:"split_horizon_update_transmit,omitempty"`
	SplitHorizonUpdateBlocked    uint32 `protobuf:"varint,5,opt,name=split_horizon_update_blocked,json=splitHorizonUpdateBlocked,proto3" json:"split_horizon_update_blocked,omitempty"`
	SplitHorizonWithdrawTransmit uint32 `protobuf:"varint,6,opt,name=split_horizon_withdraw_transmit,json=splitHorizonWithdrawTransmit,proto3" json:"split_horizon_withdraw_transmit,omitempty"`
	SplitHorizonWithdrawBlocked  uint32 `protobuf:"varint,7,opt,name=split_horizon_withdraw_blocked,json=splitHorizonWithdrawBlocked,proto3" json:"split_horizon_withdraw_blocked,omitempty"`
}

func (x *BgpPerfNbrAf_) Reset() {
	*x = BgpPerfNbrAf_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPerfNbrAf_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPerfNbrAf_) ProtoMessage() {}

func (x *BgpPerfNbrAf_) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPerfNbrAf_.ProtoReflect.Descriptor instead.
func (*BgpPerfNbrAf_) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{9}
}

func (x *BgpPerfNbrAf_) GetSubGroupPendingMessageCount() uint32 {
	if x != nil {
		return x.SubGroupPendingMessageCount
	}
	return 0
}

func (x *BgpPerfNbrAf_) GetProcessedMessages() uint32 {
	if x != nil {
		return x.ProcessedMessages
	}
	return 0
}

func (x *BgpPerfNbrAf_) GetSentMessages() uint32 {
	if x != nil {
		return x.SentMessages
	}
	return 0
}

func (x *BgpPerfNbrAf_) GetSplitHorizonUpdateTransmit() uint32 {
	if x != nil {
		return x.SplitHorizonUpdateTransmit
	}
	return 0
}

func (x *BgpPerfNbrAf_) GetSplitHorizonUpdateBlocked() uint32 {
	if x != nil {
		return x.SplitHorizonUpdateBlocked
	}
	return 0
}

func (x *BgpPerfNbrAf_) GetSplitHorizonWithdrawTransmit() uint32 {
	if x != nil {
		return x.SplitHorizonWithdrawTransmit
	}
	return 0
}

func (x *BgpPerfNbrAf_) GetSplitHorizonWithdrawBlocked() uint32 {
	if x != nil {
		return x.SplitHorizonWithdrawBlocked
	}
	return 0
}

type BgpNbrAf_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfName                                        string         `protobuf:"bytes,1,opt,name=af_name,json=afName,proto3" json:"af_name,omitempty"`
	IsNeighborRouteReflectorClient                bool           `protobuf:"varint,2,opt,name=is_neighbor_route_reflector_client,json=isNeighborRouteReflectorClient,proto3" json:"is_neighbor_route_reflector_client,omitempty"`
	IsLegacyPeRt                                  bool           `protobuf:"varint,3,opt,name=is_legacy_pe_rt,json=isLegacyPeRt,proto3" json:"is_legacy_pe_rt,omitempty"`
	IsNeighborAfCapable                           bool           `protobuf:"varint,4,opt,name=is_neighbor_af_capable,json=isNeighborAfCapable,proto3" json:"is_neighbor_af_capable,omitempty"`
	IsSoftReconfigurationInboundAllowed           bool           `protobuf:"varint,5,opt,name=is_soft_reconfiguration_inbound_allowed,json=isSoftReconfigurationInboundAllowed,proto3" json:"is_soft_reconfiguration_inbound_allowed,omitempty"`
	IsUseSoftReconfigurationAlwaysOn              bool           `protobuf:"varint,6,opt,name=is_use_soft_reconfiguration_always_on,json=isUseSoftReconfigurationAlwaysOn,proto3" json:"is_use_soft_reconfiguration_always_on,omitempty"`
	RemovePrivateAsFromUpdates                    bool           `protobuf:"varint,7,opt,name=remove_private_as_from_updates,json=removePrivateAsFromUpdates,proto3" json:"remove_private_as_from_updates,omitempty"`
	RemovePrivateAsEntireAspathFromUpdates        bool           `protobuf:"varint,8,opt,name=remove_private_as_entire_aspath_from_updates,json=removePrivateAsEntireAspathFromUpdates,proto3" json:"remove_private_as_entire_aspath_from_updates,omitempty"`
	RemovePrivateAsFromInboundUpdates             bool           `protobuf:"varint,9,opt,name=remove_private_as_from_inbound_updates,json=removePrivateAsFromInboundUpdates,proto3" json:"remove_private_as_from_inbound_updates,omitempty"`
	RemovePrivateAsEntireAspathFromInboundUpdates bool           `protobuf:"varint,10,opt,name=remove_private_as_entire_aspath_from_inbound_updates,json=removePrivateAsEntireAspathFromInboundUpdates,proto3" json:"remove_private_as_entire_aspath_from_inbound_updates,omitempty"`
	FlowspecValidationDIsable                     bool           `protobuf:"varint,11,opt,name=flowspec_validation_d_isable,json=flowspecValidationDIsable,proto3" json:"flowspec_validation_d_isable,omitempty"`
	FlowspecRedirectValidationDIsable             bool           `protobuf:"varint,12,opt,name=flowspec_redirect_validation_d_isable,json=flowspecRedirectValidationDIsable,proto3" json:"flowspec_redirect_validation_d_isable,omitempty"`
	OrrGroupName                                  string         `protobuf:"bytes,13,opt,name=orr_group_name,json=orrGroupName,proto3" json:"orr_group_name,omitempty"`
	OrrGroupIndex                                 uint32         `protobuf:"varint,14,opt,name=orr_group_index,json=orrGroupIndex,proto3" json:"orr_group_index,omitempty"`
	IsOrrRootAddressConfigured                    bool           `protobuf:"varint,15,opt,name=is_orr_root_address_configured,json=isOrrRootAddressConfigured,proto3" json:"is_orr_root_address_configured,omitempty"`
	AdvertiseAfi                                  bool           `protobuf:"varint,16,opt,name=advertise_afi,json=advertiseAfi,proto3" json:"advertise_afi,omitempty"`
	AdvertiseAfiReorg                             bool           `protobuf:"varint,17,opt,name=advertise_afi_reorg,json=advertiseAfiReorg,proto3" json:"advertise_afi_reorg,omitempty"`
	AdvertiseAfiDisable                           bool           `protobuf:"varint,18,opt,name=advertise_afi_disable,json=advertiseAfiDisable,proto3" json:"advertise_afi_disable,omitempty"`
	EncapsulationType                             uint32         `protobuf:"varint,19,opt,name=encapsulation_type,json=encapsulationType,proto3" json:"encapsulation_type,omitempty"`
	AdvertiseRtType                               uint32         `protobuf:"varint,20,opt,name=advertise_rt_type,json=advertiseRtType,proto3" json:"advertise_rt_type,omitempty"`
	AdvertiseAfiDefVrfImpDisable                  bool           `protobuf:"varint,21,opt,name=advertise_afi_def_vrf_imp_disable,json=advertiseAfiDefVrfImpDisable,proto3" json:"advertise_afi_def_vrf_imp_disable,omitempty"`
	AdvertiseEvpNv4AfiDefVrfImpDisable            bool           `protobuf:"varint,22,opt,name=advertise_evp_nv4afi_def_vrf_imp_disable,json=advertiseEvpNv4afiDefVrfImpDisable,proto3" json:"advertise_evp_nv4afi_def_vrf_imp_disable,omitempty"`
	AdvertiseEvpNv6AfiDefVrfImpDisable            bool           `protobuf:"varint,23,opt,name=advertise_evp_nv6afi_def_vrf_imp_disable,json=advertiseEvpNv6afiDefVrfImpDisable,proto3" json:"advertise_evp_nv6afi_def_vrf_imp_disable,omitempty"`
	AdvertiseAfiVrfReImpDisable                   bool           `protobuf:"varint,24,opt,name=advertise_afi_vrf_re_imp_disable,json=advertiseAfiVrfReImpDisable,proto3" json:"advertise_afi_vrf_re_imp_disable,omitempty"`
	AdvertiseEvpNv4AfiVrfReImpDisable             bool           `protobuf:"varint,25,opt,name=advertise_evp_nv4afi_vrf_re_imp_disable,json=advertiseEvpNv4afiVrfReImpDisable,proto3" json:"advertise_evp_nv4afi_vrf_re_imp_disable,omitempty"`
	AdvertiseEvpNv6AfiVrfReImpDisable             bool           `protobuf:"varint,26,opt,name=advertise_evp_nv6afi_vrf_re_imp_disable,json=advertiseEvpNv6afiVrfReImpDisable,proto3" json:"advertise_evp_nv6afi_vrf_re_imp_disable,omitempty"`
	AdvertiseAfiEoRReady                          bool           `protobuf:"varint,27,opt,name=advertise_afi_eo_r_ready,json=advertiseAfiEoRReady,proto3" json:"advertise_afi_eo_r_ready,omitempty"`
	AlwaysUseNextHopLocal                         bool           `protobuf:"varint,28,opt,name=always_use_next_hop_local,json=alwaysUseNextHopLocal,proto3" json:"always_use_next_hop_local,omitempty"`
	SentCommunityToNeighbor                       bool           `protobuf:"varint,29,opt,name=sent_community_to_neighbor,json=sentCommunityToNeighbor,proto3" json:"sent_community_to_neighbor,omitempty"`
	SentGshutCommunityToNeighbor                  bool           `protobuf:"varint,30,opt,name=sent_gshut_community_to_neighbor,json=sentGshutCommunityToNeighbor,proto3" json:"sent_gshut_community_to_neighbor,omitempty"`
	SentExtendedCommunityToNeighbor               bool           `protobuf:"varint,31,opt,name=sent_extended_community_to_neighbor,json=sentExtendedCommunityToNeighbor,proto3" json:"sent_extended_community_to_neighbor,omitempty"`
	DefaultOriginateVpnIndex                      uint32         `protobuf:"varint,32,opt,name=default_originate_vpn_index,json=defaultOriginateVpnIndex,proto3" json:"default_originate_vpn_index,omitempty"`
	NeighborDefaultOriginate                      bool           `protobuf:"varint,33,opt,name=neighbor_default_originate,json=neighborDefaultOriginate,proto3" json:"neighbor_default_originate,omitempty"`
	IsOrfSent                                     bool           `protobuf:"varint,34,opt,name=is_orf_sent,json=isOrfSent,proto3" json:"is_orf_sent,omitempty"`
	IsUpdateDeferred                              bool           `protobuf:"varint,35,opt,name=is_update_deferred,json=isUpdateDeferred,proto3" json:"is_update_deferred,omitempty"`
	IsOrfSendScheduled                            bool           `protobuf:"varint,36,opt,name=is_orf_send_scheduled,json=isOrfSendScheduled,proto3" json:"is_orf_send_scheduled,omitempty"`
	UpdateGroupNumber                             uint32         `protobuf:"varint,37,opt,name=update_group_number,json=updateGroupNumber,proto3" json:"update_group_number,omitempty"`
	FilterGroupIndex                              uint32         `protobuf:"varint,38,opt,name=filter_group_index,json=filterGroupIndex,proto3" json:"filter_group_index,omitempty"`
	IsUpdateThrottled                             bool           `protobuf:"varint,39,opt,name=is_update_throttled,json=isUpdateThrottled,proto3" json:"is_update_throttled,omitempty"`
	IsUpdateLeaving                               bool           `protobuf:"varint,40,opt,name=is_update_leaving,json=isUpdateLeaving,proto3" json:"is_update_leaving,omitempty"`
	VpnUpdateGenEnabled                           bool           `protobuf:"varint,41,opt,name=vpn_update_gen_enabled,json=vpnUpdateGenEnabled,proto3" json:"vpn_update_gen_enabled,omitempty"`
	VpnUpdateGenTriggerEnabled                    bool           `protobuf:"varint,42,opt,name=vpn_update_gen_trigger_enabled,json=vpnUpdateGenTriggerEnabled,proto3" json:"vpn_update_gen_trigger_enabled,omitempty"`
	IsAddpathSendOperational                      bool           `protobuf:"varint,43,opt,name=is_addpath_send_operational,json=isAddpathSendOperational,proto3" json:"is_addpath_send_operational,omitempty"`
	IsAddpathReceiveOperational                   bool           `protobuf:"varint,44,opt,name=is_addpath_receive_operational,json=isAddpathReceiveOperational,proto3" json:"is_addpath_receive_operational,omitempty"`
	NeighborVersion                               uint32         `protobuf:"varint,45,opt,name=neighbor_version,json=neighborVersion,proto3" json:"neighbor_version,omitempty"`
	Weight                                        uint32         `protobuf:"varint,46,opt,name=weight,proto3" json:"weight,omitempty"`
	MaxPrefixLimit                                uint32         `protobuf:"varint,47,opt,name=max_prefix_limit,json=maxPrefixLimit,proto3" json:"max_prefix_limit,omitempty"`
	UseMaxPrefixWarningOnly                       bool           `protobuf:"varint,48,opt,name=use_max_prefix_warning_only,json=useMaxPrefixWarningOnly,proto3" json:"use_max_prefix_warning_only,omitempty"`
	MaxPrefixDiscardExtraPaths                    bool           `protobuf:"varint,49,opt,name=max_prefix_discard_extra_paths,json=maxPrefixDiscardExtraPaths,proto3" json:"max_prefix_discard_extra_paths,omitempty"`
	MaxPrefixExceedDiscardPaths                   bool           `protobuf:"varint,50,opt,name=max_prefix_exceed_discard_paths,json=maxPrefixExceedDiscardPaths,proto3" json:"max_prefix_exceed_discard_paths,omitempty"`
	MaxPrefixThresholdPercent                     uint32         `protobuf:"varint,51,opt,name=max_prefix_threshold_percent,json=maxPrefixThresholdPercent,proto3" json:"max_prefix_threshold_percent,omitempty"`
	MaxPrefixDiscardPathsCount                    uint32         `protobuf:"varint,52,opt,name=max_prefix_discard_paths_count,json=maxPrefixDiscardPathsCount,proto3" json:"max_prefix_discard_paths_count,omitempty"`
	MaxPrefixRestartTime                          uint32         `protobuf:"varint,53,opt,name=max_prefix_restart_time,json=maxPrefixRestartTime,proto3" json:"max_prefix_restart_time,omitempty"`
	PrefixesAccepted                              uint32         `protobuf:"varint,54,opt,name=prefixes_accepted,json=prefixesAccepted,proto3" json:"prefixes_accepted,omitempty"`
	PrefixesSynced                                uint32         `protobuf:"varint,55,opt,name=prefixes_synced,json=prefixesSynced,proto3" json:"prefixes_synced,omitempty"`
	PrefixesWithdrawnNotFound                     uint32         `protobuf:"varint,56,opt,name=prefixes_withdrawn_not_found,json=prefixesWithdrawnNotFound,proto3" json:"prefixes_withdrawn_not_found,omitempty"`
	PrefixesDenied                                uint32         `protobuf:"varint,57,opt,name=prefixes_denied,json=prefixesDenied,proto3" json:"prefixes_denied,omitempty"`
	PrefixesDeniedNoPolicy                        uint32         `protobuf:"varint,58,opt,name=prefixes_denied_no_policy,json=prefixesDeniedNoPolicy,proto3" json:"prefixes_denied_no_policy,omitempty"`
	PrefixesDeniedRtPermit                        uint32         `protobuf:"varint,59,opt,name=prefixes_denied_rt_permit,json=prefixesDeniedRtPermit,proto3" json:"prefixes_denied_rt_permit,omitempty"`
	PrefixesDeniedOrfPolicy                       uint32         `protobuf:"varint,60,opt,name=prefixes_denied_orf_policy,json=prefixesDeniedOrfPolicy,proto3" json:"prefixes_denied_orf_policy,omitempty"`
	PrefixesDeniedPolicy                          uint32         `protobuf:"varint,61,opt,name=prefixes_denied_policy,json=prefixesDeniedPolicy,proto3" json:"prefixes_denied_policy,omitempty"`
	NumberOfBestpaths                             uint32         `protobuf:"varint,62,opt,name=number_of_bestpaths,json=numberOfBestpaths,proto3" json:"number_of_bestpaths,omitempty"`
	NumberOfBestExternalpaths                     uint32         `protobuf:"varint,63,opt,name=number_of_best_externalpaths,json=numberOfBestExternalpaths,proto3" json:"number_of_best_externalpaths,omitempty"`
	PrefixesAdvertised                            uint32         `protobuf:"varint,64,opt,name=prefixes_advertised,json=prefixesAdvertised,proto3" json:"prefixes_advertised,omitempty"`
	PrefixesBeAdvertised                          uint32         `protobuf:"varint,65,opt,name=prefixes_be_advertised,json=prefixesBeAdvertised,proto3" json:"prefixes_be_advertised,omitempty"`
	PrefixesSuppressed                            uint32         `protobuf:"varint,66,opt,name=prefixes_suppressed,json=prefixesSuppressed,proto3" json:"prefixes_suppressed,omitempty"`
	PrefixesWithdrawn                             uint32         `protobuf:"varint,67,opt,name=prefixes_withdrawn,json=prefixesWithdrawn,proto3" json:"prefixes_withdrawn,omitempty"`
	IsPeerOrfCapable                              bool           `protobuf:"varint,68,opt,name=is_peer_orf_capable,json=isPeerOrfCapable,proto3" json:"is_peer_orf_capable,omitempty"`
	IsAdvertisedOrfSend                           bool           `protobuf:"varint,69,opt,name=is_advertised_orf_send,json=isAdvertisedOrfSend,proto3" json:"is_advertised_orf_send,omitempty"`
	IsReceivedOrfSendCapable                      bool           `protobuf:"varint,70,opt,name=is_received_orf_send_capable,json=isReceivedOrfSendCapable,proto3" json:"is_received_orf_send_capable,omitempty"`
	IsAdvertisedOrfReceive                        bool           `protobuf:"varint,71,opt,name=is_advertised_orf_receive,json=isAdvertisedOrfReceive,proto3" json:"is_advertised_orf_receive,omitempty"`
	IsReceivedOrfReceiveCapable                   bool           `protobuf:"varint,72,opt,name=is_received_orf_receive_capable,json=isReceivedOrfReceiveCapable,proto3" json:"is_received_orf_receive_capable,omitempty"`
	IsAdvertisedGracefulRestart                   bool           `protobuf:"varint,73,opt,name=is_advertised_graceful_restart,json=isAdvertisedGracefulRestart,proto3" json:"is_advertised_graceful_restart,omitempty"`
	IsGracefulRestartStateFlag                    bool           `protobuf:"varint,74,opt,name=is_graceful_restart_state_flag,json=isGracefulRestartStateFlag,proto3" json:"is_graceful_restart_state_flag,omitempty"`
	IsReceivedGracefulRestartCapable              bool           `protobuf:"varint,75,opt,name=is_received_graceful_restart_capable,json=isReceivedGracefulRestartCapable,proto3" json:"is_received_graceful_restart_capable,omitempty"`
	IsAddPathSendCapabilityAdvertised             bool           `protobuf:"varint,76,opt,name=is_add_path_send_capability_advertised,json=isAddPathSendCapabilityAdvertised,proto3" json:"is_add_path_send_capability_advertised,omitempty"`
	IsAddPathSendCapabilityReceived               bool           `protobuf:"varint,77,opt,name=is_add_path_send_capability_received,json=isAddPathSendCapabilityReceived,proto3" json:"is_add_path_send_capability_received,omitempty"`
	IsAddPathReceiveCapabilityAdvertised          bool           `protobuf:"varint,78,opt,name=is_add_path_receive_capability_advertised,json=isAddPathReceiveCapabilityAdvertised,proto3" json:"is_add_path_receive_capability_advertised,omitempty"`
	IsAddPathReceiveCapabilityReceived            bool           `protobuf:"varint,79,opt,name=is_add_path_receive_capability_received,json=isAddPathReceiveCapabilityReceived,proto3" json:"is_add_path_receive_capability_received,omitempty"`
	IsExtNhEncodingCapabilityReceived             bool           `protobuf:"varint,80,opt,name=is_ext_nh_encoding_capability_received,json=isExtNhEncodingCapabilityReceived,proto3" json:"is_ext_nh_encoding_capability_received,omitempty"`
	IsExtNhEncodingCapabilitySent                 bool           `protobuf:"varint,81,opt,name=is_ext_nh_encoding_capability_sent,json=isExtNhEncodingCapabilitySent,proto3" json:"is_ext_nh_encoding_capability_sent,omitempty"`
	RestartTime                                   uint32         `protobuf:"varint,82,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`
	LocalRestartTime                              uint32         `protobuf:"varint,83,opt,name=local_restart_time,json=localRestartTime,proto3" json:"local_restart_time,omitempty"`
	StalePathTimeout                              uint32         `protobuf:"varint,84,opt,name=stale_path_timeout,json=stalePathTimeout,proto3" json:"stale_path_timeout,omitempty"`
	RibPurgeTimeoutValue                          uint32         `protobuf:"varint,85,opt,name=rib_purge_timeout_value,json=ribPurgeTimeoutValue,proto3" json:"rib_purge_timeout_value,omitempty"`
	NeighborPreservedForwardingState              bool           `protobuf:"varint,86,opt,name=neighbor_preserved_forwarding_state,json=neighborPreservedForwardingState,proto3" json:"neighbor_preserved_forwarding_state,omitempty"`
	LongLivedGracefulRestartStaleTimeConfigured   bool           `protobuf:"varint,87,opt,name=long_lived_graceful_restart_stale_time_configured,json=longLivedGracefulRestartStaleTimeConfigured,proto3" json:"long_lived_graceful_restart_stale_time_configured,omitempty"`
	LongLivedGracefulRestartStaleTimeSent         uint32         `protobuf:"varint,88,opt,name=long_lived_graceful_restart_stale_time_sent,json=longLivedGracefulRestartStaleTimeSent,proto3" json:"long_lived_graceful_restart_stale_time_sent,omitempty"`
	LongLivedGracefulRestartStaleTimeAccept       uint32         `protobuf:"varint,89,opt,name=long_lived_graceful_restart_stale_time_accept,json=longLivedGracefulRestartStaleTimeAccept,proto3" json:"long_lived_graceful_restart_stale_time_accept,omitempty"`
	LongLivedGracefulRestartCapabilityReceived    bool           `protobuf:"varint,90,opt,name=long_lived_graceful_restart_capability_received,json=longLivedGracefulRestartCapabilityReceived,proto3" json:"long_lived_graceful_restart_capability_received,omitempty"`
	LongLivedGracefulRestartStaleTimeReceived     uint32         `protobuf:"varint,91,opt,name=long_lived_graceful_restart_stale_time_received,json=longLivedGracefulRestartStaleTimeReceived,proto3" json:"long_lived_graceful_restart_stale_time_received,omitempty"`
	NeighborPreservedLongLivedForwardingState     bool           `protobuf:"varint,92,opt,name=neighbor_preserved_long_lived_forwarding_state,json=neighborPreservedLongLivedForwardingState,proto3" json:"neighbor_preserved_long_lived_forwarding_state,omitempty"`
	NeighborLongLivedGracefulRestartCapable       bool           `protobuf:"varint,93,opt,name=neighbor_long_lived_graceful_restart_capable,json=neighborLongLivedGracefulRestartCapable,proto3" json:"neighbor_long_lived_graceful_restart_capable,omitempty"`
	NeighborLongLivedGracefulRestartTimeRemaining uint32         `protobuf:"varint,94,opt,name=neighbor_long_lived_graceful_restart_time_remaining,json=neighborLongLivedGracefulRestartTimeRemaining,proto3" json:"neighbor_long_lived_graceful_restart_time_remaining,omitempty"`
	RouteRefreshesReceived                        uint32         `protobuf:"varint,95,opt,name=route_refreshes_received,json=routeRefreshesReceived,proto3" json:"route_refreshes_received,omitempty"`
	RouteRefreshesSent                            uint32         `protobuf:"varint,96,opt,name=route_refreshes_sent,json=routeRefreshesSent,proto3" json:"route_refreshes_sent,omitempty"`
	RefreshTargetVersion                          uint32         `protobuf:"varint,97,opt,name=refresh_target_version,json=refreshTargetVersion,proto3" json:"refresh_target_version,omitempty"`
	RefreshVersion                                uint32         `protobuf:"varint,98,opt,name=refresh_version,json=refreshVersion,proto3" json:"refresh_version,omitempty"`
	RefreshAckedVersion                           uint32         `protobuf:"varint,99,opt,name=refresh_acked_version,json=refreshAckedVersion,proto3" json:"refresh_acked_version,omitempty"`
	IsPrefixOrfPresent                            bool           `protobuf:"varint,100,opt,name=is_prefix_orf_present,json=isPrefixOrfPresent,proto3" json:"is_prefix_orf_present,omitempty"`
	OrfEntriesReceived                            uint32         `protobuf:"varint,101,opt,name=orf_entries_received,json=orfEntriesReceived,proto3" json:"orf_entries_received,omitempty"`
	IsDefaultOriginateSent                        bool           `protobuf:"varint,102,opt,name=is_default_originate_sent,json=isDefaultOriginateSent,proto3" json:"is_default_originate_sent,omitempty"`
	RoutePolicyPrefixOrf                          string         `protobuf:"bytes,103,opt,name=route_policy_prefix_orf,json=routePolicyPrefixOrf,proto3" json:"route_policy_prefix_orf,omitempty"`
	RoutePolicyIn                                 string         `protobuf:"bytes,104,opt,name=route_policy_in,json=routePolicyIn,proto3" json:"route_policy_in,omitempty"`
	RoutePolicyOut                                string         `protobuf:"bytes,105,opt,name=route_policy_out,json=routePolicyOut,proto3" json:"route_policy_out,omitempty"`
	RoutePolicyDefaultOriginate                   string         `protobuf:"bytes,106,opt,name=route_policy_default_originate,json=routePolicyDefaultOriginate,proto3" json:"route_policy_default_originate,omitempty"`
	IsNeighborEbgpWithoutInboundPolicy            bool           `protobuf:"varint,107,opt,name=is_neighbor_ebgp_without_inbound_policy,json=isNeighborEbgpWithoutInboundPolicy,proto3" json:"is_neighbor_ebgp_without_inbound_policy,omitempty"`
	IsNeighborEbgpWithoutOutboundPolicy           bool           `protobuf:"varint,108,opt,name=is_neighbor_ebgp_without_outbound_policy,json=isNeighborEbgpWithoutOutboundPolicy,proto3" json:"is_neighbor_ebgp_without_outbound_policy,omitempty"`
	IsUpdOrigLoopchkDisableSet                    bool           `protobuf:"varint,109,opt,name=is_upd_orig_loopchk_disable_set,json=isUpdOrigLoopchkDisableSet,proto3" json:"is_upd_orig_loopchk_disable_set,omitempty"`
	IsAsOverrideSet                               bool           `protobuf:"varint,110,opt,name=is_as_override_set,json=isAsOverrideSet,proto3" json:"is_as_override_set,omitempty"`
	IsAllowAsInSet                                bool           `protobuf:"varint,111,opt,name=is_allow_as_in_set,json=isAllowAsInSet,proto3" json:"is_allow_as_in_set,omitempty"`
	AllowAsInCount                                uint32         `protobuf:"varint,112,opt,name=allow_as_in_count,json=allowAsInCount,proto3" json:"allow_as_in_count,omitempty"`
	AddressFamilyLongLivedTime                    uint32         `protobuf:"varint,113,opt,name=address_family_long_lived_time,json=addressFamilyLongLivedTime,proto3" json:"address_family_long_lived_time,omitempty"`
	EoRReceivedInReadOnly                         bool           `protobuf:"varint,114,opt,name=eo_r_received_in_read_only,json=eoRReceivedInReadOnly,proto3" json:"eo_r_received_in_read_only,omitempty"`
	AckedVersion                                  uint32         `protobuf:"varint,115,opt,name=acked_version,json=ackedVersion,proto3" json:"acked_version,omitempty"`
	SyncedAckedVersion                            uint32         `protobuf:"varint,116,opt,name=synced_acked_version,json=syncedAckedVersion,proto3" json:"synced_acked_version,omitempty"`
	OutstandingVersion                            uint32         `protobuf:"varint,117,opt,name=outstanding_version,json=outstandingVersion,proto3" json:"outstanding_version,omitempty"`
	OutstandingRefreshVersion                     uint32         `protobuf:"varint,118,opt,name=outstanding_refresh_version,json=outstandingRefreshVersion,proto3" json:"outstanding_refresh_version,omitempty"`
	OutstandingVersionMax                         uint32         `protobuf:"varint,119,opt,name=outstanding_version_max,json=outstandingVersionMax,proto3" json:"outstanding_version_max,omitempty"`
	NeighborAfPerformanceStatistics               *BgpPerfNbrAf_ `protobuf:"bytes,120,opt,name=neighbor_af_performance_statistics,json=neighborAfPerformanceStatistics,proto3" json:"neighbor_af_performance_statistics,omitempty"`
	IsAigpSet                                     bool           `protobuf:"varint,121,opt,name=is_aigp_set,json=isAigpSet,proto3" json:"is_aigp_set,omitempty"`
	IsRtPresent                                   bool           `protobuf:"varint,122,opt,name=is_rt_present,json=isRtPresent,proto3" json:"is_rt_present,omitempty"`
	ExtendedCommunity                             []uint32       `protobuf:"varint,123,rep,packed,name=extended_community,json=extendedCommunity,proto3" json:"extended_community,omitempty"`
	IsRtPresentStandby                            bool           `protobuf:"varint,124,opt,name=is_rt_present_standby,json=isRtPresentStandby,proto3" json:"is_rt_present_standby,omitempty"`
	ExtendedCommunityStandby                      []uint32       `protobuf:"varint,125,rep,packed,name=extended_community_standby,json=extendedCommunityStandby,proto3" json:"extended_community_standby,omitempty"`
	AcceptOwnEnabled                              bool           `protobuf:"varint,126,opt,name=accept_own_enabled,json=acceptOwnEnabled,proto3" json:"accept_own_enabled,omitempty"`
	SelectiveMultipathEligible                    bool           `protobuf:"varint,127,opt,name=selective_multipath_eligible,json=selectiveMultipathEligible,proto3" json:"selective_multipath_eligible,omitempty"`
	AfrpkiDisable                                 bool           `protobuf:"varint,128,opt,name=afrpki_disable,json=afrpkiDisable,proto3" json:"afrpki_disable,omitempty"`
	AfrpkiUseValidity                             bool           `protobuf:"varint,129,opt,name=afrpki_use_validity,json=afrpkiUseValidity,proto3" json:"afrpki_use_validity,omitempty"`
	AfrpkiAllowInvalid                            bool           `protobuf:"varint,130,opt,name=afrpki_allow_invalid,json=afrpkiAllowInvalid,proto3" json:"afrpki_allow_invalid,omitempty"`
	AfrpkiSignalIbgp                              bool           `protobuf:"varint,131,opt,name=afrpki_signal_ibgp,json=afrpkiSignalIbgp,proto3" json:"afrpki_signal_ibgp,omitempty"`
	IsAdvertisePermanentNetwork                   bool           `protobuf:"varint,132,opt,name=is_advertise_permanent_network,json=isAdvertisePermanentNetwork,proto3" json:"is_advertise_permanent_network,omitempty"`
	IsSendMcastAttr                               bool           `protobuf:"varint,133,opt,name=is_send_mcast_attr,json=isSendMcastAttr,proto3" json:"is_send_mcast_attr,omitempty"`
	ImportStitching                               bool           `protobuf:"varint,134,opt,name=import_stitching,json=importStitching,proto3" json:"import_stitching,omitempty"`
	ImportReoriginate                             bool           `protobuf:"varint,135,opt,name=import_reoriginate,json=importReoriginate,proto3" json:"import_reoriginate,omitempty"`
	ImportReoriginateStitching                    bool           `protobuf:"varint,136,opt,name=import_reoriginate_stitching,json=importReoriginateStitching,proto3" json:"import_reoriginate_stitching,omitempty"`
	AdvertiseV4Flags                              uint32         `protobuf:"varint,137,opt,name=advertise_v4_flags,json=advertiseV4Flags,proto3" json:"advertise_v4_flags,omitempty"`
	AdvertiseV6Flags                              uint32         `protobuf:"varint,138,opt,name=advertise_v6_flags,json=advertiseV6Flags,proto3" json:"advertise_v6_flags,omitempty"`
	AdvertiseLocalLabeledRouteUnicast             bool           `protobuf:"varint,139,opt,name=advertise_local_labeled_route_unicast,json=advertiseLocalLabeledRouteUnicast,proto3" json:"advertise_local_labeled_route_unicast,omitempty"`
	PrefixesDeniedNonCumulative                   uint32         `protobuf:"varint,140,opt,name=prefixes_denied_non_cumulative,json=prefixesDeniedNonCumulative,proto3" json:"prefixes_denied_non_cumulative,omitempty"`
	EnableLabelStack                              bool           `protobuf:"varint,141,opt,name=enable_label_stack,json=enableLabelStack,proto3" json:"enable_label_stack,omitempty"`
	OtProvTrackEnable                             bool           `protobuf:"varint,142,opt,name=ot_prov_track_enable,json=otProvTrackEnable,proto3" json:"ot_prov_track_enable,omitempty"`
	OtProvTrackState                              string         `protobuf:"bytes,143,opt,name=ot_prov_track_state,json=otProvTrackState,proto3" json:"ot_prov_track_state,omitempty"`
	OtProvTrackInGrState                          bool           `protobuf:"varint,144,opt,name=ot_prov_track_in_gr_state,json=otProvTrackInGrState,proto3" json:"ot_prov_track_in_gr_state,omitempty"`
	OtProvTrackEorTmrRunning                      bool           `protobuf:"varint,145,opt,name=ot_prov_track_eor_tmr_running,json=otProvTrackEorTmrRunning,proto3" json:"ot_prov_track_eor_tmr_running,omitempty"`
	SlowPeerFlags                                 uint32         `protobuf:"varint,146,opt,name=slow_peer_flags,json=slowPeerFlags,proto3" json:"slow_peer_flags,omitempty"`
	SlowPeerStatic                                bool           `protobuf:"varint,147,opt,name=slow_peer_static,json=slowPeerStatic,proto3" json:"slow_peer_static,omitempty"`
	SlowPeerDynamic                               bool           `protobuf:"varint,148,opt,name=slow_peer_dynamic,json=slowPeerDynamic,proto3" json:"slow_peer_dynamic,omitempty"`
	SlowPeerPermanent                             bool           `protobuf:"varint,149,opt,name=slow_peer_permanent,json=slowPeerPermanent,proto3" json:"slow_peer_permanent,omitempty"`
	SlowPeerCount                                 uint32         `protobuf:"varint,150,opt,name=slow_peer_count,json=slowPeerCount,proto3" json:"slow_peer_count,omitempty"`
}

func (x *BgpNbrAf_) Reset() {
	*x = BgpNbrAf_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrAf_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrAf_) ProtoMessage() {}

func (x *BgpNbrAf_) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrAf_.ProtoReflect.Descriptor instead.
func (*BgpNbrAf_) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{10}
}

func (x *BgpNbrAf_) GetAfName() string {
	if x != nil {
		return x.AfName
	}
	return ""
}

func (x *BgpNbrAf_) GetIsNeighborRouteReflectorClient() bool {
	if x != nil {
		return x.IsNeighborRouteReflectorClient
	}
	return false
}

func (x *BgpNbrAf_) GetIsLegacyPeRt() bool {
	if x != nil {
		return x.IsLegacyPeRt
	}
	return false
}

func (x *BgpNbrAf_) GetIsNeighborAfCapable() bool {
	if x != nil {
		return x.IsNeighborAfCapable
	}
	return false
}

func (x *BgpNbrAf_) GetIsSoftReconfigurationInboundAllowed() bool {
	if x != nil {
		return x.IsSoftReconfigurationInboundAllowed
	}
	return false
}

func (x *BgpNbrAf_) GetIsUseSoftReconfigurationAlwaysOn() bool {
	if x != nil {
		return x.IsUseSoftReconfigurationAlwaysOn
	}
	return false
}

func (x *BgpNbrAf_) GetRemovePrivateAsFromUpdates() bool {
	if x != nil {
		return x.RemovePrivateAsFromUpdates
	}
	return false
}

func (x *BgpNbrAf_) GetRemovePrivateAsEntireAspathFromUpdates() bool {
	if x != nil {
		return x.RemovePrivateAsEntireAspathFromUpdates
	}
	return false
}

func (x *BgpNbrAf_) GetRemovePrivateAsFromInboundUpdates() bool {
	if x != nil {
		return x.RemovePrivateAsFromInboundUpdates
	}
	return false
}

func (x *BgpNbrAf_) GetRemovePrivateAsEntireAspathFromInboundUpdates() bool {
	if x != nil {
		return x.RemovePrivateAsEntireAspathFromInboundUpdates
	}
	return false
}

func (x *BgpNbrAf_) GetFlowspecValidationDIsable() bool {
	if x != nil {
		return x.FlowspecValidationDIsable
	}
	return false
}

func (x *BgpNbrAf_) GetFlowspecRedirectValidationDIsable() bool {
	if x != nil {
		return x.FlowspecRedirectValidationDIsable
	}
	return false
}

func (x *BgpNbrAf_) GetOrrGroupName() string {
	if x != nil {
		return x.OrrGroupName
	}
	return ""
}

func (x *BgpNbrAf_) GetOrrGroupIndex() uint32 {
	if x != nil {
		return x.OrrGroupIndex
	}
	return 0
}

func (x *BgpNbrAf_) GetIsOrrRootAddressConfigured() bool {
	if x != nil {
		return x.IsOrrRootAddressConfigured
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseAfi() bool {
	if x != nil {
		return x.AdvertiseAfi
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseAfiReorg() bool {
	if x != nil {
		return x.AdvertiseAfiReorg
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseAfiDisable() bool {
	if x != nil {
		return x.AdvertiseAfiDisable
	}
	return false
}

func (x *BgpNbrAf_) GetEncapsulationType() uint32 {
	if x != nil {
		return x.EncapsulationType
	}
	return 0
}

func (x *BgpNbrAf_) GetAdvertiseRtType() uint32 {
	if x != nil {
		return x.AdvertiseRtType
	}
	return 0
}

func (x *BgpNbrAf_) GetAdvertiseAfiDefVrfImpDisable() bool {
	if x != nil {
		return x.AdvertiseAfiDefVrfImpDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseEvpNv4AfiDefVrfImpDisable() bool {
	if x != nil {
		return x.AdvertiseEvpNv4AfiDefVrfImpDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseEvpNv6AfiDefVrfImpDisable() bool {
	if x != nil {
		return x.AdvertiseEvpNv6AfiDefVrfImpDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseAfiVrfReImpDisable() bool {
	if x != nil {
		return x.AdvertiseAfiVrfReImpDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseEvpNv4AfiVrfReImpDisable() bool {
	if x != nil {
		return x.AdvertiseEvpNv4AfiVrfReImpDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseEvpNv6AfiVrfReImpDisable() bool {
	if x != nil {
		return x.AdvertiseEvpNv6AfiVrfReImpDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseAfiEoRReady() bool {
	if x != nil {
		return x.AdvertiseAfiEoRReady
	}
	return false
}

func (x *BgpNbrAf_) GetAlwaysUseNextHopLocal() bool {
	if x != nil {
		return x.AlwaysUseNextHopLocal
	}
	return false
}

func (x *BgpNbrAf_) GetSentCommunityToNeighbor() bool {
	if x != nil {
		return x.SentCommunityToNeighbor
	}
	return false
}

func (x *BgpNbrAf_) GetSentGshutCommunityToNeighbor() bool {
	if x != nil {
		return x.SentGshutCommunityToNeighbor
	}
	return false
}

func (x *BgpNbrAf_) GetSentExtendedCommunityToNeighbor() bool {
	if x != nil {
		return x.SentExtendedCommunityToNeighbor
	}
	return false
}

func (x *BgpNbrAf_) GetDefaultOriginateVpnIndex() uint32 {
	if x != nil {
		return x.DefaultOriginateVpnIndex
	}
	return 0
}

func (x *BgpNbrAf_) GetNeighborDefaultOriginate() bool {
	if x != nil {
		return x.NeighborDefaultOriginate
	}
	return false
}

func (x *BgpNbrAf_) GetIsOrfSent() bool {
	if x != nil {
		return x.IsOrfSent
	}
	return false
}

func (x *BgpNbrAf_) GetIsUpdateDeferred() bool {
	if x != nil {
		return x.IsUpdateDeferred
	}
	return false
}

func (x *BgpNbrAf_) GetIsOrfSendScheduled() bool {
	if x != nil {
		return x.IsOrfSendScheduled
	}
	return false
}

func (x *BgpNbrAf_) GetUpdateGroupNumber() uint32 {
	if x != nil {
		return x.UpdateGroupNumber
	}
	return 0
}

func (x *BgpNbrAf_) GetFilterGroupIndex() uint32 {
	if x != nil {
		return x.FilterGroupIndex
	}
	return 0
}

func (x *BgpNbrAf_) GetIsUpdateThrottled() bool {
	if x != nil {
		return x.IsUpdateThrottled
	}
	return false
}

func (x *BgpNbrAf_) GetIsUpdateLeaving() bool {
	if x != nil {
		return x.IsUpdateLeaving
	}
	return false
}

func (x *BgpNbrAf_) GetVpnUpdateGenEnabled() bool {
	if x != nil {
		return x.VpnUpdateGenEnabled
	}
	return false
}

func (x *BgpNbrAf_) GetVpnUpdateGenTriggerEnabled() bool {
	if x != nil {
		return x.VpnUpdateGenTriggerEnabled
	}
	return false
}

func (x *BgpNbrAf_) GetIsAddpathSendOperational() bool {
	if x != nil {
		return x.IsAddpathSendOperational
	}
	return false
}

func (x *BgpNbrAf_) GetIsAddpathReceiveOperational() bool {
	if x != nil {
		return x.IsAddpathReceiveOperational
	}
	return false
}

func (x *BgpNbrAf_) GetNeighborVersion() uint32 {
	if x != nil {
		return x.NeighborVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BgpNbrAf_) GetMaxPrefixLimit() uint32 {
	if x != nil {
		return x.MaxPrefixLimit
	}
	return 0
}

func (x *BgpNbrAf_) GetUseMaxPrefixWarningOnly() bool {
	if x != nil {
		return x.UseMaxPrefixWarningOnly
	}
	return false
}

func (x *BgpNbrAf_) GetMaxPrefixDiscardExtraPaths() bool {
	if x != nil {
		return x.MaxPrefixDiscardExtraPaths
	}
	return false
}

func (x *BgpNbrAf_) GetMaxPrefixExceedDiscardPaths() bool {
	if x != nil {
		return x.MaxPrefixExceedDiscardPaths
	}
	return false
}

func (x *BgpNbrAf_) GetMaxPrefixThresholdPercent() uint32 {
	if x != nil {
		return x.MaxPrefixThresholdPercent
	}
	return 0
}

func (x *BgpNbrAf_) GetMaxPrefixDiscardPathsCount() uint32 {
	if x != nil {
		return x.MaxPrefixDiscardPathsCount
	}
	return 0
}

func (x *BgpNbrAf_) GetMaxPrefixRestartTime() uint32 {
	if x != nil {
		return x.MaxPrefixRestartTime
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesAccepted() uint32 {
	if x != nil {
		return x.PrefixesAccepted
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesSynced() uint32 {
	if x != nil {
		return x.PrefixesSynced
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesWithdrawnNotFound() uint32 {
	if x != nil {
		return x.PrefixesWithdrawnNotFound
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesDenied() uint32 {
	if x != nil {
		return x.PrefixesDenied
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesDeniedNoPolicy() uint32 {
	if x != nil {
		return x.PrefixesDeniedNoPolicy
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesDeniedRtPermit() uint32 {
	if x != nil {
		return x.PrefixesDeniedRtPermit
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesDeniedOrfPolicy() uint32 {
	if x != nil {
		return x.PrefixesDeniedOrfPolicy
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesDeniedPolicy() uint32 {
	if x != nil {
		return x.PrefixesDeniedPolicy
	}
	return 0
}

func (x *BgpNbrAf_) GetNumberOfBestpaths() uint32 {
	if x != nil {
		return x.NumberOfBestpaths
	}
	return 0
}

func (x *BgpNbrAf_) GetNumberOfBestExternalpaths() uint32 {
	if x != nil {
		return x.NumberOfBestExternalpaths
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesAdvertised() uint32 {
	if x != nil {
		return x.PrefixesAdvertised
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesBeAdvertised() uint32 {
	if x != nil {
		return x.PrefixesBeAdvertised
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesSuppressed() uint32 {
	if x != nil {
		return x.PrefixesSuppressed
	}
	return 0
}

func (x *BgpNbrAf_) GetPrefixesWithdrawn() uint32 {
	if x != nil {
		return x.PrefixesWithdrawn
	}
	return 0
}

func (x *BgpNbrAf_) GetIsPeerOrfCapable() bool {
	if x != nil {
		return x.IsPeerOrfCapable
	}
	return false
}

func (x *BgpNbrAf_) GetIsAdvertisedOrfSend() bool {
	if x != nil {
		return x.IsAdvertisedOrfSend
	}
	return false
}

func (x *BgpNbrAf_) GetIsReceivedOrfSendCapable() bool {
	if x != nil {
		return x.IsReceivedOrfSendCapable
	}
	return false
}

func (x *BgpNbrAf_) GetIsAdvertisedOrfReceive() bool {
	if x != nil {
		return x.IsAdvertisedOrfReceive
	}
	return false
}

func (x *BgpNbrAf_) GetIsReceivedOrfReceiveCapable() bool {
	if x != nil {
		return x.IsReceivedOrfReceiveCapable
	}
	return false
}

func (x *BgpNbrAf_) GetIsAdvertisedGracefulRestart() bool {
	if x != nil {
		return x.IsAdvertisedGracefulRestart
	}
	return false
}

func (x *BgpNbrAf_) GetIsGracefulRestartStateFlag() bool {
	if x != nil {
		return x.IsGracefulRestartStateFlag
	}
	return false
}

func (x *BgpNbrAf_) GetIsReceivedGracefulRestartCapable() bool {
	if x != nil {
		return x.IsReceivedGracefulRestartCapable
	}
	return false
}

func (x *BgpNbrAf_) GetIsAddPathSendCapabilityAdvertised() bool {
	if x != nil {
		return x.IsAddPathSendCapabilityAdvertised
	}
	return false
}

func (x *BgpNbrAf_) GetIsAddPathSendCapabilityReceived() bool {
	if x != nil {
		return x.IsAddPathSendCapabilityReceived
	}
	return false
}

func (x *BgpNbrAf_) GetIsAddPathReceiveCapabilityAdvertised() bool {
	if x != nil {
		return x.IsAddPathReceiveCapabilityAdvertised
	}
	return false
}

func (x *BgpNbrAf_) GetIsAddPathReceiveCapabilityReceived() bool {
	if x != nil {
		return x.IsAddPathReceiveCapabilityReceived
	}
	return false
}

func (x *BgpNbrAf_) GetIsExtNhEncodingCapabilityReceived() bool {
	if x != nil {
		return x.IsExtNhEncodingCapabilityReceived
	}
	return false
}

func (x *BgpNbrAf_) GetIsExtNhEncodingCapabilitySent() bool {
	if x != nil {
		return x.IsExtNhEncodingCapabilitySent
	}
	return false
}

func (x *BgpNbrAf_) GetRestartTime() uint32 {
	if x != nil {
		return x.RestartTime
	}
	return 0
}

func (x *BgpNbrAf_) GetLocalRestartTime() uint32 {
	if x != nil {
		return x.LocalRestartTime
	}
	return 0
}

func (x *BgpNbrAf_) GetStalePathTimeout() uint32 {
	if x != nil {
		return x.StalePathTimeout
	}
	return 0
}

func (x *BgpNbrAf_) GetRibPurgeTimeoutValue() uint32 {
	if x != nil {
		return x.RibPurgeTimeoutValue
	}
	return 0
}

func (x *BgpNbrAf_) GetNeighborPreservedForwardingState() bool {
	if x != nil {
		return x.NeighborPreservedForwardingState
	}
	return false
}

func (x *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeConfigured() bool {
	if x != nil {
		return x.LongLivedGracefulRestartStaleTimeConfigured
	}
	return false
}

func (x *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeSent() uint32 {
	if x != nil {
		return x.LongLivedGracefulRestartStaleTimeSent
	}
	return 0
}

func (x *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeAccept() uint32 {
	if x != nil {
		return x.LongLivedGracefulRestartStaleTimeAccept
	}
	return 0
}

func (x *BgpNbrAf_) GetLongLivedGracefulRestartCapabilityReceived() bool {
	if x != nil {
		return x.LongLivedGracefulRestartCapabilityReceived
	}
	return false
}

func (x *BgpNbrAf_) GetLongLivedGracefulRestartStaleTimeReceived() uint32 {
	if x != nil {
		return x.LongLivedGracefulRestartStaleTimeReceived
	}
	return 0
}

func (x *BgpNbrAf_) GetNeighborPreservedLongLivedForwardingState() bool {
	if x != nil {
		return x.NeighborPreservedLongLivedForwardingState
	}
	return false
}

func (x *BgpNbrAf_) GetNeighborLongLivedGracefulRestartCapable() bool {
	if x != nil {
		return x.NeighborLongLivedGracefulRestartCapable
	}
	return false
}

func (x *BgpNbrAf_) GetNeighborLongLivedGracefulRestartTimeRemaining() uint32 {
	if x != nil {
		return x.NeighborLongLivedGracefulRestartTimeRemaining
	}
	return 0
}

func (x *BgpNbrAf_) GetRouteRefreshesReceived() uint32 {
	if x != nil {
		return x.RouteRefreshesReceived
	}
	return 0
}

func (x *BgpNbrAf_) GetRouteRefreshesSent() uint32 {
	if x != nil {
		return x.RouteRefreshesSent
	}
	return 0
}

func (x *BgpNbrAf_) GetRefreshTargetVersion() uint32 {
	if x != nil {
		return x.RefreshTargetVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetRefreshVersion() uint32 {
	if x != nil {
		return x.RefreshVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetRefreshAckedVersion() uint32 {
	if x != nil {
		return x.RefreshAckedVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetIsPrefixOrfPresent() bool {
	if x != nil {
		return x.IsPrefixOrfPresent
	}
	return false
}

func (x *BgpNbrAf_) GetOrfEntriesReceived() uint32 {
	if x != nil {
		return x.OrfEntriesReceived
	}
	return 0
}

func (x *BgpNbrAf_) GetIsDefaultOriginateSent() bool {
	if x != nil {
		return x.IsDefaultOriginateSent
	}
	return false
}

func (x *BgpNbrAf_) GetRoutePolicyPrefixOrf() string {
	if x != nil {
		return x.RoutePolicyPrefixOrf
	}
	return ""
}

func (x *BgpNbrAf_) GetRoutePolicyIn() string {
	if x != nil {
		return x.RoutePolicyIn
	}
	return ""
}

func (x *BgpNbrAf_) GetRoutePolicyOut() string {
	if x != nil {
		return x.RoutePolicyOut
	}
	return ""
}

func (x *BgpNbrAf_) GetRoutePolicyDefaultOriginate() string {
	if x != nil {
		return x.RoutePolicyDefaultOriginate
	}
	return ""
}

func (x *BgpNbrAf_) GetIsNeighborEbgpWithoutInboundPolicy() bool {
	if x != nil {
		return x.IsNeighborEbgpWithoutInboundPolicy
	}
	return false
}

func (x *BgpNbrAf_) GetIsNeighborEbgpWithoutOutboundPolicy() bool {
	if x != nil {
		return x.IsNeighborEbgpWithoutOutboundPolicy
	}
	return false
}

func (x *BgpNbrAf_) GetIsUpdOrigLoopchkDisableSet() bool {
	if x != nil {
		return x.IsUpdOrigLoopchkDisableSet
	}
	return false
}

func (x *BgpNbrAf_) GetIsAsOverrideSet() bool {
	if x != nil {
		return x.IsAsOverrideSet
	}
	return false
}

func (x *BgpNbrAf_) GetIsAllowAsInSet() bool {
	if x != nil {
		return x.IsAllowAsInSet
	}
	return false
}

func (x *BgpNbrAf_) GetAllowAsInCount() uint32 {
	if x != nil {
		return x.AllowAsInCount
	}
	return 0
}

func (x *BgpNbrAf_) GetAddressFamilyLongLivedTime() uint32 {
	if x != nil {
		return x.AddressFamilyLongLivedTime
	}
	return 0
}

func (x *BgpNbrAf_) GetEoRReceivedInReadOnly() bool {
	if x != nil {
		return x.EoRReceivedInReadOnly
	}
	return false
}

func (x *BgpNbrAf_) GetAckedVersion() uint32 {
	if x != nil {
		return x.AckedVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetSyncedAckedVersion() uint32 {
	if x != nil {
		return x.SyncedAckedVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetOutstandingVersion() uint32 {
	if x != nil {
		return x.OutstandingVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetOutstandingRefreshVersion() uint32 {
	if x != nil {
		return x.OutstandingRefreshVersion
	}
	return 0
}

func (x *BgpNbrAf_) GetOutstandingVersionMax() uint32 {
	if x != nil {
		return x.OutstandingVersionMax
	}
	return 0
}

func (x *BgpNbrAf_) GetNeighborAfPerformanceStatistics() *BgpPerfNbrAf_ {
	if x != nil {
		return x.NeighborAfPerformanceStatistics
	}
	return nil
}

func (x *BgpNbrAf_) GetIsAigpSet() bool {
	if x != nil {
		return x.IsAigpSet
	}
	return false
}

func (x *BgpNbrAf_) GetIsRtPresent() bool {
	if x != nil {
		return x.IsRtPresent
	}
	return false
}

func (x *BgpNbrAf_) GetExtendedCommunity() []uint32 {
	if x != nil {
		return x.ExtendedCommunity
	}
	return nil
}

func (x *BgpNbrAf_) GetIsRtPresentStandby() bool {
	if x != nil {
		return x.IsRtPresentStandby
	}
	return false
}

func (x *BgpNbrAf_) GetExtendedCommunityStandby() []uint32 {
	if x != nil {
		return x.ExtendedCommunityStandby
	}
	return nil
}

func (x *BgpNbrAf_) GetAcceptOwnEnabled() bool {
	if x != nil {
		return x.AcceptOwnEnabled
	}
	return false
}

func (x *BgpNbrAf_) GetSelectiveMultipathEligible() bool {
	if x != nil {
		return x.SelectiveMultipathEligible
	}
	return false
}

func (x *BgpNbrAf_) GetAfrpkiDisable() bool {
	if x != nil {
		return x.AfrpkiDisable
	}
	return false
}

func (x *BgpNbrAf_) GetAfrpkiUseValidity() bool {
	if x != nil {
		return x.AfrpkiUseValidity
	}
	return false
}

func (x *BgpNbrAf_) GetAfrpkiAllowInvalid() bool {
	if x != nil {
		return x.AfrpkiAllowInvalid
	}
	return false
}

func (x *BgpNbrAf_) GetAfrpkiSignalIbgp() bool {
	if x != nil {
		return x.AfrpkiSignalIbgp
	}
	return false
}

func (x *BgpNbrAf_) GetIsAdvertisePermanentNetwork() bool {
	if x != nil {
		return x.IsAdvertisePermanentNetwork
	}
	return false
}

func (x *BgpNbrAf_) GetIsSendMcastAttr() bool {
	if x != nil {
		return x.IsSendMcastAttr
	}
	return false
}

func (x *BgpNbrAf_) GetImportStitching() bool {
	if x != nil {
		return x.ImportStitching
	}
	return false
}

func (x *BgpNbrAf_) GetImportReoriginate() bool {
	if x != nil {
		return x.ImportReoriginate
	}
	return false
}

func (x *BgpNbrAf_) GetImportReoriginateStitching() bool {
	if x != nil {
		return x.ImportReoriginateStitching
	}
	return false
}

func (x *BgpNbrAf_) GetAdvertiseV4Flags() uint32 {
	if x != nil {
		return x.AdvertiseV4Flags
	}
	return 0
}

func (x *BgpNbrAf_) GetAdvertiseV6Flags() uint32 {
	if x != nil {
		return x.AdvertiseV6Flags
	}
	return 0
}

func (x *BgpNbrAf_) GetAdvertiseLocalLabeledRouteUnicast() bool {
	if x != nil {
		return x.AdvertiseLocalLabeledRouteUnicast
	}
	return false
}

func (x *BgpNbrAf_) GetPrefixesDeniedNonCumulative() uint32 {
	if x != nil {
		return x.PrefixesDeniedNonCumulative
	}
	return 0
}

func (x *BgpNbrAf_) GetEnableLabelStack() bool {
	if x != nil {
		return x.EnableLabelStack
	}
	return false
}

func (x *BgpNbrAf_) GetOtProvTrackEnable() bool {
	if x != nil {
		return x.OtProvTrackEnable
	}
	return false
}

func (x *BgpNbrAf_) GetOtProvTrackState() string {
	if x != nil {
		return x.OtProvTrackState
	}
	return ""
}

func (x *BgpNbrAf_) GetOtProvTrackInGrState() bool {
	if x != nil {
		return x.OtProvTrackInGrState
	}
	return false
}

func (x *BgpNbrAf_) GetOtProvTrackEorTmrRunning() bool {
	if x != nil {
		return x.OtProvTrackEorTmrRunning
	}
	return false
}

func (x *BgpNbrAf_) GetSlowPeerFlags() uint32 {
	if x != nil {
		return x.SlowPeerFlags
	}
	return 0
}

func (x *BgpNbrAf_) GetSlowPeerStatic() bool {
	if x != nil {
		return x.SlowPeerStatic
	}
	return false
}

func (x *BgpNbrAf_) GetSlowPeerDynamic() bool {
	if x != nil {
		return x.SlowPeerDynamic
	}
	return false
}

func (x *BgpNbrAf_) GetSlowPeerPermanent() bool {
	if x != nil {
		return x.SlowPeerPermanent
	}
	return false
}

func (x *BgpNbrAf_) GetSlowPeerCount() uint32 {
	if x != nil {
		return x.SlowPeerCount
	}
	return 0
}

type BgpTimespec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds     uint32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *BgpTimespec) Reset() {
	*x = BgpTimespec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpTimespec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpTimespec) ProtoMessage() {}

func (x *BgpTimespec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpTimespec.ProtoReflect.Descriptor instead.
func (*BgpTimespec) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{11}
}

func (x *BgpTimespec) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *BgpTimespec) GetNanoseconds() uint32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

type BgpNbrMsgStatsUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count        uint32       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	LastTimeSpec *BgpTimespec `protobuf:"bytes,2,opt,name=last_time_spec,json=lastTimeSpec,proto3" json:"last_time_spec,omitempty"`
}

func (x *BgpNbrMsgStatsUnit) Reset() {
	*x = BgpNbrMsgStatsUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrMsgStatsUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrMsgStatsUnit) ProtoMessage() {}

func (x *BgpNbrMsgStatsUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrMsgStatsUnit.ProtoReflect.Descriptor instead.
func (*BgpNbrMsgStatsUnit) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{12}
}

func (x *BgpNbrMsgStatsUnit) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BgpNbrMsgStatsUnit) GetLastTimeSpec() *BgpTimespec {
	if x != nil {
		return x.LastTimeSpec
	}
	return nil
}

type BgpNbrMsgStatsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *BgpNbrMsgStatsUnit `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Rx *BgpNbrMsgStatsUnit `protobuf:"bytes,2,opt,name=rx,proto3" json:"rx,omitempty"`
}

func (x *BgpNbrMsgStatsOp) Reset() {
	*x = BgpNbrMsgStatsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrMsgStatsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrMsgStatsOp) ProtoMessage() {}

func (x *BgpNbrMsgStatsOp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrMsgStatsOp.ProtoReflect.Descriptor instead.
func (*BgpNbrMsgStatsOp) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{13}
}

func (x *BgpNbrMsgStatsOp) GetTx() *BgpNbrMsgStatsUnit {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *BgpNbrMsgStatsOp) GetRx() *BgpNbrMsgStatsUnit {
	if x != nil {
		return x.Rx
	}
	return nil
}

type BgpNbrMsgStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open         *BgpNbrMsgStatsOp `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"`
	Notification *BgpNbrMsgStatsOp `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
	Update       *BgpNbrMsgStatsOp `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Keepalive    *BgpNbrMsgStatsOp `protobuf:"bytes,4,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	RouteRefresh *BgpNbrMsgStatsOp `protobuf:"bytes,5,opt,name=route_refresh,json=routeRefresh,proto3" json:"route_refresh,omitempty"`
	Total        *BgpNbrMsgStatsOp `protobuf:"bytes,6,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BgpNbrMsgStats) Reset() {
	*x = BgpNbrMsgStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrMsgStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrMsgStats) ProtoMessage() {}

func (x *BgpNbrMsgStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrMsgStats.ProtoReflect.Descriptor instead.
func (*BgpNbrMsgStats) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{14}
}

func (x *BgpNbrMsgStats) GetOpen() *BgpNbrMsgStatsOp {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *BgpNbrMsgStats) GetNotification() *BgpNbrMsgStatsOp {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *BgpNbrMsgStats) GetUpdate() *BgpNbrMsgStatsOp {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *BgpNbrMsgStats) GetKeepalive() *BgpNbrMsgStatsOp {
	if x != nil {
		return x.Keepalive
	}
	return nil
}

func (x *BgpNbrMsgStats) GetRouteRefresh() *BgpNbrMsgStatsOp {
	if x != nil {
		return x.RouteRefresh
	}
	return nil
}

func (x *BgpNbrMsgStats) GetTotal() *BgpNbrMsgStatsOp {
	if x != nil {
		return x.Total
	}
	return nil
}

type BgpNbrGshut_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GshutExists          bool   `protobuf:"varint,1,opt,name=gshut_exists,json=gshutExists,proto3" json:"gshut_exists,omitempty"`
	GshutLocalActive     bool   `protobuf:"varint,2,opt,name=gshut_local_active,json=gshutLocalActive,proto3" json:"gshut_local_active,omitempty"`
	GshutActive          bool   `protobuf:"varint,3,opt,name=gshut_active,json=gshutActive,proto3" json:"gshut_active,omitempty"`
	GshutLocprefSet      bool   `protobuf:"varint,4,opt,name=gshut_locpref_set,json=gshutLocprefSet,proto3" json:"gshut_locpref_set,omitempty"`
	GshutLocpref         uint32 `protobuf:"varint,5,opt,name=gshut_locpref,json=gshutLocpref,proto3" json:"gshut_locpref,omitempty"`
	GshutPrepends        uint32 `protobuf:"varint,6,opt,name=gshut_prepends,json=gshutPrepends,proto3" json:"gshut_prepends,omitempty"`
	GshutInterfaceActive bool   `protobuf:"varint,7,opt,name=gshut_interface_active,json=gshutInterfaceActive,proto3" json:"gshut_interface_active,omitempty"`
	GshutLocationActive  bool   `protobuf:"varint,8,opt,name=gshut_location_active,json=gshutLocationActive,proto3" json:"gshut_location_active,omitempty"`
}

func (x *BgpNbrGshut_) Reset() {
	*x = BgpNbrGshut_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrGshut_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrGshut_) ProtoMessage() {}

func (x *BgpNbrGshut_) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrGshut_.ProtoReflect.Descriptor instead.
func (*BgpNbrGshut_) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{15}
}

func (x *BgpNbrGshut_) GetGshutExists() bool {
	if x != nil {
		return x.GshutExists
	}
	return false
}

func (x *BgpNbrGshut_) GetGshutLocalActive() bool {
	if x != nil {
		return x.GshutLocalActive
	}
	return false
}

func (x *BgpNbrGshut_) GetGshutActive() bool {
	if x != nil {
		return x.GshutActive
	}
	return false
}

func (x *BgpNbrGshut_) GetGshutLocprefSet() bool {
	if x != nil {
		return x.GshutLocprefSet
	}
	return false
}

func (x *BgpNbrGshut_) GetGshutLocpref() uint32 {
	if x != nil {
		return x.GshutLocpref
	}
	return 0
}

func (x *BgpNbrGshut_) GetGshutPrepends() uint32 {
	if x != nil {
		return x.GshutPrepends
	}
	return 0
}

func (x *BgpNbrGshut_) GetGshutInterfaceActive() bool {
	if x != nil {
		return x.GshutInterfaceActive
	}
	return false
}

func (x *BgpNbrGshut_) GetGshutLocationActive() bool {
	if x != nil {
		return x.GshutLocationActive
	}
	return false
}

type BgpNbrBag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpeakerId                               uint32          `protobuf:"varint,50,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	Description                             string          `protobuf:"bytes,51,opt,name=description,proto3" json:"description,omitempty"`
	LocalAs                                 uint32          `protobuf:"varint,52,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RemoteAs                                uint32          `protobuf:"varint,53,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	HasInternalLink                         bool            `protobuf:"varint,54,opt,name=has_internal_link,json=hasInternalLink,proto3" json:"has_internal_link,omitempty"`
	IsExternalNeighborNotDirectlyConnected  bool            `protobuf:"varint,55,opt,name=is_external_neighbor_not_directly_connected,json=isExternalNeighborNotDirectlyConnected,proto3" json:"is_external_neighbor_not_directly_connected,omitempty"`
	MessagesReceived                        uint32          `protobuf:"varint,56,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
	MessagesSent                            uint32          `protobuf:"varint,57,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	UpdateMessagesIn                        uint32          `protobuf:"varint,58,opt,name=update_messages_in,json=updateMessagesIn,proto3" json:"update_messages_in,omitempty"`
	UpdateMessagesOut                       uint32          `protobuf:"varint,59,opt,name=update_messages_out,json=updateMessagesOut,proto3" json:"update_messages_out,omitempty"`
	MessagesQueuedIn                        uint32          `protobuf:"varint,60,opt,name=messages_queued_in,json=messagesQueuedIn,proto3" json:"messages_queued_in,omitempty"`
	MessagesQueuedOut                       uint32          `protobuf:"varint,61,opt,name=messages_queued_out,json=messagesQueuedOut,proto3" json:"messages_queued_out,omitempty"`
	ConnectionEstablishedTime               uint32          `protobuf:"varint,62,opt,name=connection_established_time,json=connectionEstablishedTime,proto3" json:"connection_established_time,omitempty"`
	ConnectionState                         string          `protobuf:"bytes,63,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	PreviousConnectionState                 uint32          `protobuf:"varint,64,opt,name=previous_connection_state,json=previousConnectionState,proto3" json:"previous_connection_state,omitempty"`
	ConnectionAdminStatus                   uint32          `protobuf:"varint,65,opt,name=connection_admin_status,json=connectionAdminStatus,proto3" json:"connection_admin_status,omitempty"`
	OpenCheckErrorCode                      string          `protobuf:"bytes,66,opt,name=open_check_error_code,json=openCheckErrorCode,proto3" json:"open_check_error_code,omitempty"`
	ConnectionLocalAddress                  *BgpAddrtype    `protobuf:"bytes,67,opt,name=connection_local_address,json=connectionLocalAddress,proto3" json:"connection_local_address,omitempty"`
	IsLocalAddressConfigured                bool            `protobuf:"varint,68,opt,name=is_local_address_configured,json=isLocalAddressConfigured,proto3" json:"is_local_address_configured,omitempty"`
	ConnectionLocalPort                     uint32          `protobuf:"varint,69,opt,name=connection_local_port,json=connectionLocalPort,proto3" json:"connection_local_port,omitempty"`
	ConnectionRemoteAddress                 *BgpAddrtype    `protobuf:"bytes,70,opt,name=connection_remote_address,json=connectionRemoteAddress,proto3" json:"connection_remote_address,omitempty"`
	ConnectionRemotePort                    uint32          `protobuf:"varint,71,opt,name=connection_remote_port,json=connectionRemotePort,proto3" json:"connection_remote_port,omitempty"`
	NeighborInterfaceHandle                 uint32          `protobuf:"varint,72,opt,name=neighbor_interface_handle,json=neighborInterfaceHandle,proto3" json:"neighbor_interface_handle,omitempty"`
	ResetNotificationSent                   bool            `protobuf:"varint,73,opt,name=reset_notification_sent,json=resetNotificationSent,proto3" json:"reset_notification_sent,omitempty"`
	IsAdministrativelyShutDown              bool            `protobuf:"varint,74,opt,name=is_administratively_shut_down,json=isAdministrativelyShutDown,proto3" json:"is_administratively_shut_down,omitempty"`
	IsNeighborMaxPrefixShutdown             bool            `protobuf:"varint,75,opt,name=is_neighbor_max_prefix_shutdown,json=isNeighborMaxPrefixShutdown,proto3" json:"is_neighbor_max_prefix_shutdown,omitempty"`
	IsOutOfMemoryShutdown                   bool            `protobuf:"varint,76,opt,name=is_out_of_memory_shutdown,json=isOutOfMemoryShutdown,proto3" json:"is_out_of_memory_shutdown,omitempty"`
	IsOutOfMemoryForcedUp                   bool            `protobuf:"varint,77,opt,name=is_out_of_memory_forced_up,json=isOutOfMemoryForcedUp,proto3" json:"is_out_of_memory_forced_up,omitempty"`
	IsEbgpPeerAsLeague                      bool            `protobuf:"varint,78,opt,name=is_ebgp_peer_as_league,json=isEbgpPeerAsLeague,proto3" json:"is_ebgp_peer_as_league,omitempty"`
	IsEbgpPeerCommonAdmin                   bool            `protobuf:"varint,79,opt,name=is_ebgp_peer_common_admin,json=isEbgpPeerCommonAdmin,proto3" json:"is_ebgp_peer_common_admin,omitempty"`
	TtlSecurityEnabled                      bool            `protobuf:"varint,80,opt,name=ttl_security_enabled,json=ttlSecurityEnabled,proto3" json:"ttl_security_enabled,omitempty"`
	Suppress4ByteAs                         bool            `protobuf:"varint,81,opt,name=suppress4_byte_as,json=suppress4ByteAs,proto3" json:"suppress4_byte_as,omitempty"`
	BfdSessionState                         string          `protobuf:"bytes,82,opt,name=bfd_session_state,json=bfdSessionState,proto3" json:"bfd_session_state,omitempty"`
	BfdSessionCreatedState                  string          `protobuf:"bytes,83,opt,name=bfd_session_created_state,json=bfdSessionCreatedState,proto3" json:"bfd_session_created_state,omitempty"`
	BfdSessionEnableMode                    string          `protobuf:"bytes,84,opt,name=bfd_session_enable_mode,json=bfdSessionEnableMode,proto3" json:"bfd_session_enable_mode,omitempty"`
	BfdMinintervalval                       uint32          `protobuf:"varint,85,opt,name=bfd_minintervalval,json=bfdMinintervalval,proto3" json:"bfd_minintervalval,omitempty"`
	BfdMultiplierval                        uint32          `protobuf:"varint,86,opt,name=bfd_multiplierval,json=bfdMultiplierval,proto3" json:"bfd_multiplierval,omitempty"`
	BfdStateTs                              uint64          `protobuf:"varint,87,opt,name=bfd_state_ts,json=bfdStateTs,proto3" json:"bfd_state_ts,omitempty"`
	RouterId                                string          `protobuf:"bytes,88,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	NegotiatedProtocolVersion               uint32          `protobuf:"varint,89,opt,name=negotiated_protocol_version,json=negotiatedProtocolVersion,proto3" json:"negotiated_protocol_version,omitempty"`
	EbgpTimeToLive                          uint32          `protobuf:"varint,90,opt,name=ebgp_time_to_live,json=ebgpTimeToLive,proto3" json:"ebgp_time_to_live,omitempty"`
	IsEbgpMultihopBgpmplsForwardingDisabled bool            `protobuf:"varint,91,opt,name=is_ebgp_multihop_bgpmpls_forwarding_disabled,json=isEbgpMultihopBgpmplsForwardingDisabled,proto3" json:"is_ebgp_multihop_bgpmpls_forwarding_disabled,omitempty"`
	Tcpmss                                  uint32          `protobuf:"varint,92,opt,name=tcpmss,proto3" json:"tcpmss,omitempty"`
	MsgLogIn                                uint32          `protobuf:"varint,93,opt,name=msg_log_in,json=msgLogIn,proto3" json:"msg_log_in,omitempty"`
	MsgLogOut                               uint32          `protobuf:"varint,94,opt,name=msg_log_out,json=msgLogOut,proto3" json:"msg_log_out,omitempty"`
	NeighborLocalAs                         uint32          `protobuf:"varint,95,opt,name=neighbor_local_as,json=neighborLocalAs,proto3" json:"neighbor_local_as,omitempty"`
	LocalAsNoPrepend                        bool            `protobuf:"varint,96,opt,name=local_as_no_prepend,json=localAsNoPrepend,proto3" json:"local_as_no_prepend,omitempty"`
	IsCapabilityNegotiationSuppressed       bool            `protobuf:"varint,97,opt,name=is_capability_negotiation_suppressed,json=isCapabilityNegotiationSuppressed,proto3" json:"is_capability_negotiation_suppressed,omitempty"`
	IsCapabilityNegotiationPerformed        bool            `protobuf:"varint,98,opt,name=is_capability_negotiation_performed,json=isCapabilityNegotiationPerformed,proto3" json:"is_capability_negotiation_performed,omitempty"`
	IsRouteRefreshCapabilityReceived        bool            `protobuf:"varint,99,opt,name=is_route_refresh_capability_received,json=isRouteRefreshCapabilityReceived,proto3" json:"is_route_refresh_capability_received,omitempty"`
	IsRouteRefreshOldCapabilityReceived     bool            `protobuf:"varint,100,opt,name=is_route_refresh_old_capability_received,json=isRouteRefreshOldCapabilityReceived,proto3" json:"is_route_refresh_old_capability_received,omitempty"`
	IsGrAware                               bool            `protobuf:"varint,101,opt,name=is_gr_aware,json=isGrAware,proto3" json:"is_gr_aware,omitempty"`
	Is4ByteAsCapabilityReceived             bool            `protobuf:"varint,102,opt,name=is4_byte_as_capability_received,json=is4ByteAsCapabilityReceived,proto3" json:"is4_byte_as_capability_received,omitempty"`
	Is4ByteAsCapabilitySent                 bool            `protobuf:"varint,103,opt,name=is4_byte_as_capability_sent,json=is4ByteAsCapabilitySent,proto3" json:"is4_byte_as_capability_sent,omitempty"`
	MultiProtocolCapabilityReceived         bool            `protobuf:"varint,104,opt,name=multi_protocol_capability_received,json=multiProtocolCapabilityReceived,proto3" json:"multi_protocol_capability_received,omitempty"`
	HoldTime                                uint32          `protobuf:"varint,105,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	KeepAliveTime                           uint32          `protobuf:"varint,106,opt,name=keep_alive_time,json=keepAliveTime,proto3" json:"keep_alive_time,omitempty"`
	ConfiguredHoldTime                      uint32          `protobuf:"varint,107,opt,name=configured_hold_time,json=configuredHoldTime,proto3" json:"configured_hold_time,omitempty"`
	ConfiguredKeepalive                     uint32          `protobuf:"varint,108,opt,name=configured_keepalive,json=configuredKeepalive,proto3" json:"configured_keepalive,omitempty"`
	ConfiguredMinAccHoldTime                uint32          `protobuf:"varint,109,opt,name=configured_min_acc_hold_time,json=configuredMinAccHoldTime,proto3" json:"configured_min_acc_hold_time,omitempty"`
	MinAdvertiseInterval                    uint32          `protobuf:"varint,110,opt,name=min_advertise_interval,json=minAdvertiseInterval,proto3" json:"min_advertise_interval,omitempty"`
	MinAdvertiseIntervalMsecs               uint32          `protobuf:"varint,111,opt,name=min_advertise_interval_msecs,json=minAdvertiseIntervalMsecs,proto3" json:"min_advertise_interval_msecs,omitempty"`
	MinOriginationInterval                  uint32          `protobuf:"varint,112,opt,name=min_origination_interval,json=minOriginationInterval,proto3" json:"min_origination_interval,omitempty"`
	ConnectRetryInterval                    uint32          `protobuf:"varint,113,opt,name=connect_retry_interval,json=connectRetryInterval,proto3" json:"connect_retry_interval,omitempty"`
	TimeSinceLastUpdate                     uint32          `protobuf:"varint,114,opt,name=time_since_last_update,json=timeSinceLastUpdate,proto3" json:"time_since_last_update,omitempty"`
	TimeSinceLastRead                       uint32          `protobuf:"varint,115,opt,name=time_since_last_read,json=timeSinceLastRead,proto3" json:"time_since_last_read,omitempty"`
	TimeSinceLastReadReset                  uint32          `protobuf:"varint,116,opt,name=time_since_last_read_reset,json=timeSinceLastReadReset,proto3" json:"time_since_last_read_reset,omitempty"`
	TimeLastCb                              uint64          `protobuf:"varint,117,opt,name=time_last_cb,json=timeLastCb,proto3" json:"time_last_cb,omitempty"`
	TimeLastCbReset                         uint32          `protobuf:"varint,118,opt,name=time_last_cb_reset,json=timeLastCbReset,proto3" json:"time_last_cb_reset,omitempty"`
	TimeLastFb                              uint64          `protobuf:"varint,119,opt,name=time_last_fb,json=timeLastFb,proto3" json:"time_last_fb,omitempty"`
	CountLastWrite                          uint32          `protobuf:"varint,120,opt,name=count_last_write,json=countLastWrite,proto3" json:"count_last_write,omitempty"`
	TimeSinceLastWrite                      uint32          `protobuf:"varint,121,opt,name=time_since_last_write,json=timeSinceLastWrite,proto3" json:"time_since_last_write,omitempty"`
	AttemptedLastWriteBytes                 uint32          `protobuf:"varint,122,opt,name=attempted_last_write_bytes,json=attemptedLastWriteBytes,proto3" json:"attempted_last_write_bytes,omitempty"`
	ActualLastWriteBytes                    uint32          `protobuf:"varint,123,opt,name=actual_last_write_bytes,json=actualLastWriteBytes,proto3" json:"actual_last_write_bytes,omitempty"`
	TimeSinceSecondLastWrite                uint32          `protobuf:"varint,124,opt,name=time_since_second_last_write,json=timeSinceSecondLastWrite,proto3" json:"time_since_second_last_write,omitempty"`
	AttemptedSecondLastWriteBytes           uint32          `protobuf:"varint,125,opt,name=attempted_second_last_write_bytes,json=attemptedSecondLastWriteBytes,proto3" json:"attempted_second_last_write_bytes,omitempty"`
	ActualSecondLastWriteBytes              uint32          `protobuf:"varint,126,opt,name=actual_second_last_write_bytes,json=actualSecondLastWriteBytes,proto3" json:"actual_second_last_write_bytes,omitempty"`
	TimeSinceLastWriteReset                 uint32          `protobuf:"varint,127,opt,name=time_since_last_write_reset,json=timeSinceLastWriteReset,proto3" json:"time_since_last_write_reset,omitempty"`
	AttemptedLastWriteResetBytes            uint32          `protobuf:"varint,128,opt,name=attempted_last_write_reset_bytes,json=attemptedLastWriteResetBytes,proto3" json:"attempted_last_write_reset_bytes,omitempty"`
	ActualLastWriteResetBytes               uint32          `protobuf:"varint,129,opt,name=actual_last_write_reset_bytes,json=actualLastWriteResetBytes,proto3" json:"actual_last_write_reset_bytes,omitempty"`
	TimeSinceSecondLastWriteReset           uint32          `protobuf:"varint,130,opt,name=time_since_second_last_write_reset,json=timeSinceSecondLastWriteReset,proto3" json:"time_since_second_last_write_reset,omitempty"`
	AttemptedSecondLastWriteResetBytes      uint32          `protobuf:"varint,131,opt,name=attempted_second_last_write_reset_bytes,json=attemptedSecondLastWriteResetBytes,proto3" json:"attempted_second_last_write_reset_bytes,omitempty"`
	ActualSecondLastWriteResetBytes         uint32          `protobuf:"varint,132,opt,name=actual_second_last_write_reset_bytes,json=actualSecondLastWriteResetBytes,proto3" json:"actual_second_last_write_reset_bytes,omitempty"`
	LastWriteEvent                          uint32          `protobuf:"varint,133,opt,name=last_write_event,json=lastWriteEvent,proto3" json:"last_write_event,omitempty"`
	SecondLastWriteEvent                    uint32          `protobuf:"varint,134,opt,name=second_last_write_event,json=secondLastWriteEvent,proto3" json:"second_last_write_event,omitempty"`
	LastKAexpiryReset                       uint32          `protobuf:"varint,135,opt,name=last_k_aexpiry_reset,json=lastKAexpiryReset,proto3" json:"last_k_aexpiry_reset,omitempty"`
	SecondLastKAexpiryReset                 uint32          `protobuf:"varint,136,opt,name=second_last_k_aexpiry_reset,json=secondLastKAexpiryReset,proto3" json:"second_last_k_aexpiry_reset,omitempty"`
	LastKAnotsentReset                      uint32          `protobuf:"varint,137,opt,name=last_k_anotsent_reset,json=lastKAnotsentReset,proto3" json:"last_k_anotsent_reset,omitempty"`
	LastKAerrorReset                        uint32          `protobuf:"varint,138,opt,name=last_k_aerror_reset,json=lastKAerrorReset,proto3" json:"last_k_aerror_reset,omitempty"`
	LastKAstartReset                        uint32          `protobuf:"varint,139,opt,name=last_k_astart_reset,json=lastKAstartReset,proto3" json:"last_k_astart_reset,omitempty"`
	SecondLastKAstartReset                  uint32          `protobuf:"varint,140,opt,name=second_last_k_astart_reset,json=secondLastKAstartReset,proto3" json:"second_last_k_astart_reset,omitempty"`
	ConnectionUpCount                       uint32          `protobuf:"varint,141,opt,name=connection_up_count,json=connectionUpCount,proto3" json:"connection_up_count,omitempty"`
	ConnectionDownCount                     uint32          `protobuf:"varint,142,opt,name=connection_down_count,json=connectionDownCount,proto3" json:"connection_down_count,omitempty"`
	TimeSinceConnectionLastDropped          uint32          `protobuf:"varint,143,opt,name=time_since_connection_last_dropped,json=timeSinceConnectionLastDropped,proto3" json:"time_since_connection_last_dropped,omitempty"`
	ResetReason                             string          `protobuf:"bytes,144,opt,name=reset_reason,json=resetReason,proto3" json:"reset_reason,omitempty"`
	PeerResetReason                         string          `protobuf:"bytes,145,opt,name=peer_reset_reason,json=peerResetReason,proto3" json:"peer_reset_reason,omitempty"`
	PeerErrorCode                           uint32          `protobuf:"varint,146,opt,name=peer_error_code,json=peerErrorCode,proto3" json:"peer_error_code,omitempty"`
	LastNotifyErrorCode                     uint32          `protobuf:"varint,147,opt,name=last_notify_error_code,json=lastNotifyErrorCode,proto3" json:"last_notify_error_code,omitempty"`
	LastNotifyErrorSubcode                  uint32          `protobuf:"varint,148,opt,name=last_notify_error_subcode,json=lastNotifyErrorSubcode,proto3" json:"last_notify_error_subcode,omitempty"`
	SendNotificationInfo                    *BgpNotfntype_  `protobuf:"bytes,149,opt,name=send_notification_info,json=sendNotificationInfo,proto3" json:"send_notification_info,omitempty"`
	ReceivedNotificationInfo                *BgpNotfntype_  `protobuf:"bytes,150,opt,name=received_notification_info,json=receivedNotificationInfo,proto3" json:"received_notification_info,omitempty"`
	ErrorNotifiesReceived                   uint32          `protobuf:"varint,151,opt,name=error_notifies_received,json=errorNotifiesReceived,proto3" json:"error_notifies_received,omitempty"`
	ErrorNotifiesSent                       uint32          `protobuf:"varint,152,opt,name=error_notifies_sent,json=errorNotifiesSent,proto3" json:"error_notifies_sent,omitempty"`
	RemoteAsNumber                          uint32          `protobuf:"varint,153,opt,name=remote_as_number,json=remoteAsNumber,proto3" json:"remote_as_number,omitempty"`
	DmzLinkBandwidth                        uint32          `protobuf:"varint,154,opt,name=dmz_link_bandwidth,json=dmzLinkBandwidth,proto3" json:"dmz_link_bandwidth,omitempty"`
	EbgpRecvDmz                             bool            `protobuf:"varint,155,opt,name=ebgp_recv_dmz,json=ebgpRecvDmz,proto3" json:"ebgp_recv_dmz,omitempty"`
	EbgpSendDmzMode                         string          `protobuf:"bytes,156,opt,name=ebgp_send_dmz_mode,json=ebgpSendDmzMode,proto3" json:"ebgp_send_dmz_mode,omitempty"`
	TosType                                 uint32          `protobuf:"varint,157,opt,name=tos_type,json=tosType,proto3" json:"tos_type,omitempty"`
	TosValue                                uint32          `protobuf:"varint,158,opt,name=tos_value,json=tosValue,proto3" json:"tos_value,omitempty"`
	PerformanceStatistics                   *BgpPerfNbr_    `protobuf:"bytes,159,opt,name=performance_statistics,json=performanceStatistics,proto3" json:"performance_statistics,omitempty"`
	AfData                                  []*BgpNbrAf_    `protobuf:"bytes,160,rep,name=af_data,json=afData,proto3" json:"af_data,omitempty"`
	TcpSessionOpenMode                      string          `protobuf:"bytes,161,opt,name=tcp_session_open_mode,json=tcpSessionOpenMode,proto3" json:"tcp_session_open_mode,omitempty"`
	VrfName                                 string          `protobuf:"bytes,162,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	StandbyRp                               bool            `protobuf:"varint,163,opt,name=standby_rp,json=standbyRp,proto3" json:"standby_rp,omitempty"`
	NsrEnabled                              bool            `protobuf:"varint,164,opt,name=nsr_enabled,json=nsrEnabled,proto3" json:"nsr_enabled,omitempty"`
	GracefulRestartEnabledNbr               bool            `protobuf:"varint,165,opt,name=graceful_restart_enabled_nbr,json=gracefulRestartEnabledNbr,proto3" json:"graceful_restart_enabled_nbr,omitempty"`
	GrRestartTime                           uint32          `protobuf:"varint,166,opt,name=gr_restart_time,json=grRestartTime,proto3" json:"gr_restart_time,omitempty"`
	GrStalePathTime                         uint32          `protobuf:"varint,167,opt,name=gr_stale_path_time,json=grStalePathTime,proto3" json:"gr_stale_path_time,omitempty"`
	FssnOffset                              uint32          `protobuf:"varint,168,opt,name=fssn_offset,json=fssnOffset,proto3" json:"fssn_offset,omitempty"`
	FpbsnOffset                             uint32          `protobuf:"varint,169,opt,name=fpbsn_offset,json=fpbsnOffset,proto3" json:"fpbsn_offset,omitempty"`
	LastAckdSeqNo                           uint32          `protobuf:"varint,170,opt,name=last_ackd_seq_no,json=lastAckdSeqNo,proto3" json:"last_ackd_seq_no,omitempty"`
	BytesWritten                            uint32          `protobuf:"varint,171,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	BytesRead                               uint32          `protobuf:"varint,172,opt,name=bytes_read,json=bytesRead,proto3" json:"bytes_read,omitempty"`
	SocketReadBytes                         uint32          `protobuf:"varint,173,opt,name=socket_read_bytes,json=socketReadBytes,proto3" json:"socket_read_bytes,omitempty"`
	IsReadDisabled                          bool            `protobuf:"varint,174,opt,name=is_read_disabled,json=isReadDisabled,proto3" json:"is_read_disabled,omitempty"`
	UpdateBytesRead                         uint32          `protobuf:"varint,175,opt,name=update_bytes_read,json=updateBytesRead,proto3" json:"update_bytes_read,omitempty"`
	NsrState                                string          `protobuf:"bytes,176,opt,name=nsr_state,json=nsrState,proto3" json:"nsr_state,omitempty"`
	IsPassiveClose                          bool            `protobuf:"varint,177,opt,name=is_passive_close,json=isPassiveClose,proto3" json:"is_passive_close,omitempty"`
	NbrEnforceFirstAs                       bool            `protobuf:"varint,178,opt,name=nbr_enforce_first_as,json=nbrEnforceFirstAs,proto3" json:"nbr_enforce_first_as,omitempty"`
	ActiveBmpServers                        uint32          `protobuf:"varint,179,opt,name=active_bmp_servers,json=activeBmpServers,proto3" json:"active_bmp_servers,omitempty"`
	NbrClusterId                            uint32          `protobuf:"varint,180,opt,name=nbr_cluster_id,json=nbrClusterId,proto3" json:"nbr_cluster_id,omitempty"`
	NbrInCluster                            uint32          `protobuf:"varint,181,opt,name=nbr_in_cluster,json=nbrInCluster,proto3" json:"nbr_in_cluster,omitempty"`
	IgnoreConnected                         bool            `protobuf:"varint,182,opt,name=ignore_connected,json=ignoreConnected,proto3" json:"ignore_connected,omitempty"`
	InternalVpnClient                       bool            `protobuf:"varint,183,opt,name=internal_vpn_client,json=internalVpnClient,proto3" json:"internal_vpn_client,omitempty"`
	IoArmed                                 bool            `protobuf:"varint,184,opt,name=io_armed,json=ioArmed,proto3" json:"io_armed,omitempty"`
	ReadArmed                               bool            `protobuf:"varint,185,opt,name=read_armed,json=readArmed,proto3" json:"read_armed,omitempty"`
	WriteArmed                              bool            `protobuf:"varint,186,opt,name=write_armed,json=writeArmed,proto3" json:"write_armed,omitempty"`
	MessageStatistics                       *BgpNbrMsgStats `protobuf:"bytes,187,opt,name=message_statistics,json=messageStatistics,proto3" json:"message_statistics,omitempty"`
	DiscardDataBytes                        uint32          `protobuf:"varint,188,opt,name=discard_data_bytes,json=discardDataBytes,proto3" json:"discard_data_bytes,omitempty"`
	LocalAsReplaceAs                        bool            `protobuf:"varint,189,opt,name=local_as_replace_as,json=localAsReplaceAs,proto3" json:"local_as_replace_as,omitempty"`
	LocalAsDualAs                           bool            `protobuf:"varint,190,opt,name=local_as_dual_as,json=localAsDualAs,proto3" json:"local_as_dual_as,omitempty"`
	LocalAsDualAsModeNative                 bool            `protobuf:"varint,191,opt,name=local_as_dual_as_mode_native,json=localAsDualAsModeNative,proto3" json:"local_as_dual_as_mode_native,omitempty"`
	EgressPeerEngineeringEnabled            bool            `protobuf:"varint,192,opt,name=egress_peer_engineering_enabled,json=egressPeerEngineeringEnabled,proto3" json:"egress_peer_engineering_enabled,omitempty"`
	TcpInitSyncTimeSpec                     *BgpTimespec    `protobuf:"bytes,193,opt,name=tcp_init_sync_time_spec,json=tcpInitSyncTimeSpec,proto3" json:"tcp_init_sync_time_spec,omitempty"`
	TcpInitSyncPhaseTwoTimeSpec             *BgpTimespec    `protobuf:"bytes,194,opt,name=tcp_init_sync_phase_two_time_spec,json=tcpInitSyncPhaseTwoTimeSpec,proto3" json:"tcp_init_sync_phase_two_time_spec,omitempty"`
	TcpInitSyncDoneTimeSpec                 *BgpTimespec    `protobuf:"bytes,195,opt,name=tcp_init_sync_done_time_spec,json=tcpInitSyncDoneTimeSpec,proto3" json:"tcp_init_sync_done_time_spec,omitempty"`
	DiscardAs4Path                          uint32          `protobuf:"varint,196,opt,name=discard_as4_path,json=discardAs4Path,proto3" json:"discard_as4_path,omitempty"`
	RpkiDisable                             bool            `protobuf:"varint,197,opt,name=rpki_disable,json=rpkiDisable,proto3" json:"rpki_disable,omitempty"`
	RpkiUseValidity                         bool            `protobuf:"varint,198,opt,name=rpki_use_validity,json=rpkiUseValidity,proto3" json:"rpki_use_validity,omitempty"`
	RpkiAllowInvalid                        bool            `protobuf:"varint,199,opt,name=rpki_allow_invalid,json=rpkiAllowInvalid,proto3" json:"rpki_allow_invalid,omitempty"`
	RpkiSignalIbgp                          bool            `protobuf:"varint,200,opt,name=rpki_signal_ibgp,json=rpkiSignalIbgp,proto3" json:"rpki_signal_ibgp,omitempty"`
	GracefulMaintenance                     *BgpNbrGshut_   `protobuf:"bytes,201,opt,name=graceful_maintenance,json=gracefulMaintenance,proto3" json:"graceful_maintenance,omitempty"`
	DynamicNeighbor                         bool            `protobuf:"varint,202,opt,name=dynamic_neighbor,json=dynamicNeighbor,proto3" json:"dynamic_neighbor,omitempty"`
	MergeInboundSafi1And4Updates            bool            `protobuf:"varint,203,opt,name=merge_inbound_safi1and4_updates,json=mergeInboundSafi1and4Updates,proto3" json:"merge_inbound_safi1and4_updates,omitempty"`
	IsCapabilityEnheSuppressed              bool            `protobuf:"varint,204,opt,name=is_capability_enhe_suppressed,json=isCapabilityEnheSuppressed,proto3" json:"is_capability_enhe_suppressed,omitempty"`
	DeleteTimeRemaining                     uint32          `protobuf:"varint,205,opt,name=delete_time_remaining,json=deleteTimeRemaining,proto3" json:"delete_time_remaining,omitempty"`
}

func (x *BgpNbrBag) Reset() {
	*x = BgpNbrBag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNbrBag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNbrBag) ProtoMessage() {}

func (x *BgpNbrBag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bgp_bgp_nbr_bag_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNbrBag.ProtoReflect.Descriptor instead.
func (*BgpNbrBag) Descriptor() ([]byte, []int) {
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP(), []int{16}
}

func (x *BgpNbrBag) GetSpeakerId() uint32 {
	if x != nil {
		return x.SpeakerId
	}
	return 0
}

func (x *BgpNbrBag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNbrBag) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpNbrBag) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNbrBag) GetHasInternalLink() bool {
	if x != nil {
		return x.HasInternalLink
	}
	return false
}

func (x *BgpNbrBag) GetIsExternalNeighborNotDirectlyConnected() bool {
	if x != nil {
		return x.IsExternalNeighborNotDirectlyConnected
	}
	return false
}

func (x *BgpNbrBag) GetMessagesReceived() uint32 {
	if x != nil {
		return x.MessagesReceived
	}
	return 0
}

func (x *BgpNbrBag) GetMessagesSent() uint32 {
	if x != nil {
		return x.MessagesSent
	}
	return 0
}

func (x *BgpNbrBag) GetUpdateMessagesIn() uint32 {
	if x != nil {
		return x.UpdateMessagesIn
	}
	return 0
}

func (x *BgpNbrBag) GetUpdateMessagesOut() uint32 {
	if x != nil {
		return x.UpdateMessagesOut
	}
	return 0
}

func (x *BgpNbrBag) GetMessagesQueuedIn() uint32 {
	if x != nil {
		return x.MessagesQueuedIn
	}
	return 0
}

func (x *BgpNbrBag) GetMessagesQueuedOut() uint32 {
	if x != nil {
		return x.MessagesQueuedOut
	}
	return 0
}

func (x *BgpNbrBag) GetConnectionEstablishedTime() uint32 {
	if x != nil {
		return x.ConnectionEstablishedTime
	}
	return 0
}

func (x *BgpNbrBag) GetConnectionState() string {
	if x != nil {
		return x.ConnectionState
	}
	return ""
}

func (x *BgpNbrBag) GetPreviousConnectionState() uint32 {
	if x != nil {
		return x.PreviousConnectionState
	}
	return 0
}

func (x *BgpNbrBag) GetConnectionAdminStatus() uint32 {
	if x != nil {
		return x.ConnectionAdminStatus
	}
	return 0
}

func (x *BgpNbrBag) GetOpenCheckErrorCode() string {
	if x != nil {
		return x.OpenCheckErrorCode
	}
	return ""
}

func (x *BgpNbrBag) GetConnectionLocalAddress() *BgpAddrtype {
	if x != nil {
		return x.ConnectionLocalAddress
	}
	return nil
}

func (x *BgpNbrBag) GetIsLocalAddressConfigured() bool {
	if x != nil {
		return x.IsLocalAddressConfigured
	}
	return false
}

func (x *BgpNbrBag) GetConnectionLocalPort() uint32 {
	if x != nil {
		return x.ConnectionLocalPort
	}
	return 0
}

func (x *BgpNbrBag) GetConnectionRemoteAddress() *BgpAddrtype {
	if x != nil {
		return x.ConnectionRemoteAddress
	}
	return nil
}

func (x *BgpNbrBag) GetConnectionRemotePort() uint32 {
	if x != nil {
		return x.ConnectionRemotePort
	}
	return 0
}

func (x *BgpNbrBag) GetNeighborInterfaceHandle() uint32 {
	if x != nil {
		return x.NeighborInterfaceHandle
	}
	return 0
}

func (x *BgpNbrBag) GetResetNotificationSent() bool {
	if x != nil {
		return x.ResetNotificationSent
	}
	return false
}

func (x *BgpNbrBag) GetIsAdministrativelyShutDown() bool {
	if x != nil {
		return x.IsAdministrativelyShutDown
	}
	return false
}

func (x *BgpNbrBag) GetIsNeighborMaxPrefixShutdown() bool {
	if x != nil {
		return x.IsNeighborMaxPrefixShutdown
	}
	return false
}

func (x *BgpNbrBag) GetIsOutOfMemoryShutdown() bool {
	if x != nil {
		return x.IsOutOfMemoryShutdown
	}
	return false
}

func (x *BgpNbrBag) GetIsOutOfMemoryForcedUp() bool {
	if x != nil {
		return x.IsOutOfMemoryForcedUp
	}
	return false
}

func (x *BgpNbrBag) GetIsEbgpPeerAsLeague() bool {
	if x != nil {
		return x.IsEbgpPeerAsLeague
	}
	return false
}

func (x *BgpNbrBag) GetIsEbgpPeerCommonAdmin() bool {
	if x != nil {
		return x.IsEbgpPeerCommonAdmin
	}
	return false
}

func (x *BgpNbrBag) GetTtlSecurityEnabled() bool {
	if x != nil {
		return x.TtlSecurityEnabled
	}
	return false
}

func (x *BgpNbrBag) GetSuppress4ByteAs() bool {
	if x != nil {
		return x.Suppress4ByteAs
	}
	return false
}

func (x *BgpNbrBag) GetBfdSessionState() string {
	if x != nil {
		return x.BfdSessionState
	}
	return ""
}

func (x *BgpNbrBag) GetBfdSessionCreatedState() string {
	if x != nil {
		return x.BfdSessionCreatedState
	}
	return ""
}

func (x *BgpNbrBag) GetBfdSessionEnableMode() string {
	if x != nil {
		return x.BfdSessionEnableMode
	}
	return ""
}

func (x *BgpNbrBag) GetBfdMinintervalval() uint32 {
	if x != nil {
		return x.BfdMinintervalval
	}
	return 0
}

func (x *BgpNbrBag) GetBfdMultiplierval() uint32 {
	if x != nil {
		return x.BfdMultiplierval
	}
	return 0
}

func (x *BgpNbrBag) GetBfdStateTs() uint64 {
	if x != nil {
		return x.BfdStateTs
	}
	return 0
}

func (x *BgpNbrBag) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpNbrBag) GetNegotiatedProtocolVersion() uint32 {
	if x != nil {
		return x.NegotiatedProtocolVersion
	}
	return 0
}

func (x *BgpNbrBag) GetEbgpTimeToLive() uint32 {
	if x != nil {
		return x.EbgpTimeToLive
	}
	return 0
}

func (x *BgpNbrBag) GetIsEbgpMultihopBgpmplsForwardingDisabled() bool {
	if x != nil {
		return x.IsEbgpMultihopBgpmplsForwardingDisabled
	}
	return false
}

func (x *BgpNbrBag) GetTcpmss() uint32 {
	if x != nil {
		return x.Tcpmss
	}
	return 0
}

func (x *BgpNbrBag) GetMsgLogIn() uint32 {
	if x != nil {
		return x.MsgLogIn
	}
	return 0
}

func (x *BgpNbrBag) GetMsgLogOut() uint32 {
	if x != nil {
		return x.MsgLogOut
	}
	return 0
}

func (x *BgpNbrBag) GetNeighborLocalAs() uint32 {
	if x != nil {
		return x.NeighborLocalAs
	}
	return 0
}

func (x *BgpNbrBag) GetLocalAsNoPrepend() bool {
	if x != nil {
		return x.LocalAsNoPrepend
	}
	return false
}

func (x *BgpNbrBag) GetIsCapabilityNegotiationSuppressed() bool {
	if x != nil {
		return x.IsCapabilityNegotiationSuppressed
	}
	return false
}

func (x *BgpNbrBag) GetIsCapabilityNegotiationPerformed() bool {
	if x != nil {
		return x.IsCapabilityNegotiationPerformed
	}
	return false
}

func (x *BgpNbrBag) GetIsRouteRefreshCapabilityReceived() bool {
	if x != nil {
		return x.IsRouteRefreshCapabilityReceived
	}
	return false
}

func (x *BgpNbrBag) GetIsRouteRefreshOldCapabilityReceived() bool {
	if x != nil {
		return x.IsRouteRefreshOldCapabilityReceived
	}
	return false
}

func (x *BgpNbrBag) GetIsGrAware() bool {
	if x != nil {
		return x.IsGrAware
	}
	return false
}

func (x *BgpNbrBag) GetIs4ByteAsCapabilityReceived() bool {
	if x != nil {
		return x.Is4ByteAsCapabilityReceived
	}
	return false
}

func (x *BgpNbrBag) GetIs4ByteAsCapabilitySent() bool {
	if x != nil {
		return x.Is4ByteAsCapabilitySent
	}
	return false
}

func (x *BgpNbrBag) GetMultiProtocolCapabilityReceived() bool {
	if x != nil {
		return x.MultiProtocolCapabilityReceived
	}
	return false
}

func (x *BgpNbrBag) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *BgpNbrBag) GetKeepAliveTime() uint32 {
	if x != nil {
		return x.KeepAliveTime
	}
	return 0
}

func (x *BgpNbrBag) GetConfiguredHoldTime() uint32 {
	if x != nil {
		return x.ConfiguredHoldTime
	}
	return 0
}

func (x *BgpNbrBag) GetConfiguredKeepalive() uint32 {
	if x != nil {
		return x.ConfiguredKeepalive
	}
	return 0
}

func (x *BgpNbrBag) GetConfiguredMinAccHoldTime() uint32 {
	if x != nil {
		return x.ConfiguredMinAccHoldTime
	}
	return 0
}

func (x *BgpNbrBag) GetMinAdvertiseInterval() uint32 {
	if x != nil {
		return x.MinAdvertiseInterval
	}
	return 0
}

func (x *BgpNbrBag) GetMinAdvertiseIntervalMsecs() uint32 {
	if x != nil {
		return x.MinAdvertiseIntervalMsecs
	}
	return 0
}

func (x *BgpNbrBag) GetMinOriginationInterval() uint32 {
	if x != nil {
		return x.MinOriginationInterval
	}
	return 0
}

func (x *BgpNbrBag) GetConnectRetryInterval() uint32 {
	if x != nil {
		return x.ConnectRetryInterval
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceLastUpdate() uint32 {
	if x != nil {
		return x.TimeSinceLastUpdate
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceLastRead() uint32 {
	if x != nil {
		return x.TimeSinceLastRead
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceLastReadReset() uint32 {
	if x != nil {
		return x.TimeSinceLastReadReset
	}
	return 0
}

func (x *BgpNbrBag) GetTimeLastCb() uint64 {
	if x != nil {
		return x.TimeLastCb
	}
	return 0
}

func (x *BgpNbrBag) GetTimeLastCbReset() uint32 {
	if x != nil {
		return x.TimeLastCbReset
	}
	return 0
}

func (x *BgpNbrBag) GetTimeLastFb() uint64 {
	if x != nil {
		return x.TimeLastFb
	}
	return 0
}

func (x *BgpNbrBag) GetCountLastWrite() uint32 {
	if x != nil {
		return x.CountLastWrite
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceLastWrite() uint32 {
	if x != nil {
		return x.TimeSinceLastWrite
	}
	return 0
}

func (x *BgpNbrBag) GetAttemptedLastWriteBytes() uint32 {
	if x != nil {
		return x.AttemptedLastWriteBytes
	}
	return 0
}

func (x *BgpNbrBag) GetActualLastWriteBytes() uint32 {
	if x != nil {
		return x.ActualLastWriteBytes
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceSecondLastWrite() uint32 {
	if x != nil {
		return x.TimeSinceSecondLastWrite
	}
	return 0
}

func (x *BgpNbrBag) GetAttemptedSecondLastWriteBytes() uint32 {
	if x != nil {
		return x.AttemptedSecondLastWriteBytes
	}
	return 0
}

func (x *BgpNbrBag) GetActualSecondLastWriteBytes() uint32 {
	if x != nil {
		return x.ActualSecondLastWriteBytes
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceLastWriteReset() uint32 {
	if x != nil {
		return x.TimeSinceLastWriteReset
	}
	return 0
}

func (x *BgpNbrBag) GetAttemptedLastWriteResetBytes() uint32 {
	if x != nil {
		return x.AttemptedLastWriteResetBytes
	}
	return 0
}

func (x *BgpNbrBag) GetActualLastWriteResetBytes() uint32 {
	if x != nil {
		return x.ActualLastWriteResetBytes
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceSecondLastWriteReset() uint32 {
	if x != nil {
		return x.TimeSinceSecondLastWriteReset
	}
	return 0
}

func (x *BgpNbrBag) GetAttemptedSecondLastWriteResetBytes() uint32 {
	if x != nil {
		return x.AttemptedSecondLastWriteResetBytes
	}
	return 0
}

func (x *BgpNbrBag) GetActualSecondLastWriteResetBytes() uint32 {
	if x != nil {
		return x.ActualSecondLastWriteResetBytes
	}
	return 0
}

func (x *BgpNbrBag) GetLastWriteEvent() uint32 {
	if x != nil {
		return x.LastWriteEvent
	}
	return 0
}

func (x *BgpNbrBag) GetSecondLastWriteEvent() uint32 {
	if x != nil {
		return x.SecondLastWriteEvent
	}
	return 0
}

func (x *BgpNbrBag) GetLastKAexpiryReset() uint32 {
	if x != nil {
		return x.LastKAexpiryReset
	}
	return 0
}

func (x *BgpNbrBag) GetSecondLastKAexpiryReset() uint32 {
	if x != nil {
		return x.SecondLastKAexpiryReset
	}
	return 0
}

func (x *BgpNbrBag) GetLastKAnotsentReset() uint32 {
	if x != nil {
		return x.LastKAnotsentReset
	}
	return 0
}

func (x *BgpNbrBag) GetLastKAerrorReset() uint32 {
	if x != nil {
		return x.LastKAerrorReset
	}
	return 0
}

func (x *BgpNbrBag) GetLastKAstartReset() uint32 {
	if x != nil {
		return x.LastKAstartReset
	}
	return 0
}

func (x *BgpNbrBag) GetSecondLastKAstartReset() uint32 {
	if x != nil {
		return x.SecondLastKAstartReset
	}
	return 0
}

func (x *BgpNbrBag) GetConnectionUpCount() uint32 {
	if x != nil {
		return x.ConnectionUpCount
	}
	return 0
}

func (x *BgpNbrBag) GetConnectionDownCount() uint32 {
	if x != nil {
		return x.ConnectionDownCount
	}
	return 0
}

func (x *BgpNbrBag) GetTimeSinceConnectionLastDropped() uint32 {
	if x != nil {
		return x.TimeSinceConnectionLastDropped
	}
	return 0
}

func (x *BgpNbrBag) GetResetReason() string {
	if x != nil {
		return x.ResetReason
	}
	return ""
}

func (x *BgpNbrBag) GetPeerResetReason() string {
	if x != nil {
		return x.PeerResetReason
	}
	return ""
}

func (x *BgpNbrBag) GetPeerErrorCode() uint32 {
	if x != nil {
		return x.PeerErrorCode
	}
	return 0
}

func (x *BgpNbrBag) GetLastNotifyErrorCode() uint32 {
	if x != nil {
		return x.LastNotifyErrorCode
	}
	return 0
}

func (x *BgpNbrBag) GetLastNotifyErrorSubcode() uint32 {
	if x != nil {
		return x.LastNotifyErrorSubcode
	}
	return 0
}

func (x *BgpNbrBag) GetSendNotificationInfo() *BgpNotfntype_ {
	if x != nil {
		return x.SendNotificationInfo
	}
	return nil
}

func (x *BgpNbrBag) GetReceivedNotificationInfo() *BgpNotfntype_ {
	if x != nil {
		return x.ReceivedNotificationInfo
	}
	return nil
}

func (x *BgpNbrBag) GetErrorNotifiesReceived() uint32 {
	if x != nil {
		return x.ErrorNotifiesReceived
	}
	return 0
}

func (x *BgpNbrBag) GetErrorNotifiesSent() uint32 {
	if x != nil {
		return x.ErrorNotifiesSent
	}
	return 0
}

func (x *BgpNbrBag) GetRemoteAsNumber() uint32 {
	if x != nil {
		return x.RemoteAsNumber
	}
	return 0
}

func (x *BgpNbrBag) GetDmzLinkBandwidth() uint32 {
	if x != nil {
		return x.DmzLinkBandwidth
	}
	return 0
}

func (x *BgpNbrBag) GetEbgpRecvDmz() bool {
	if x != nil {
		return x.EbgpRecvDmz
	}
	return false
}

func (x *BgpNbrBag) GetEbgpSendDmzMode() string {
	if x != nil {
		return x.EbgpSendDmzMode
	}
	return ""
}

func (x *BgpNbrBag) GetTosType() uint32 {
	if x != nil {
		return x.TosType
	}
	return 0
}

func (x *BgpNbrBag) GetTosValue() uint32 {
	if x != nil {
		return x.TosValue
	}
	return 0
}

func (x *BgpNbrBag) GetPerformanceStatistics() *BgpPerfNbr_ {
	if x != nil {
		return x.PerformanceStatistics
	}
	return nil
}

func (x *BgpNbrBag) GetAfData() []*BgpNbrAf_ {
	if x != nil {
		return x.AfData
	}
	return nil
}

func (x *BgpNbrBag) GetTcpSessionOpenMode() string {
	if x != nil {
		return x.TcpSessionOpenMode
	}
	return ""
}

func (x *BgpNbrBag) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *BgpNbrBag) GetStandbyRp() bool {
	if x != nil {
		return x.StandbyRp
	}
	return false
}

func (x *BgpNbrBag) GetNsrEnabled() bool {
	if x != nil {
		return x.NsrEnabled
	}
	return false
}

func (x *BgpNbrBag) GetGracefulRestartEnabledNbr() bool {
	if x != nil {
		return x.GracefulRestartEnabledNbr
	}
	return false
}

func (x *BgpNbrBag) GetGrRestartTime() uint32 {
	if x != nil {
		return x.GrRestartTime
	}
	return 0
}

func (x *BgpNbrBag) GetGrStalePathTime() uint32 {
	if x != nil {
		return x.GrStalePathTime
	}
	return 0
}

func (x *BgpNbrBag) GetFssnOffset() uint32 {
	if x != nil {
		return x.FssnOffset
	}
	return 0
}

func (x *BgpNbrBag) GetFpbsnOffset() uint32 {
	if x != nil {
		return x.FpbsnOffset
	}
	return 0
}

func (x *BgpNbrBag) GetLastAckdSeqNo() uint32 {
	if x != nil {
		return x.LastAckdSeqNo
	}
	return 0
}

func (x *BgpNbrBag) GetBytesWritten() uint32 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *BgpNbrBag) GetBytesRead() uint32 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

func (x *BgpNbrBag) GetSocketReadBytes() uint32 {
	if x != nil {
		return x.SocketReadBytes
	}
	return 0
}

func (x *BgpNbrBag) GetIsReadDisabled() bool {
	if x != nil {
		return x.IsReadDisabled
	}
	return false
}

func (x *BgpNbrBag) GetUpdateBytesRead() uint32 {
	if x != nil {
		return x.UpdateBytesRead
	}
	return 0
}

func (x *BgpNbrBag) GetNsrState() string {
	if x != nil {
		return x.NsrState
	}
	return ""
}

func (x *BgpNbrBag) GetIsPassiveClose() bool {
	if x != nil {
		return x.IsPassiveClose
	}
	return false
}

func (x *BgpNbrBag) GetNbrEnforceFirstAs() bool {
	if x != nil {
		return x.NbrEnforceFirstAs
	}
	return false
}

func (x *BgpNbrBag) GetActiveBmpServers() uint32 {
	if x != nil {
		return x.ActiveBmpServers
	}
	return 0
}

func (x *BgpNbrBag) GetNbrClusterId() uint32 {
	if x != nil {
		return x.NbrClusterId
	}
	return 0
}

func (x *BgpNbrBag) GetNbrInCluster() uint32 {
	if x != nil {
		return x.NbrInCluster
	}
	return 0
}

func (x *BgpNbrBag) GetIgnoreConnected() bool {
	if x != nil {
		return x.IgnoreConnected
	}
	return false
}

func (x *BgpNbrBag) GetInternalVpnClient() bool {
	if x != nil {
		return x.InternalVpnClient
	}
	return false
}

func (x *BgpNbrBag) GetIoArmed() bool {
	if x != nil {
		return x.IoArmed
	}
	return false
}

func (x *BgpNbrBag) GetReadArmed() bool {
	if x != nil {
		return x.ReadArmed
	}
	return false
}

func (x *BgpNbrBag) GetWriteArmed() bool {
	if x != nil {
		return x.WriteArmed
	}
	return false
}

func (x *BgpNbrBag) GetMessageStatistics() *BgpNbrMsgStats {
	if x != nil {
		return x.MessageStatistics
	}
	return nil
}

func (x *BgpNbrBag) GetDiscardDataBytes() uint32 {
	if x != nil {
		return x.DiscardDataBytes
	}
	return 0
}

func (x *BgpNbrBag) GetLocalAsReplaceAs() bool {
	if x != nil {
		return x.LocalAsReplaceAs
	}
	return false
}

func (x *BgpNbrBag) GetLocalAsDualAs() bool {
	if x != nil {
		return x.LocalAsDualAs
	}
	return false
}

func (x *BgpNbrBag) GetLocalAsDualAsModeNative() bool {
	if x != nil {
		return x.LocalAsDualAsModeNative
	}
	return false
}

func (x *BgpNbrBag) GetEgressPeerEngineeringEnabled() bool {
	if x != nil {
		return x.EgressPeerEngineeringEnabled
	}
	return false
}

func (x *BgpNbrBag) GetTcpInitSyncTimeSpec() *BgpTimespec {
	if x != nil {
		return x.TcpInitSyncTimeSpec
	}
	return nil
}

func (x *BgpNbrBag) GetTcpInitSyncPhaseTwoTimeSpec() *BgpTimespec {
	if x != nil {
		return x.TcpInitSyncPhaseTwoTimeSpec
	}
	return nil
}

func (x *BgpNbrBag) GetTcpInitSyncDoneTimeSpec() *BgpTimespec {
	if x != nil {
		return x.TcpInitSyncDoneTimeSpec
	}
	return nil
}

func (x *BgpNbrBag) GetDiscardAs4Path() uint32 {
	if x != nil {
		return x.DiscardAs4Path
	}
	return 0
}

func (x *BgpNbrBag) GetRpkiDisable() bool {
	if x != nil {
		return x.RpkiDisable
	}
	return false
}

func (x *BgpNbrBag) GetRpkiUseValidity() bool {
	if x != nil {
		return x.RpkiUseValidity
	}
	return false
}

func (x *BgpNbrBag) GetRpkiAllowInvalid() bool {
	if x != nil {
		return x.RpkiAllowInvalid
	}
	return false
}

func (x *BgpNbrBag) GetRpkiSignalIbgp() bool {
	if x != nil {
		return x.RpkiSignalIbgp
	}
	return false
}

func (x *BgpNbrBag) GetGracefulMaintenance() *BgpNbrGshut_ {
	if x != nil {
		return x.GracefulMaintenance
	}
	return nil
}

func (x *BgpNbrBag) GetDynamicNeighbor() bool {
	if x != nil {
		return x.DynamicNeighbor
	}
	return false
}

func (x *BgpNbrBag) GetMergeInboundSafi1And4Updates() bool {
	if x != nil {
		return x.MergeInboundSafi1And4Updates
	}
	return false
}

func (x *BgpNbrBag) GetIsCapabilityEnheSuppressed() bool {
	if x != nil {
		return x.IsCapabilityEnheSuppressed
	}
	return false
}

func (x *BgpNbrBag) GetDeleteTimeRemaining() uint32 {
	if x != nil {
		return x.DeleteTimeRemaining
	}
	return 0
}

var File_proto_bgp_bgp_nbr_bag_proto protoreflect.FileDescriptor

var file_proto_bgp_bgp_nbr_bag_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x5f,
	0x6e, 0x62, 0x72, 0x5f, 0x62, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73,
	0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0x7b,
	0x0a, 0x10, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x62, 0x61, 0x67, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x37, 0x0a, 0x10, 0x62,
	0x67, 0x70, 0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x45, 0x0a, 0x15, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x32, 0x76, 0x70,
	0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x32, 0x76, 0x70, 0x6e,
	0x45, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x15, 0x62,
	0x67, 0x70, 0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x73, 0x70, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x62, 0x67, 0x70,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x53, 0x72, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x18, 0x62, 0x67, 0x70,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x72, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x72,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x53, 0x72, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdf, 0x0e, 0x0a, 0x0c, 0x62, 0x67,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x66,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x66, 0x69, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76,
	0x34, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x70, 0x76, 0x34, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x70, 0x76, 0x34, 0x6d, 0x64, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x6d, 0x64, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x76, 0x70, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x70, 0x76, 0x34, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x69, 0x70, 0x76, 0x34, 0x76, 0x70, 0x6e, 0x61, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76,
	0x34, 0x76, 0x70, 0x6e, 0x61, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x5f, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x50, 0x76, 0x36, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x76,
	0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x70, 0x76,
	0x36, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x76, 0x70,
	0x6e, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xaf, 0x01,
	0x0a, 0x11, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x76, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61,
	0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x6c,
	0x32, 0x76, 0x70, 0x6e, 0x76, 0x70, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x70, 0x76, 0x36, 0x6d, 0x76, 0x70, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x70, 0x76, 0x36, 0x6d, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x70, 0x76, 0x34, 0x6d, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x6d, 0x76,
	0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x32,
	0x76, 0x70, 0x6e, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x52,
	0x10, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x73, 0x5f, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x73, 0x4c, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x12, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f,
	0x6d, 0x73, 0x70, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x86, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x32, 0x76, 0x70, 0x6e, 0x5f,
	0x6d, 0x73, 0x70, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x6c, 0x32, 0x76,
	0x70, 0x6e, 0x4d, 0x73, 0x70, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x70,
	0x76, 0x34, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x34, 0x76, 0x70, 0x6e,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x76, 0x70, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x69, 0x70, 0x76, 0x36, 0x76, 0x70, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x69, 0x70, 0x76, 0x36, 0x76, 0x70, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x70,
	0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x69, 0x70,
	0x76, 0x34, 0x73, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61,
	0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x73, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x69,
	0x70, 0x76, 0x36, 0x73, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x89, 0x01, 0x2e, 0x63, 0x69,
	0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e,
	0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67,
	0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x72, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x74, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x73, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x0e,
	0x62, 0x67, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x66, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x12, 0x3f,
	0x0a, 0x1c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75,
	0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75,
	0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x0d, 0x0a, 0x0d,
	0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x68, 0x69, 0x67, 0x68, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6f, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x69, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x3b, 0x0a, 0x1a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x1d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x62, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x62, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x62, 0x72, 0x5f, 0x66, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x6e, 0x62,
	0x72, 0x46, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x79,
	0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x73, 0x72, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x73, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x73, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x73, 0x72, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x22, 0xbc, 0x03, 0x0a, 0x10, 0x62, 0x67, 0x70, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x12, 0x44, 0x0a, 0x1f,
	0x73, 0x75, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xd0, 0x47, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x6e,
	0x62, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x22, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x5f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x65,
	0x52, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x61, 0x66, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x66,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x69, 0x73, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73, 0x53, 0x6f, 0x66, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x25, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x73,
	0x55, 0x73, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x12, 0x42,
	0x0a, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x2c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x61,
	0x73, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x41,
	0x73, 0x70, 0x61, 0x74, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x26, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x21, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x34, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f,
	0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x41, 0x73, 0x70, 0x61, 0x74, 0x68, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x5f, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x49, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x50, 0x0a, 0x25, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x5f, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x21, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x65, 0x63, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x49, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x4f, 0x72, 0x72,
	0x52, 0x6f, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x66, 0x69, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f, 0x72, 0x65, 0x6f, 0x72,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x41, 0x66, 0x69, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x41, 0x66, 0x69, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x52, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x76,
	0x72, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41,
	0x66, 0x69, 0x44, 0x65, 0x66, 0x56, 0x72, 0x66, 0x49, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x28, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f,
	0x65, 0x76, 0x70, 0x5f, 0x6e, 0x76, 0x34, 0x61, 0x66, 0x69, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x76,
	0x72, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x45,
	0x76, 0x70, 0x4e, 0x76, 0x34, 0x61, 0x66, 0x69, 0x44, 0x65, 0x66, 0x56, 0x72, 0x66, 0x49, 0x6d,
	0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x28, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x70, 0x5f, 0x6e, 0x76, 0x36, 0x61, 0x66, 0x69,
	0x5f, 0x64, 0x65, 0x66, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x45, 0x76, 0x70, 0x4e, 0x76, 0x36, 0x61, 0x66, 0x69, 0x44, 0x65,
	0x66, 0x56, 0x72, 0x66, 0x49, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45,
	0x0a, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f,
	0x76, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x41, 0x66, 0x69, 0x56, 0x72, 0x66, 0x52, 0x65, 0x49, 0x6d, 0x70, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x27, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x5f, 0x65, 0x76, 0x70, 0x5f, 0x6e, 0x76, 0x34, 0x61, 0x66, 0x69, 0x5f, 0x76, 0x72,
	0x66, 0x5f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x45, 0x76, 0x70, 0x4e, 0x76, 0x34, 0x61, 0x66, 0x69, 0x56, 0x72, 0x66, 0x52, 0x65, 0x49,
	0x6d, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x27, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x70, 0x5f, 0x6e, 0x76, 0x36, 0x61, 0x66,
	0x69, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x45, 0x76, 0x70, 0x4e, 0x76, 0x36, 0x61, 0x66, 0x69, 0x56, 0x72,
	0x66, 0x52, 0x65, 0x49, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x18, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f, 0x65,
	0x6f, 0x5f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x41, 0x66, 0x69, 0x45, 0x6f, 0x52,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x55, 0x73, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x54, 0x6f, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x20,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x74, 0x47, 0x73, 0x68, 0x75,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x73, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x56, 0x70, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x72, 0x66, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x4f, 0x72, 0x66, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x70,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x70, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x1e, 0x76, 0x70, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65,
	0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x76, 0x70, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x41, 0x64, 0x64, 0x70,
	0x61, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x41, 0x64,
	0x64, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x4d, 0x61,
	0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x1c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x4f, 0x72, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x42, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f,
	0x62, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x42, 0x65, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x65, 0x65, 0x72, 0x4f, 0x72,
	0x66, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x72, 0x66, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3e, 0x0a,
	0x1c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x66,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f,
	0x72, 0x66, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x69, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x72,
	0x66, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x72, 0x66,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x43,
	0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x47,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x24, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x26, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x41, 0x64, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x24, 0x69, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x73, 0x41, 0x64, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x29, 0x69, 0x73, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x69, 0x73,
	0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x12, 0x53, 0x0a, 0x27, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x22, 0x69, 0x73, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x26, 0x69, 0x73, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x6e, 0x68, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x45, 0x78, 0x74, 0x4e, 0x68,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x22, 0x69, 0x73,
	0x5f, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x68, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x73, 0x45, 0x78, 0x74, 0x4e, 0x68, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x69, 0x62, 0x5f, 0x70, 0x75, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x69, 0x62, 0x50, 0x75, 0x72, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x31, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x5a, 0x0a, 0x2b, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76,
	0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x5e,
	0x0a, 0x2d, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x27, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x63,
	0x0a, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76,
	0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x29, 0x6c, 0x6f,
	0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x29, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x2c, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x27, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x4c, 0x69,
	0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x33, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x4c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6f, 0x72, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x72, 0x66,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x66, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x72, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f, 0x72, 0x66, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x72, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x43, 0x0a,
	0x1e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x22, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45,
	0x62, 0x67, 0x70, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x28, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x62, 0x67, 0x70, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x43,
	0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6c, 0x6f,
	0x6f, 0x70, 0x63, 0x68, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x55, 0x70, 0x64, 0x4f, 0x72,
	0x69, 0x67, 0x4c, 0x6f, 0x6f, 0x70, 0x63, 0x68, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x41, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x73,
	0x49, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4c, 0x6f,
	0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x1a, 0x65,
	0x6f, 0x5f, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x72, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x65, 0x6f, 0x52, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x13, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x17, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0xcf, 0x01, 0x0a, 0x22, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f,
	0x6e, 0x62, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x52, 0x1f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x41, 0x66, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61,
	0x69, 0x67, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x41, 0x69, 0x67, 0x70, 0x53, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x52, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x7b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x52, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x3c,
	0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x7d, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x80,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x81, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x55, 0x73, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x66, 0x72, 0x70,
	0x6b, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x62, 0x67, 0x70, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x66, 0x72, 0x70, 0x6b, 0x69, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x62, 0x67, 0x70, 0x12, 0x44, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x69, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x87, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x76, 0x34, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x56, 0x34, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x8a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x56, 0x36, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x12, 0x30, 0x0a, 0x14, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x90, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x47, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6f,
	0x72, 0x5f, 0x74, 0x6d, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x91, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x45, 0x6f, 0x72, 0x54, 0x6d, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x50, 0x65,
	0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x93, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73,
	0x6c, 0x6f, 0x77, 0x50, 0x65, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77,
	0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xa3, 0x01, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e,
	0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x22, 0xcc, 0x02, 0x0a,
	0x14, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x6f, 0x70, 0x12, 0x98, 0x01, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x87, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f,
	0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x02, 0x74, 0x78,
	0x12, 0x98, 0x01, 0x0a, 0x02, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x87, 0x01,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61,
	0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x02, 0x72, 0x78, 0x22, 0xf2, 0x07, 0x0a, 0x11,
	0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x9a, 0x01, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0xaa,
	0x01, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x52, 0x0c, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x06,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e,
	0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66,
	0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x6f, 0x70, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a,
	0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62,
	0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x85, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73,
	0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x6f, 0x70, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x9c, 0x01, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x85, 0x01, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e,
	0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xe6, 0x02, 0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x67, 0x73, 0x68,
	0x75, 0x74, 0x5f, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x73, 0x68, 0x75, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x67, 0x73, 0x68, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x73, 0x68, 0x75,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x73, 0x68, 0x75, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x67, 0x73, 0x68, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x70, 0x72, 0x65, 0x66,
	0x53, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x70, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x73, 0x68, 0x75,
	0x74, 0x4c, 0x6f, 0x63, 0x70, 0x72, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x73, 0x68, 0x75,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x67, 0x73, 0x68, 0x75, 0x74, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x67, 0x73, 0x68, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x73, 0x68, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xb1, 0x49, 0x0a, 0x0b, 0x62, 0x67,
	0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x62, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68,
	0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x5b,
	0x0a, 0x2b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x26, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x18,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61,
	0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x74, 0x79, 0x70, 0x65, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xb9, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73,
	0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x74, 0x79, 0x70, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x6c, 0x79, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x39, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x55, 0x70, 0x12, 0x32, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x5f,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x45, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x73, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x45, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x74,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x34, 0x42, 0x79, 0x74, 0x65, 0x41, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x66, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x66, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x76, 0x61, 0x6c, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x62, 0x66, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x66, 0x64, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x62, 0x66, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x66, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x11, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x62,
	0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x5d, 0x0a, 0x2c,
	0x69, 0x73, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70,
	0x5f, 0x62, 0x67, 0x70, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x27, 0x69, 0x73, 0x45, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x6f, 0x70, 0x42, 0x67, 0x70, 0x6d, 0x70, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x63, 0x70, 0x6d, 0x73, 0x73, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x63, 0x70,
	0x6d, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x5e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x4c, 0x6f, 0x67, 0x4f, 0x75,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x2d, 0x0a,
	0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x73, 0x4e, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x24,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4d, 0x0a,
	0x23, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x73, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24,
	0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x28,
	0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23,
	0x69, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x6c,
	0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x5f, 0x61, 0x77, 0x61,
	0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x47, 0x72, 0x41, 0x77,
	0x61, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x61, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73,
	0x34, 0x42, 0x79, 0x74, 0x65, 0x41, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x34,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x69, 0x73, 0x34, 0x42, 0x79, 0x74, 0x65, 0x41, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x3e,
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x4d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x6d, 0x69, 0x6e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x62, 0x18, 0x75, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x62, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x62, 0x18, 0x77, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x62, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x1d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x81, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61,
	0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c,
	0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x54, 0x0a,
	0x27, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x22, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b,
	0x5f, 0x61, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x41, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x5f, 0x61, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x41, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6b, 0x5f, 0x61, 0x6e, 0x6f, 0x74, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x41, 0x6e,
	0x6f, 0x74, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6b, 0x5f, 0x61, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4b,
	0x41, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6b, 0x5f, 0x61, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4b,
	0x41, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x5f, 0x61, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4b, 0x41, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x92, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x75, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f,
	0x6e, 0x6f, 0x74, 0x66, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0xbe, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69,
	0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x6f, 0x74,
	0x66, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x17, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6d, 0x7a, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6d, 0x7a, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x5f, 0x64, 0x6d, 0x7a, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x62, 0x67, 0x70, 0x52, 0x65, 0x63, 0x76, 0x44, 0x6d, 0x7a, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x62,
	0x67, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x6d, 0x7a, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x62, 0x67, 0x70, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x6d, 0x7a, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x7e, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73,
	0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f,
	0x6e, 0x62, 0x72, 0x5f, 0x52, 0x15, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x07,
	0x61, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7c,
	0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61,
	0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61,
	0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x52, 0x06, 0x61, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xa1, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x63, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f,
	0x72, 0x70, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x52, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x73, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x73, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x6e, 0x62, 0x72, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x4e, 0x62, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x67, 0x72, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x67, 0x72, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x73, 0x73, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xa8,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x73, 0x73, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x70, 0x62, 0x73, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x70, 0x62, 0x73, 0x6e, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x6b, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x64, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x73, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0xb1, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x62, 0x72, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x6e, 0x62, 0x72, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x41, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x62, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0xb3, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6d, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x62, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e,
	0x62, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x62, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0xb5, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x62, 0x72, 0x49, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x70, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6f, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0xb8, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x6f, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x12, 0xb3, 0x01,
	0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73,
	0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x41, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x64,
	0x75, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x44, 0x75, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x3e, 0x0a, 0x1c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0xbf, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x44, 0x75, 0x61, 0x6c,
	0x41, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x1f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65,
	0x65, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0xb4, 0x01, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x5f,
	0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0xc6, 0x01, 0x0a, 0x21,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62, 0x67, 0x70,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61, 0x66, 0x2e,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x52, 0x1b, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x69, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x77, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0xbd, 0x01, 0x0a, 0x1c, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7d, 0x2e, 0x63,
	0x69, 0x73, 0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73,
	0x2e, 0x61, 0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62,
	0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x52, 0x17, 0x74, 0x63, 0x70,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x73, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xc5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x70, 0x6b, 0x69, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x70, 0x6b, 0x69, 0x55, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x12, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x70, 0x6b, 0x69, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x70, 0x6b, 0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x62, 0x67, 0x70, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x70, 0x6b, 0x69,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x62, 0x67, 0x70, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x78, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x67, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x2e, 0x61, 0x66, 0x73, 0x2e, 0x61,
	0x66, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x62, 0x67, 0x70,
	0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x67, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x52, 0x13, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x1f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x31, 0x61, 0x6e, 0x64, 0x34, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x61, 0x66, 0x69, 0x31, 0x61, 0x6e, 0x64, 0x34, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x68, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x68, 0x65, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bgp_bgp_nbr_bag_proto_rawDescOnce sync.Once
	file_proto_bgp_bgp_nbr_bag_proto_rawDescData = file_proto_bgp_bgp_nbr_bag_proto_rawDesc
)

func file_proto_bgp_bgp_nbr_bag_proto_rawDescGZIP() []byte {
	file_proto_bgp_bgp_nbr_bag_proto_rawDescOnce.Do(func() {
		file_proto_bgp_bgp_nbr_bag_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bgp_bgp_nbr_bag_proto_rawDescData)
	})
	return file_proto_bgp_bgp_nbr_bag_proto_rawDescData
}

var file_proto_bgp_bgp_nbr_bag_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_bgp_bgp_nbr_bag_proto_goTypes = []interface{}{
	(*BgpNbrBag_KEYS)(nil),       // 0: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag_KEYS
	(*BgpL2VpnAddrT)(nil),        // 1: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_addr_t
	(*BgpL2VpnEvpnAddrT)(nil),    // 2: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_evpn_addr_t
	(*BgpL2VpnMspwAddrT)(nil),    // 3: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_mspw_addr_t
	(*BgpIpv4SrpolicyAddrT)(nil), // 4: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_ipv4_srpolicy_addr_t
	(*BgpIpv6SrpolicyAddrT)(nil), // 5: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_ipv6_srpolicy_addr_t
	(*BgpAddrtype)(nil),          // 6: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype
	(*BgpNotfntype_)(nil),        // 7: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_notfntype_
	(*BgpPerfNbr_)(nil),          // 8: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_perf_nbr_
	(*BgpPerfNbrAf_)(nil),        // 9: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_perf_nbr_af_
	(*BgpNbrAf_)(nil),            // 10: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_af_
	(*BgpTimespec)(nil),          // 11: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_timespec
	(*BgpNbrMsgStatsUnit)(nil),   // 12: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_unit
	(*BgpNbrMsgStatsOp)(nil),     // 13: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	(*BgpNbrMsgStats)(nil),       // 14: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats
	(*BgpNbrGshut_)(nil),         // 15: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_gshut_
	(*BgpNbrBag)(nil),            // 16: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag
}
var file_proto_bgp_bgp_nbr_bag_proto_depIdxs = []int32{
	1,  // 0: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype.l2vpnvpls_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_addr_t
	2,  // 1: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype.l2vpn_evpn_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_evpn_addr_t
	3,  // 2: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype.l2vpn_mspw_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_l2vpn_mspw_addr_t
	4,  // 3: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype.ipv4sr_policy_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_ipv4_srpolicy_addr_t
	5,  // 4: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype.ipv6sr_policy_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_ipv6_srpolicy_addr_t
	9,  // 5: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_af_.neighbor_af_performance_statistics:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_perf_nbr_af_
	11, // 6: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_unit.last_time_spec:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_timespec
	12, // 7: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op.tx:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_unit
	12, // 8: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op.rx:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_unit
	13, // 9: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats.open:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	13, // 10: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats.notification:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	13, // 11: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats.update:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	13, // 12: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats.keepalive:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	13, // 13: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats.route_refresh:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	13, // 14: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats.total:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats_op
	6,  // 15: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.connection_local_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype
	6,  // 16: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.connection_remote_address:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_addrtype
	7,  // 17: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.send_notification_info:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_notfntype_
	7,  // 18: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.received_notification_info:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_notfntype_
	8,  // 19: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.performance_statistics:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_perf_nbr_
	10, // 20: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.af_data:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_af_
	14, // 21: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.message_statistics:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_msg_stats
	11, // 22: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.tcp_init_sync_time_spec:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_timespec
	11, // 23: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.tcp_init_sync_phase_two_time_spec:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_timespec
	11, // 24: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.tcp_init_sync_done_time_spec:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_timespec
	15, // 25: cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_bag.graceful_maintenance:type_name -> cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.neighbor_af_table.neighbor.bgp_nbr_gshut_
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_proto_bgp_bgp_nbr_bag_proto_init() }
func file_proto_bgp_bgp_nbr_bag_proto_init() {
	if File_proto_bgp_bgp_nbr_bag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrBag_KEYS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpL2VpnAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpL2VpnEvpnAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpL2VpnMspwAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpIpv4SrpolicyAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpIpv6SrpolicyAddrT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAddrtype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNotfntype_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPerfNbr_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPerfNbrAf_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrAf_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpTimespec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrMsgStatsUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrMsgStatsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrMsgStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrGshut_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bgp_bgp_nbr_bag_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNbrBag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bgp_bgp_nbr_bag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_bgp_bgp_nbr_bag_proto_goTypes,
		DependencyIndexes: file_proto_bgp_bgp_nbr_bag_proto_depIdxs,
		MessageInfos:      file_proto_bgp_bgp_nbr_bag_proto_msgTypes,
	}.Build()
	File_proto_bgp_bgp_nbr_bag_proto = out.File
	file_proto_bgp_bgp_nbr_bag_proto_rawDesc = nil
	file_proto_bgp_bgp_nbr_bag_proto_goTypes = nil
	file_proto_bgp_bgp_nbr_bag_proto_depIdxs = nil
}
