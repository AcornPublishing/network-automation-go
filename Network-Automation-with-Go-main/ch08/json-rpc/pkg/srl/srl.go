/*
Package srl is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/mk/go/pkg/mod/github.com/openconfig/ygot@v0.16.2/genutil/names.go
using the following YANG input files:
	- yang/srl_nokia/models/network-instance/srl_nokia-bgp.yang
	- yang/srl_nokia/models/routing-policy/srl_nokia-routing-policy.yang
	- yang/srl_nokia/models/network-instance/srl_nokia-ip-route-tables.yang
Imported modules were sourced from:
	- yang/...
*/
package srl

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	Interface	map[string]*SrlNokiaInterfaces_Interface	`path:"interface" module:"srl_nokia-interfaces"`
	NetworkInstance	map[string]*SrlNokiaNetworkInstance_NetworkInstance	`path:"network-instance" module:"srl_nokia-network-instance"`
	RoutingPolicy	*SrlNokiaRoutingPolicy_RoutingPolicy	`path:"routing-policy" module:"srl_nokia-routing-policy"`
	System	*SrlNokiaSystem_System	`path:"system" module:"srl_nokia-system"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*SrlNokiaInterfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaInterfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaInterfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewNetworkInstance(Name string) (*SrlNokiaNetworkInstance_NetworkInstance, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &SrlNokiaNetworkInstance_NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface represents the /srl_nokia-interfaces/interface YANG schema element.
type SrlNokiaInterfaces_Interface struct {
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	BreakoutMode	*SrlNokiaInterfaces_Interface_BreakoutMode	`path:"breakout-mode" module:"srl_nokia-interfaces"`
	Description	*string	`path:"description" module:"srl_nokia-interfaces"`
	Ethernet	*SrlNokiaInterfaces_Interface_Ethernet	`path:"ethernet" module:"srl_nokia-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"srl_nokia-interfaces"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-interfaces"`
	LoopbackMode	*bool	`path:"loopback-mode" module:"srl_nokia-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"srl_nokia-interfaces"`
	Name	*string	`path:"name" module:"srl_nokia-interfaces"`
	OperDownReason	E_SrlNokiaInterfaces_PortOperDownReason	`path:"oper-down-reason" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_Interface_OperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	Subinterface	map[uint32]*SrlNokiaInterfaces_Interface_Subinterface	`path:"subinterface" module:"srl_nokia-interfaces"`
	TrafficRate	*SrlNokiaInterfaces_Interface_TrafficRate	`path:"traffic-rate" module:"srl_nokia-interfaces"`
	Transceiver	*SrlNokiaInterfaces_Interface_Transceiver	`path:"transceiver" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// SrlNokiaInterfaces_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface) NewSubinterface(Index uint32) (*SrlNokiaInterfaces_Interface_Subinterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*SrlNokiaInterfaces_Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &SrlNokiaInterfaces_Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_BreakoutMode represents the /srl_nokia-interfaces/interface/breakout-mode YANG schema element.
type SrlNokiaInterfaces_Interface_BreakoutMode struct {
	ChannelSpeed	E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed	`path:"channel-speed" module:"srl_nokia-interfaces"`
	NumChannels	*uint8	`path:"num-channels" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_BreakoutMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_BreakoutMode) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_BreakoutMode) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_BreakoutMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_BreakoutMode) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet represents the /srl_nokia-interfaces/interface/ethernet YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet struct {
	AggregateId	*string	`path:"aggregate-id" module:"srl_nokia-interfaces"`
	AutoNegotiate	*bool	`path:"auto-negotiate" module:"srl_nokia-interfaces"`
	DuplexMode	E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode	`path:"duplex-mode" module:"srl_nokia-interfaces"`
	FlowControl	*SrlNokiaInterfaces_Interface_Ethernet_FlowControl	`path:"flow-control" module:"srl_nokia-interfaces"`
	HoldTime	*SrlNokiaInterfaces_Interface_Ethernet_HoldTime	`path:"hold-time" module:"srl_nokia-interfaces"`
	HwMacAddress	*string	`path:"hw-mac-address" module:"srl_nokia-interfaces"`
	LacpPortPriority	*uint16	`path:"lacp-port-priority" module:"srl_nokia-interfaces"`
	PhysicalMedium	E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium	`path:"physical-medium" module:"srl_nokia-interfaces"`
	PortSpeed	E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed	`path:"port-speed" module:"srl_nokia-interfaces"`
	ReloadDelay	*uint32	`path:"reload-delay" module:"srl_nokia-interfaces"`
	ReloadDelayExpires	*string	`path:"reload-delay-expires" module:"srl_nokia-interfaces"`
	StandbySignaling	E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling	`path:"standby-signaling" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Ethernet_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	StormControl	*SrlNokiaInterfaces_Interface_Ethernet_StormControl	`path:"storm-control" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_FlowControl represents the /srl_nokia-interfaces/interface/ethernet/flow-control YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_FlowControl struct {
	Receive	*bool	`path:"receive" module:"srl_nokia-interfaces"`
	Transmit	*bool	`path:"transmit" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_FlowControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_FlowControl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_FlowControl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_FlowControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_FlowControl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_HoldTime represents the /srl_nokia-interfaces/interface/ethernet/hold-time YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_HoldTime struct {
	Down	*uint32	`path:"down" module:"srl_nokia-interfaces"`
	DownExpires	*string	`path:"down-expires" module:"srl_nokia-interfaces"`
	Up	*uint32	`path:"up" module:"srl_nokia-interfaces"`
	UpExpires	*string	`path:"up-expires" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_HoldTime) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_Statistics represents the /srl_nokia-interfaces/interface/ethernet/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_Statistics struct {
	In_1024BTo_1518BFrames	*uint64	`path:"in-1024b-to-1518b-frames" module:"srl_nokia-interfaces"`
	In_128BTo_255BFrames	*uint64	`path:"in-128b-to-255b-frames" module:"srl_nokia-interfaces"`
	In_1519BOrLongerFrames	*uint64	`path:"in-1519b-or-longer-frames" module:"srl_nokia-interfaces"`
	In_256BTo_511BFrames	*uint64	`path:"in-256b-to-511b-frames" module:"srl_nokia-interfaces"`
	In_512BTo_1023BFrames	*uint64	`path:"in-512b-to-1023b-frames" module:"srl_nokia-interfaces"`
	In_64BFrames	*uint64	`path:"in-64b-frames" module:"srl_nokia-interfaces"`
	In_65BTo_127BFrames	*uint64	`path:"in-65b-to-127b-frames" module:"srl_nokia-interfaces"`
	InCrcErrorFrames	*uint64	`path:"in-crc-error-frames" module:"srl_nokia-interfaces"`
	InFragmentFrames	*uint64	`path:"in-fragment-frames" module:"srl_nokia-interfaces"`
	InJabberFrames	*uint64	`path:"in-jabber-frames" module:"srl_nokia-interfaces"`
	InMacPauseFrames	*uint64	`path:"in-mac-pause-frames" module:"srl_nokia-interfaces"`
	InOversizeFrames	*uint64	`path:"in-oversize-frames" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	Out_1024BTo_1518BFrames	*uint64	`path:"out-1024b-to-1518b-frames" module:"srl_nokia-interfaces"`
	Out_128BTo_255BFrames	*uint64	`path:"out-128b-to-255b-frames" module:"srl_nokia-interfaces"`
	Out_1519BOrLongerFrames	*uint64	`path:"out-1519b-or-longer-frames" module:"srl_nokia-interfaces"`
	Out_256BTo_511BFrames	*uint64	`path:"out-256b-to-511b-frames" module:"srl_nokia-interfaces"`
	Out_512BTo_1023BFrames	*uint64	`path:"out-512b-to-1023b-frames" module:"srl_nokia-interfaces"`
	Out_64BFrames	*uint64	`path:"out-64b-frames" module:"srl_nokia-interfaces"`
	Out_65BTo_127BFrames	*uint64	`path:"out-65b-to-127b-frames" module:"srl_nokia-interfaces"`
	OutMacPauseFrames	*uint64	`path:"out-mac-pause-frames" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Ethernet_StormControl represents the /srl_nokia-interfaces/interface/ethernet/storm-control YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_StormControl struct {
	BroadcastRate	*uint32	`path:"broadcast-rate" module:"srl_nokia-interfaces"`
	MulticastRate	*uint32	`path:"multicast-rate" module:"srl_nokia-interfaces"`
	OperationalBroadcastRate	*uint32	`path:"operational-broadcast-rate" module:"srl_nokia-interfaces"`
	OperationalMulticastRate	*uint32	`path:"operational-multicast-rate" module:"srl_nokia-interfaces"`
	OperationalUnknownUnicastRate	*uint32	`path:"operational-unknown-unicast-rate" module:"srl_nokia-interfaces"`
	Units	E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units	`path:"units" module:"srl_nokia-interfaces"`
	UnknownUnicastRate	*uint32	`path:"unknown-unicast-rate" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_StormControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_StormControl) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Ethernet_StormControl) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Ethernet_StormControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Ethernet_StormControl) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Statistics represents the /srl_nokia-interfaces/interface/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Statistics struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"srl_nokia-interfaces"`
	InBroadcastPackets	*uint64	`path:"in-broadcast-packets" module:"srl_nokia-interfaces"`
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InFcsErrorPackets	*uint64	`path:"in-fcs-error-packets" module:"srl_nokia-interfaces"`
	InMulticastPackets	*uint64	`path:"in-multicast-packets" module:"srl_nokia-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"srl_nokia-interfaces"`
	InUnicastPackets	*uint64	`path:"in-unicast-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutBroadcastPackets	*uint64	`path:"out-broadcast-packets" module:"srl_nokia-interfaces"`
	OutDiscardedPackets	*uint64	`path:"out-discarded-packets" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutMirrorOctets	*uint64	`path:"out-mirror-octets" module:"srl_nokia-interfaces"`
	OutMirrorPackets	*uint64	`path:"out-mirror-packets" module:"srl_nokia-interfaces"`
	OutMulticastPackets	*uint64	`path:"out-multicast-packets" module:"srl_nokia-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"srl_nokia-interfaces"`
	OutUnicastPackets	*uint64	`path:"out-unicast-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface represents the /srl_nokia-interfaces/interface/subinterface YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface struct {
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	AnycastGw	*SrlNokiaInterfaces_Interface_Subinterface_AnycastGw	`path:"anycast-gw" module:"srl_nokia-interfaces"`
	BridgeTable	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable	`path:"bridge-table" module:"srl_nokia-interfaces"`
	Description	*string	`path:"description" module:"srl_nokia-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"srl_nokia-interfaces"`
	Index	*uint32	`path:"index" module:"srl_nokia-interfaces"`
	IpMtu	*uint16	`path:"ip-mtu" module:"srl_nokia-interfaces"`
	Ipv4	*SrlNokiaInterfaces_Interface_Subinterface_Ipv4	`path:"ipv4" module:"srl_nokia-interfaces"`
	Ipv6	*SrlNokiaInterfaces_Interface_Subinterface_Ipv6	`path:"ipv6" module:"srl_nokia-interfaces"`
	L2Mtu	*uint16	`path:"l2-mtu" module:"srl_nokia-interfaces"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-interfaces"`
	Mpls	*SrlNokiaInterfaces_Interface_Subinterface_Mpls	`path:"mpls" module:"srl_nokia-interfaces"`
	MplsMtu	*uint16	`path:"mpls-mtu" module:"srl_nokia-interfaces"`
	Name	*string	`path:"name" module:"srl_nokia-interfaces"`
	OperDownReason	E_SrlNokiaInterfaces_SubifOperDownReason	`path:"oper-down-reason" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_Interface_Subinterface_OperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Subinterface_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	Type	E_SrlNokiaInterfaces_SiType	`path:"type" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_AnycastGw represents the /srl_nokia-interfaces/interface/subinterface/anycast-gw YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_AnycastGw struct {
	AnycastGwMac	*string	`path:"anycast-gw-mac" module:"srl_nokia-interfaces"`
	AnycastGwMacOrigin	E_SrlNokiaIfIp_AnycastGwMacOrigin	`path:"anycast-gw-mac-origin" module:"srl_nokia-interfaces"`
	VirtualRouterId	*uint8	`path:"virtual-router-id" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_AnycastGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_AnycastGw) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_AnycastGw) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_AnycastGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_AnycastGw) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable represents the /srl_nokia-interfaces/interface/subinterface/bridge-table YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable struct {
	DiscardUnknownSrcMac	*bool	`path:"discard-unknown-src-mac" module:"srl_nokia-interfaces"`
	MacDuplication	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication	`path:"mac-duplication" module:"srl_nokia-interfaces"`
	MacLearning	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning	`path:"mac-learning" module:"srl_nokia-interfaces"`
	MacLimit	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit	`path:"mac-limit" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-duplication YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication struct {
	Action	E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action	`path:"action" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-learning YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning struct {
	AdminState	E_SrlNokiaInterfacesBridgeTable_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	Aging	*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging	`path:"aging" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-learning/aging YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging struct {
	AdminState	E_SrlNokiaInterfacesBridgeTable_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLearning_Aging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit represents the /srl_nokia-interfaces/interface/subinterface/bridge-table/mac-limit YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit struct {
	MaximumEntries	*int32	`path:"maximum-entries" module:"srl_nokia-interfaces"`
	WarningThresholdPct	*int32	`path:"warning-threshold-pct" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4 represents the /srl_nokia-interfaces/interface/subinterface/ipv4 YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4 struct {
	Address	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address	`path:"address" module:"srl_nokia-interfaces"`
	AllowDirectedBroadcast	*bool	`path:"allow-directed-broadcast" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4) NewAddress(IpPrefix string) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address{
		IpPrefix: &IpPrefix,
	}

	return t.Address[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv4/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address struct {
	AnycastGw	*bool	`path:"anycast-gw" module:"srl_nokia-interfaces"`
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-interfaces"`
	Origin	E_SrlNokiaIfIp_AddressOrigin	`path:"origin" module:"srl_nokia-interfaces"`
	Primary	YANGEmpty	`path:"primary" module:"srl_nokia-interfaces"`
	Status	E_SrlNokiaIfIp_Ipv4AddressStatus	`path:"status" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6 represents the /srl_nokia-interfaces/interface/subinterface/ipv6 YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6 struct {
	Address	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address	`path:"address" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// SrlNokiaInterfaces_Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6) NewAddress(IpPrefix string) (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address{
		IpPrefix: &IpPrefix,
	}

	return t.Address[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv6/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address struct {
	AnycastGw	*bool	`path:"anycast-gw" module:"srl_nokia-interfaces"`
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-interfaces"`
	Origin	E_SrlNokiaIfIp_AddressOrigin	`path:"origin" module:"srl_nokia-interfaces"`
	Primary	YANGEmpty	`path:"primary" module:"srl_nokia-interfaces"`
	Status	E_SrlNokiaIfIp_Ipv6AddressStatus	`path:"status" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Mpls represents the /srl_nokia-interfaces/interface/subinterface/mpls YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Mpls struct {
	Statistics	*SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Mpls) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics represents the /srl_nokia-interfaces/interface/subinterface/mpls/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics struct {
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InForwardedOctets	*uint64	`path:"in-forwarded-octets" module:"srl_nokia-interfaces"`
	InForwardedPackets	*uint64	`path:"in-forwarded-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutForwardedOctets	*uint64	`path:"out-forwarded-octets" module:"srl_nokia-interfaces"`
	OutForwardedPackets	*uint64	`path:"out-forwarded-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Mpls_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Subinterface_Statistics represents the /srl_nokia-interfaces/interface/subinterface/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Statistics struct {
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InForwardedOctets	*uint64	`path:"in-forwarded-octets" module:"srl_nokia-interfaces"`
	InForwardedPackets	*uint64	`path:"in-forwarded-packets" module:"srl_nokia-interfaces"`
	InMatchedRaPackets	*uint64	`path:"in-matched-ra-packets" module:"srl_nokia-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"srl_nokia-interfaces"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-interfaces"`
	InTerminatedOctets	*uint64	`path:"in-terminated-octets" module:"srl_nokia-interfaces"`
	InTerminatedPackets	*uint64	`path:"in-terminated-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutDiscardedPackets	*uint64	`path:"out-discarded-packets" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutForwardedOctets	*uint64	`path:"out-forwarded-octets" module:"srl_nokia-interfaces"`
	OutForwardedPackets	*uint64	`path:"out-forwarded-packets" module:"srl_nokia-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"srl_nokia-interfaces"`
	OutOriginatedOctets	*uint64	`path:"out-originated-octets" module:"srl_nokia-interfaces"`
	OutOriginatedPackets	*uint64	`path:"out-originated-packets" module:"srl_nokia-interfaces"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Subinterface_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Subinterface_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_TrafficRate represents the /srl_nokia-interfaces/interface/traffic-rate YANG schema element.
type SrlNokiaInterfaces_Interface_TrafficRate struct {
	InBps	*uint64	`path:"in-bps" module:"srl_nokia-interfaces"`
	OutBps	*uint64	`path:"out-bps" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_TrafficRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_TrafficRate) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_TrafficRate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_TrafficRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_TrafficRate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver represents the /srl_nokia-interfaces/interface/transceiver YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver struct {
	Channel	map[uint8]*SrlNokiaInterfaces_Interface_Transceiver_Channel	`path:"channel" module:"srl_nokia-interfaces"`
	ConnectorType	E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType	`path:"connector-type" module:"srl_nokia-interfaces"`
	DateCode	*string	`path:"date-code" module:"srl_nokia-interfaces"`
	DdmEvents	*bool	`path:"ddm-events" module:"srl_nokia-interfaces"`
	EthernetPmd	*string	`path:"ethernet-pmd" module:"srl_nokia-interfaces"`
	FaultCondition	*bool	`path:"fault-condition" module:"srl_nokia-interfaces"`
	FormFactor	E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor	`path:"form-factor" module:"srl_nokia-interfaces"`
	ForwardErrorCorrection	E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection	`path:"forward-error-correction" module:"srl_nokia-interfaces"`
	InputPower	*SrlNokiaInterfaces_Interface_Transceiver_InputPower	`path:"input-power" module:"srl_nokia-interfaces"`
	LaserBiasCurrent	*SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent	`path:"laser-bias-current" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_TransceiverOperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	OutputPower	*SrlNokiaInterfaces_Interface_Transceiver_OutputPower	`path:"output-power" module:"srl_nokia-interfaces"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-interfaces"`
	Temperature	*SrlNokiaInterfaces_Interface_Transceiver_Temperature	`path:"temperature" module:"srl_nokia-interfaces"`
	TxLaser	*bool	`path:"tx-laser" module:"srl_nokia-interfaces"`
	Vendor	*string	`path:"vendor" module:"srl_nokia-interfaces"`
	VendorPartNumber	*string	`path:"vendor-part-number" module:"srl_nokia-interfaces"`
	VendorRevision	*string	`path:"vendor-revision" module:"srl_nokia-interfaces"`
	Voltage	*SrlNokiaInterfaces_Interface_Transceiver_Voltage	`path:"voltage" module:"srl_nokia-interfaces"`
	Wavelength	*float64	`path:"wavelength" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// SrlNokiaInterfaces_Interface_Transceiver struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaInterfaces_Interface_Transceiver) NewChannel(Index uint8) (*SrlNokiaInterfaces_Interface_Transceiver_Channel, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint8]*SrlNokiaInterfaces_Interface_Transceiver_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &SrlNokiaInterfaces_Interface_Transceiver_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel represents the /srl_nokia-interfaces/interface/transceiver/channel YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel struct {
	Index	*uint8	`path:"index" module:"srl_nokia-interfaces"`
	InputPower	*SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower	`path:"input-power" module:"srl_nokia-interfaces"`
	LaserBiasCurrent	*SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent	`path:"laser-bias-current" module:"srl_nokia-interfaces"`
	OutputPower	*SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower	`path:"output-power" module:"srl_nokia-interfaces"`
	Wavelength	*float64	`path:"wavelength" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaInterfaces_Interface_Transceiver_Channel struct, which is a YANG list entry.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower represents the /srl_nokia-interfaces/interface/transceiver/channel/input-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent represents the /srl_nokia-interfaces/interface/transceiver/channel/laser-bias-current YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower represents the /srl_nokia-interfaces/interface/transceiver/channel/output-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_InputPower represents the /srl_nokia-interfaces/interface/transceiver/input-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_InputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_InputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_InputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent represents the /srl_nokia-interfaces/interface/transceiver/laser-bias-current YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_OutputPower represents the /srl_nokia-interfaces/interface/transceiver/output-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_OutputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_OutputPower) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Temperature represents the /srl_nokia-interfaces/interface/transceiver/temperature YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Temperature struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*int16	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*int16	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*int16	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*int16	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*int16	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Temperature) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Temperature) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaInterfaces_Interface_Transceiver_Voltage represents the /srl_nokia-interfaces/interface/transceiver/voltage YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Voltage struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Voltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Voltage) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Voltage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaInterfaces_Interface_Transceiver_Voltage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaInterfaces_Interface_Transceiver_Voltage) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance represents the /srl_nokia-network-instance/network-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance struct {
	AdminState	E_SrlNokiaNetworkInstance_AdminState	`path:"admin-state" module:"srl_nokia-network-instance"`
	BridgeTable	*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable	`path:"bridge-table" module:"srl_nokia-network-instance"`
	Description	*string	`path:"description" module:"srl_nokia-network-instance"`
	Icmp	*SrlNokiaNetworkInstance_NetworkInstance_Icmp	`path:"icmp" module:"srl_nokia-network-instance"`
	Icmp6	*SrlNokiaNetworkInstance_NetworkInstance_Icmp6	`path:"icmp6" module:"srl_nokia-network-instance"`
	Interface	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface	`path:"interface" module:"srl_nokia-network-instance"`
	IpForwarding	*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding	`path:"ip-forwarding" module:"srl_nokia-network-instance"`
	IpLoadBalancing	*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing	`path:"ip-load-balancing" module:"srl_nokia-network-instance"`
	Name	*string	`path:"name" module:"srl_nokia-network-instance"`
	OperMacVrfMtu	*uint16	`path:"oper-mac-vrf-mtu" module:"srl_nokia-network-instance"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
	Protocols	*SrlNokiaNetworkInstance_NetworkInstance_Protocols	`path:"protocols" module:"srl_nokia-network-instance"`
	RouteTable	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable	`path:"route-table" module:"srl_nokia-network-instance"`
	RouterId	*string	`path:"router-id" module:"srl_nokia-network-instance"`
	SystemIpv4Address	*SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address	`path:"system-ipv4-address" module:"srl_nokia-network-instance"`
	SystemIpv6Address	*SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address	`path:"system-ipv6-address" module:"srl_nokia-network-instance"`
	TunnelTable	*SrlNokiaNetworkInstance_NetworkInstance_TunnelTable	`path:"tunnel-table" module:"srl_nokia-network-instance"`
	Type	E_SrlNokiaNetworkInstance_NiType	`path:"type" module:"srl_nokia-network-instance"`
	VxlanInterface	map[string]*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface	`path:"vxlan-interface" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance) NewInterface(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// NewVxlanInterface creates a new entry in the VxlanInterface list of the
// SrlNokiaNetworkInstance_NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance) NewVxlanInterface(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VxlanInterface == nil {
		t.VxlanInterface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VxlanInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VxlanInterface", key)
	}

	t.VxlanInterface[key] = &SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface{
		Name: &Name,
	}

	return t.VxlanInterface[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable represents the /srl_nokia-network-instance/network-instance/bridge-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable struct {
	DiscardUnknownDestMac	*bool	`path:"discard-unknown-dest-mac" module:"srl_nokia-network-instance"`
	MacDuplication	*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication	`path:"mac-duplication" module:"srl_nokia-network-instance"`
	MacLearning	*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning	`path:"mac-learning" module:"srl_nokia-network-instance"`
	MacLimit	*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit	`path:"mac-limit" module:"srl_nokia-network-instance"`
	ProtectAnycastGwMac	*bool	`path:"protect-anycast-gw-mac" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-duplication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication struct {
	Action	E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action	`path:"action" module:"srl_nokia-network-instance"`
	AdminState	E_SrlNokiaBridgeTableMacDuplication_AdminState	`path:"admin-state" module:"srl_nokia-network-instance"`
	HoldDownTime	*uint32	`path:"hold-down-time" module:"srl_nokia-network-instance"`
	MonitoringWindow	*uint32	`path:"monitoring-window" module:"srl_nokia-network-instance"`
	NumMoves	*uint32	`path:"num-moves" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-learning YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning struct {
	AdminState	E_SrlNokiaBridgeTableMacLearning_AdminState	`path:"admin-state" module:"srl_nokia-network-instance"`
	Aging	*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging	`path:"aging" module:"srl_nokia-network-instance"`
	MacRelearnOnly	*bool	`path:"mac-relearn-only" module:"srl_nokia-network-instance"`
	OperMacLearning	E_SrlNokiaBridgeTableMacLearning_OperState	`path:"oper-mac-learning" module:"srl_nokia-network-instance"`
	OperMacLearningDisabledReason	E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason	`path:"oper-mac-learning-disabled-reason" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-learning/aging YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging struct {
	AdminState	E_SrlNokiaBridgeTableMacLearning_AdminState	`path:"admin-state" module:"srl_nokia-network-instance"`
	AgeTime	*int32	`path:"age-time" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit represents the /srl_nokia-network-instance/network-instance/bridge-table/mac-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit struct {
	MaximumEntries	*int32	`path:"maximum-entries" module:"srl_nokia-network-instance"`
	WarningThresholdPct	*int32	`path:"warning-threshold-pct" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp represents the /srl_nokia-network-instance/network-instance/icmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp struct {
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics	`path:"statistics" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6 represents the /srl_nokia-network-instance/network-instance/icmp6 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6 struct {
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics	`path:"statistics" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics represents the /srl_nokia-network-instance/network-instance/icmp6/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics struct {
	LastClear	*string	`path:"last-clear" module:"srl_nokia-network-instance"`
	Total	*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total	`path:"total" module:"srl_nokia-network-instance"`
	Type	map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type	`path:"type" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) IsYANGGoStruct() {}

// NewType creates a new entry in the Type list of the
// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) NewType(Name E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type == nil {
		t.Type = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type", key)
	}

	t.Type[key] = &SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type{
		Name: Name,
	}

	return t.Type[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total represents the /srl_nokia-network-instance/network-instance/icmp6/statistics/total YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total struct {
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-network-instance"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type represents the /srl_nokia-network-instance/network-instance/icmp6/statistics/type YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type struct {
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name	`path:"name" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics represents the /srl_nokia-network-instance/network-instance/icmp/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics struct {
	LastClear	*string	`path:"last-clear" module:"srl_nokia-network-instance"`
	Total	*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total	`path:"total" module:"srl_nokia-network-instance"`
	Type	map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type	`path:"type" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) IsYANGGoStruct() {}

// NewType creates a new entry in the Type list of the
// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) NewType(Name E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type == nil {
		t.Type = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type", key)
	}

	t.Type[key] = &SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type{
		Name: Name,
	}

	return t.Type[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total represents the /srl_nokia-network-instance/network-instance/icmp/statistics/total YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total struct {
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-network-instance"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type represents the /srl_nokia-network-instance/network-instance/icmp/statistics/type YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type struct {
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name	`path:"name" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Interface represents the /srl_nokia-network-instance/network-instance/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Interface struct {
	Index	*uint64	`path:"index" module:"srl_nokia-network-instance"`
	MacRelearnOnly	*bool	`path:"mac-relearn-only" module:"srl_nokia-network-instance"`
	MulticastForwarding	E_SrlNokiaNetworkInstance_MulticastType	`path:"multicast-forwarding" module:"srl_nokia-network-instance"`
	Name	*string	`path:"name" module:"srl_nokia-network-instance"`
	OperDownReason	E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason	`path:"oper-down-reason" module:"srl_nokia-network-instance"`
	OperMacLearning	E_SrlNokiaNetworkInstance_OperState	`path:"oper-mac-learning" module:"srl_nokia-network-instance"`
	OperMacLearningDisabledReason	E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason	`path:"oper-mac-learning-disabled-reason" module:"srl_nokia-network-instance"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_IpForwarding represents the /srl_nokia-network-instance/network-instance/ip-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpForwarding struct {
	ReceiveIpv4Check	*bool	`path:"receive-ipv4-check" module:"srl_nokia-network-instance"`
	ReceiveIpv6Check	*bool	`path:"receive-ipv6-check" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing represents the /srl_nokia-network-instance/network-instance/ip-load-balancing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct {
	ResilientHashPrefix	map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix	`path:"resilient-hash-prefix" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) IsYANGGoStruct() {}

// NewResilientHashPrefix creates a new entry in the ResilientHashPrefix list of the
// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) NewResilientHashPrefix(IpPrefix string) (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResilientHashPrefix == nil {
		t.ResilientHashPrefix = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ResilientHashPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ResilientHashPrefix", key)
	}

	t.ResilientHashPrefix[key] = &SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.ResilientHashPrefix[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix represents the /srl_nokia-network-instance/network-instance/ip-load-balancing/resilient-hash-prefix YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct {
	HashBucketsPerPath	*uint8	`path:"hash-buckets-per-path" module:"srl_nokia-network-instance"`
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-network-instance"`
	MaxPaths	*uint8	`path:"max-paths" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols represents the /srl_nokia-network-instance/network-instance/protocols YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols struct {
	Bgp	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp	`path:"bgp" module:"srl_nokia-bgp"`
	BgpEvpn	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn	`path:"bgp-evpn" module:"srl_nokia-network-instance"`
	DirectlyConnected	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected	`path:"directly-connected" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp represents the /srl_nokia-network-instance/network-instance/protocols/bgp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions	`path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication	`path:"authentication" module:"srl_nokia-bgp"`
	AutonomousSystem	*uint32	`path:"autonomous-system" module:"srl_nokia-bgp"`
	Convergence	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence	`path:"convergence" module:"srl_nokia-bgp"`
	DynamicNeighbors	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors	`path:"dynamic-neighbors" module:"srl_nokia-bgp"`
	EbgpDefaultPolicy	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy	`path:"ebgp-default-policy" module:"srl_nokia-bgp"`
	Evpn	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn	`path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection	`path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart	`path:"graceful-restart" module:"srl_nokia-bgp"`
	Group	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group	`path:"group" module:"srl_nokia-bgp"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalPreference	*uint32	`path:"local-preference" module:"srl_nokia-bgp"`
	MaintenanceGroup	*string	`path:"maintenance-group" module:"srl_nokia-bgp"`
	Neighbor	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor	`path:"neighbor" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	Preference	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference	`path:"preference" module:"srl_nokia-bgp"`
	RouteAdvertisement	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement	`path:"route-advertisement" module:"srl_nokia-bgp"`
	RouteReflector	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector	`path:"route-reflector" module:"srl_nokia-bgp"`
	RouterId	*string	`path:"router-id" module:"srl_nokia-bgp"`
	SendCommunity	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity	`path:"send-community" module:"srl_nokia-bgp"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics	`path:"statistics" module:"srl_nokia-bgp"`
	TraceOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions	`path:"trace-options" module:"srl_nokia-bgp"`
	Transport	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport	`path:"transport" module:"srl_nokia-bgp"`
	UnderMaintenance	*bool	`path:"under-maintenance" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewGroup(GroupName string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) NewNeighbor(PeerAddress string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor)
	}

	key := PeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor{
		PeerAddress: &PeerAddress,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp-evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn struct {
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions struct {
	AllowOwnAs	*uint8	`path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs	`path:"remove-private-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs	*bool	`path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly	*bool	`path:"leading-only" module:"srl_nokia-bgp"`
	Mode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode	`path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication struct {
	Keychain	*string	`path:"keychain" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence struct {
	MinWaitToAdvertise	*uint16	`path:"min-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct {
	Accept	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept	`path:"accept" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct {
	Match	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match	`path:"match" module:"srl_nokia-bgp"`
	MaxSessions	*uint16	`path:"max-sessions" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) IsYANGGoStruct() {}

// NewMatch creates a new entry in the Match list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) NewMatch(Prefix string) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Match == nil {
		t.Match = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Match[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Match", key)
	}

	t.Match[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match{
		Prefix: &Prefix,
	}

	return t.Match[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct {
	AllowedPeerAs	[]string	`path:"allowed-peer-as" module:"srl_nokia-bgp"`
	PeerGroup	*string	`path:"peer-group" module:"srl_nokia-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ebgp-default-policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy struct {
	ExportRejectAll	*bool	`path:"export-reject-all" module:"srl_nokia-bgp"`
	ImportRejectAll	*bool	`path:"import-reject-all" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn struct {
	ActiveRoutes	*uint64	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	KeepAllRoutes	*bool	`path:"keep-all-routes" module:"srl_nokia-bgp"`
	RapidUpdate	*bool	`path:"rapid-update" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint64	`path:"received-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection struct {
	EnableBfd	*bool	`path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover	*bool	`path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	StaleRoutesTime	*uint16	`path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions	`path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication	`path:"authentication" module:"srl_nokia-bgp"`
	Description	*string	`path:"description" module:"srl_nokia-bgp"`
	Evpn	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn	`path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection	`path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart	`path:"graceful-restart" module:"srl_nokia-bgp"`
	GroupName	*string	`path:"group-name" module:"srl_nokia-bgp"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalAs	map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs	`path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference	*uint32	`path:"local-preference" module:"srl_nokia-bgp"`
	MaintenanceGroup	*string	`path:"maintenance-group" module:"srl_nokia-bgp"`
	NextHopSelf	*bool	`path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAs	*uint32	`path:"peer-as" module:"srl_nokia-bgp"`
	RouteReflector	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector	`path:"route-reflector" module:"srl_nokia-bgp"`
	SendCommunity	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity	`path:"send-community" module:"srl_nokia-bgp"`
	SendDefaultRoute	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute	`path:"send-default-route" module:"srl_nokia-bgp"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics	`path:"statistics" module:"srl_nokia-bgp"`
	Timers	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers	`path:"timers" module:"srl_nokia-bgp"`
	TraceOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions	`path:"trace-options" module:"srl_nokia-bgp"`
	Transport	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport	`path:"transport" module:"srl_nokia-bgp"`
	UnderMaintenance	*bool	`path:"under-maintenance" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) IsYANGGoStruct() {}

// NewLocalAs creates a new entry in the LocalAs list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) NewLocalAs(AsNumber uint32) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAs == nil {
		t.LocalAs = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAs", key)
	}

	t.LocalAs[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs{
		AsNumber: &AsNumber,
	}

	return t.LocalAs[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions struct {
	AllowOwnAs	*uint8	`path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs	`path:"remove-private-as" module:"srl_nokia-bgp"`
	ReplacePeerAs	*bool	`path:"replace-peer-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs	*bool	`path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly	*bool	`path:"leading-only" module:"srl_nokia-bgp"`
	Mode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode	`path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication struct {
	Keychain	*string	`path:"keychain" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/evpn/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Evpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection struct {
	EnableBfd	*bool	`path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover	*bool	`path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	StaleRoutesTime	*uint16	`path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops	*bool	`path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct {
	AsNumber	*uint32	`path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs	*bool	`path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs	*bool	`path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsNumber == nil {
		return nil, fmt.Errorf("nil value for key AsNumber")
	}

	return map[string]interface{}{
		"as-number": *t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector struct {
	Client	*bool	`path:"client" module:"srl_nokia-bgp"`
	ClusterId	*string	`path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity struct {
	Large	*bool	`path:"large" module:"srl_nokia-bgp"`
	Standard	*bool	`path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute struct {
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*bool	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*bool	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics struct {
	DisabledPeers	*uint16	`path:"disabled-peers" module:"srl_nokia-bgp"`
	DynamicPeers	*uint16	`path:"dynamic-peers" module:"srl_nokia-bgp"`
	PathMemory	*uint64	`path:"path-memory" module:"srl_nokia-bgp"`
	TotalActiveRoutes	*uint64	`path:"total-active-routes" module:"srl_nokia-bgp"`
	TotalPaths	*uint64	`path:"total-paths" module:"srl_nokia-bgp"`
	TotalPeers	*uint16	`path:"total-peers" module:"srl_nokia-bgp"`
	TotalPrefixes	*uint64	`path:"total-prefixes" module:"srl_nokia-bgp"`
	TotalReceivedRoutes	*uint64	`path:"total-received-routes" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers struct {
	ConnectRetry	*uint16	`path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime	*uint16	`path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval	*uint16	`path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval	*uint16	`path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct {
	Flag	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag	`path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) NewFlag(Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct {
	Modifier	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier	`path:"modifier" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-bgp"`
	PassiveMode	*bool	`path:"passive-mode" module:"srl_nokia-bgp"`
	TcpMss	*uint16	`path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast struct {
	ActiveRoutes	*uint64	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	Convergence	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence	`path:"convergence" module:"srl_nokia-bgp"`
	Multipath	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath	`path:"multipath" module:"srl_nokia-bgp"`
	NextHopResolution	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution	`path:"next-hop-resolution" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops	*bool	`path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint64	`path:"received-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence struct {
	ConvergedPeers	*uint16	`path:"converged-peers" module:"srl_nokia-bgp"`
	ConvergenceState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState	`path:"convergence-state" module:"srl_nokia-bgp"`
	ConvergenceTime	*uint64	`path:"convergence-time" module:"srl_nokia-bgp"`
	FirstUpPeerTime	*uint64	`path:"first-up-peer-time" module:"srl_nokia-bgp"`
	LastUpPeerTime	*uint64	`path:"last-up-peer-time" module:"srl_nokia-bgp"`
	MaxWaitToAdvertise	*uint16	`path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
	OperMaxWaitToAdvertise	*uint16	`path:"oper-max-wait-to-advertise" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
	UpPeersWhenMinExpired	*uint16	`path:"up-peers-when-min-expired" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath struct {
	AllowMultipleAs	*bool	`path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1	*uint32	`path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2	*uint32	`path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution struct {
	Ipv4NextHops	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops	`path:"ipv4-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops struct {
	TunnelResolution	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution	`path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes	[]E_SrlNokiaCommon_TunnelType	`path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode	`path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast struct {
	ActiveRoutes	*uint64	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	Convergence	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence	`path:"convergence" module:"srl_nokia-bgp"`
	Multipath	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath	`path:"multipath" module:"srl_nokia-bgp"`
	NextHopResolution	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution	`path:"next-hop-resolution" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint64	`path:"received-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence struct {
	ConvergedPeers	*uint16	`path:"converged-peers" module:"srl_nokia-bgp"`
	ConvergenceState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState	`path:"convergence-state" module:"srl_nokia-bgp"`
	ConvergenceTime	*uint64	`path:"convergence-time" module:"srl_nokia-bgp"`
	FirstUpPeerTime	*uint64	`path:"first-up-peer-time" module:"srl_nokia-bgp"`
	LastUpPeerTime	*uint64	`path:"last-up-peer-time" module:"srl_nokia-bgp"`
	MaxWaitToAdvertise	*uint16	`path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
	OperMaxWaitToAdvertise	*uint16	`path:"oper-max-wait-to-advertise" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
	UpPeersWhenMinExpired	*uint16	`path:"up-peers-when-min-expired" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath struct {
	AllowMultipleAs	*bool	`path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1	*uint32	`path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2	*uint32	`path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution struct {
	Ipv4NextHops	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops	`path:"ipv4-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv4-next-hops YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops struct {
	TunnelResolution	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution	`path:"tunnel-resolution" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution struct {
	AllowedTunnelTypes	[]E_SrlNokiaCommon_TunnelType	`path:"allowed-tunnel-types" module:"srl_nokia-bgp"`
	Mode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode	`path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertisedCapabilities	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities	`path:"advertised-capabilities" module:"srl_nokia-bgp"`
	AsPathOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions	`path:"as-path-options" module:"srl_nokia-bgp"`
	Authentication	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication	`path:"authentication" module:"srl_nokia-bgp"`
	Description	*string	`path:"description" module:"srl_nokia-bgp"`
	DiscoveredByLldp	*bool	`path:"discovered-by-lldp" module:"srl_nokia-bgp"`
	DynamicNeighbor	*bool	`path:"dynamic-neighbor" module:"srl_nokia-bgp"`
	EstablishedTransitions	*uint64	`path:"established-transitions" module:"srl_nokia-bgp"`
	Evpn	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn	`path:"evpn" module:"srl_nokia-bgp"`
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection	`path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart	`path:"graceful-restart" module:"srl_nokia-bgp"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LastEstablished	*string	`path:"last-established" module:"srl_nokia-bgp"`
	LastEvent	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent	`path:"last-event" module:"srl_nokia-bgp"`
	LastNotificationErrorCode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode	`path:"last-notification-error-code" module:"srl_nokia-bgp"`
	LastNotificationErrorSubcode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode	`path:"last-notification-error-subcode" module:"srl_nokia-bgp"`
	LastState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState	`path:"last-state" module:"srl_nokia-bgp"`
	LocalAs	map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs	`path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference	*uint32	`path:"local-preference" module:"srl_nokia-bgp"`
	MaintenanceGroup	*string	`path:"maintenance-group" module:"srl_nokia-bgp"`
	NextHopSelf	*bool	`path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAddress	*string	`path:"peer-address" module:"srl_nokia-bgp"`
	PeerAs	*uint32	`path:"peer-as" module:"srl_nokia-bgp"`
	PeerGroup	*string	`path:"peer-group" module:"srl_nokia-bgp"`
	PeerRouterId	*string	`path:"peer-router-id" module:"srl_nokia-bgp"`
	ReceivedAfiSafi	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi	`path:"received-afi-safi" module:"srl_nokia-bgp"`
	ReceivedCapabilities	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities	`path:"received-capabilities" module:"srl_nokia-bgp"`
	ReceivedEndOfRib	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib	`path:"received-end-of-rib" module:"srl_nokia-bgp"`
	ReceivedMessages	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages	`path:"received-messages" module:"srl_nokia-bgp"`
	RouteReflector	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector	`path:"route-reflector" module:"srl_nokia-bgp"`
	SendCommunity	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity	`path:"send-community" module:"srl_nokia-bgp"`
	SendDefaultRoute	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute	`path:"send-default-route" module:"srl_nokia-bgp"`
	SentEndOfRib	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib	`path:"sent-end-of-rib" module:"srl_nokia-bgp"`
	SentMessages	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages	`path:"sent-messages" module:"srl_nokia-bgp"`
	SessionState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState	`path:"session-state" module:"srl_nokia-bgp"`
	SlowPeer	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer	`path:"slow-peer" module:"srl_nokia-bgp"`
	Timers	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers	`path:"timers" module:"srl_nokia-bgp"`
	TraceOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions	`path:"trace-options" module:"srl_nokia-bgp"`
	Transport	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport	`path:"transport" module:"srl_nokia-bgp"`
	UnderMaintenance	*bool	`path:"under-maintenance" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) IsYANGGoStruct() {}

// NewLocalAs creates a new entry in the LocalAs list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) NewLocalAs(AsNumber uint32) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAs == nil {
		t.LocalAs = make(map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAs[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAs", key)
	}

	t.LocalAs[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs{
		AsNumber: &AsNumber,
	}

	return t.LocalAs[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerAddress == nil {
		return nil, fmt.Errorf("nil value for key PeerAddress")
	}

	return map[string]interface{}{
		"peer-address": *t.PeerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions struct {
	AllowOwnAs	*uint8	`path:"allow-own-as" module:"srl_nokia-bgp"`
	RemovePrivateAs	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs	`path:"remove-private-as" module:"srl_nokia-bgp"`
	ReplacePeerAs	*bool	`path:"replace-peer-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs struct {
	IgnorePeerAs	*bool	`path:"ignore-peer-as" module:"srl_nokia-bgp"`
	LeadingOnly	*bool	`path:"leading-only" module:"srl_nokia-bgp"`
	Mode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode	`path:"mode" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/authentication YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication struct {
	Keychain	*string	`path:"keychain" module:"srl_nokia-bgp"`
	TransmitActive	*bool	`path:"transmit-active" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/evpn YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint32	`path:"received-routes" module:"srl_nokia-bgp"`
	RejectedRoutes	*uint32	`path:"rejected-routes" module:"srl_nokia-bgp"`
	SentRoutes	*uint32	`path:"sent-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/evpn/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection struct {
	EnableBfd	*bool	`path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover	*bool	`path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	HelperActive	*bool	`path:"helper-active" module:"srl_nokia-bgp"`
	LastRestartTime	*string	`path:"last-restart-time" module:"srl_nokia-bgp"`
	NeighborCapability	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability	`path:"neighbor-capability" module:"srl_nokia-bgp"`
	NumberOfRestarts	*uint16	`path:"number-of-restarts" module:"srl_nokia-bgp"`
	StaleRoutesTime	*uint16	`path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart/neighbor-capability YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability struct {
	AfiSafi	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi	`path:"afi-safi" module:"srl_nokia-bgp"`
	RestartTime	*uint16	`path:"restart-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability) NewAfiSafi(Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi{
		Name: Name,
	}

	return t.AfiSafi[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart/neighbor-capability/afi-safi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi struct {
	ForwardingPreserved	*bool	`path:"forwarding-preserved" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops	*bool	`path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint32	`path:"received-routes" module:"srl_nokia-bgp"`
	RejectedRoutes	*uint32	`path:"rejected-routes" module:"srl_nokia-bgp"`
	SentRoutes	*uint32	`path:"sent-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint32	`path:"received-routes" module:"srl_nokia-bgp"`
	RejectedRoutes	*uint32	`path:"rejected-routes" module:"srl_nokia-bgp"`
	SentRoutes	*uint32	`path:"sent-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct {
	AsNumber	*uint32	`path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs	*bool	`path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs	*bool	`path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsNumber == nil {
		return nil, fmt.Errorf("nil value for key AsNumber")
	}

	return map[string]interface{}{
		"as-number": *t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/received-messages YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages struct {
	LastUpdateTime	*string	`path:"last-update-time" module:"srl_nokia-bgp"`
	MalformedUpdates	*uint64	`path:"malformed-updates" module:"srl_nokia-bgp"`
	QueueDepth	*uint32	`path:"queue-depth" module:"srl_nokia-bgp"`
	RouteRefresh	*uint64	`path:"route-refresh" module:"srl_nokia-bgp"`
	TotalMessages	*uint64	`path:"total-messages" module:"srl_nokia-bgp"`
	TotalNonUpdates	*uint64	`path:"total-non-updates" module:"srl_nokia-bgp"`
	TotalUpdates	*uint64	`path:"total-updates" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector struct {
	Client	*bool	`path:"client" module:"srl_nokia-bgp"`
	ClusterId	*string	`path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity struct {
	Large	*bool	`path:"large" module:"srl_nokia-bgp"`
	Standard	*bool	`path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute struct {
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*bool	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*bool	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/sent-messages YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages struct {
	QueueDepth	*uint32	`path:"queue-depth" module:"srl_nokia-bgp"`
	RouteRefresh	*uint64	`path:"route-refresh" module:"srl_nokia-bgp"`
	TotalMessages	*uint64	`path:"total-messages" module:"srl_nokia-bgp"`
	TotalNonUpdates	*uint64	`path:"total-non-updates" module:"srl_nokia-bgp"`
	TotalUpdates	*uint64	`path:"total-updates" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers struct {
	ConnectRetry	*uint16	`path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime	*uint16	`path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval	*uint16	`path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval	*uint16	`path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
	NegotiatedHoldTime	*uint16	`path:"negotiated-hold-time" module:"srl_nokia-bgp"`
	NegotiatedKeepaliveInterval	*uint16	`path:"negotiated-keepalive-interval" module:"srl_nokia-bgp"`
	NextConnectRetryTime	*string	`path:"next-connect-retry-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct {
	Flag	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag	`path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) NewFlag(Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct {
	Modifier	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier	`path:"modifier" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-bgp"`
	LocalPort	*uint16	`path:"local-port" module:"srl_nokia-bgp"`
	PassiveMode	*bool	`path:"passive-mode" module:"srl_nokia-bgp"`
	RemotePort	*uint16	`path:"remote-port" module:"srl_nokia-bgp"`
	TcpMss	*uint16	`path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference represents the /srl_nokia-network-instance/network-instance/protocols/bgp/preference YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference struct {
	Ebgp	*uint8	`path:"ebgp" module:"srl_nokia-bgp"`
	Ibgp	*uint8	`path:"ibgp" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-advertisement YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement struct {
	RapidWithdrawal	*bool	`path:"rapid-withdrawal" module:"srl_nokia-bgp"`
	WaitForFibInstall	*bool	`path:"wait-for-fib-install" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-reflector YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector struct {
	Client	*bool	`path:"client" module:"srl_nokia-bgp"`
	ClusterId	*string	`path:"cluster-id" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity struct {
	Large	*bool	`path:"large" module:"srl_nokia-bgp"`
	Standard	*bool	`path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics represents the /srl_nokia-network-instance/network-instance/protocols/bgp/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics struct {
	DisabledPeers	*uint16	`path:"disabled-peers" module:"srl_nokia-bgp"`
	DynamicPeers	*uint16	`path:"dynamic-peers" module:"srl_nokia-bgp"`
	PathMemory	*uint64	`path:"path-memory" module:"srl_nokia-bgp"`
	TotalActiveRoutes	*uint64	`path:"total-active-routes" module:"srl_nokia-bgp"`
	TotalPaths	*uint64	`path:"total-paths" module:"srl_nokia-bgp"`
	TotalPeers	*uint16	`path:"total-peers" module:"srl_nokia-bgp"`
	TotalPrefixes	*uint64	`path:"total-prefixes" module:"srl_nokia-bgp"`
	TotalReceivedRoutes	*uint64	`path:"total-received-routes" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct {
	Flag	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag	`path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) IsYANGGoStruct() {}

// NewFlag creates a new entry in the Flag list of the
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) NewFlag(Name E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flag == nil {
		t.Flag = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flag", key)
	}

	t.Flag[key] = &SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag{
		Name: Name,
	}

	return t.Flag[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct {
	Modifier	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier	`path:"modifier" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport struct {
	TcpMss	*uint16	`path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected represents the /srl_nokia-network-instance/network-instance/protocols/directly-connected YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected struct {
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols_DirectlyConnected) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable represents the /srl_nokia-network-instance/network-instance/route-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable struct {
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-ip-route-tables"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-ip-route-tables"`
	NextHop	map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop	`path:"next-hop" module:"srl_nokia-ip-route-tables"`
	NextHopGroup	map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup	`path:"next-hop-group" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable) NewNextHop(Index uint64) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable) NewNextHopGroup(Index uint64) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup{
		Index: &Index,
	}

	return t.NextHopGroup[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast struct {
	Route	map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route	`path:"route" module:"srl_nokia-ip-route-tables"`
	RouteSummary	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary	`path:"route-summary" module:"srl_nokia-ip-route-tables"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics	`path:"statistics" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key represents the key for list Route of element /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key struct {
	Ipv4Prefix	string	`path:"ipv4-prefix"`
	RouteType	E_SrlNokiaCommon_IpRouteType	`path:"route-type"`
	RouteOwner	string	`path:"route-owner"`
	Id	uint32	`path:"id"`
}

// NewRoute creates a new entry in the Route list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast) NewRoute(Ipv4Prefix string, RouteType E_SrlNokiaCommon_IpRouteType, RouteOwner string, Id uint32) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key{
		Ipv4Prefix: Ipv4Prefix,
		RouteType: RouteType,
		RouteOwner: RouteOwner,
		Id: Id,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route{
		Ipv4Prefix: &Ipv4Prefix,
		RouteType: RouteType,
		RouteOwner: &RouteOwner,
		Id: &Id,
	}

	return t.Route[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route struct {
	Active	*bool	`path:"active" module:"srl_nokia-ip-route-tables"`
	Best	*bool	`path:"best" module:"srl_nokia-ip-route-tables"`
	FibProgramming	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming	`path:"fib-programming" module:"srl_nokia-ip-route-tables"`
	Id	*uint32	`path:"id" module:"srl_nokia-ip-route-tables"`
	Ipv4Prefix	*string	`path:"ipv4-prefix" module:"srl_nokia-ip-route-tables"`
	LastAppUpdate	*string	`path:"last-app-update" module:"srl_nokia-ip-route-tables"`
	Metric	*uint32	`path:"metric" module:"srl_nokia-ip-route-tables"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"srl_nokia-ip-route-tables"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-ip-route-tables"`
	ResilientHash	*bool	`path:"resilient-hash" module:"srl_nokia-ip-route-tables"`
	RouteOwner	*string	`path:"route-owner" module:"srl_nokia-ip-route-tables"`
	RouteType	E_SrlNokiaCommon_IpRouteType	`path:"route-type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	if t.RouteOwner == nil {
		return nil, fmt.Errorf("nil value for key RouteOwner")
	}


	return map[string]interface{}{
		"id": *t.Id,
		"ipv4-prefix": *t.Ipv4Prefix,
		"route-owner": *t.RouteOwner,
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/route-summary YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary struct {
	RouteType	map[E_SrlNokiaCommon_IpRouteType]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType	`path:"route-type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary) IsYANGGoStruct() {}

// NewRouteType creates a new entry in the RouteType list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary) NewRouteType(IpRouteTypeName E_SrlNokiaCommon_IpRouteType) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteType == nil {
		t.RouteType = make(map[E_SrlNokiaCommon_IpRouteType]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType)
	}

	key := IpRouteTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteType", key)
	}

	t.RouteType[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType{
		IpRouteTypeName: IpRouteTypeName,
	}

	return t.RouteType[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/route-summary/route-type YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-ip-route-tables"`
	IpRouteTypeName	E_SrlNokiaCommon_IpRouteType	`path:"ip-route-type-name" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ip-route-type-name": t.IpRouteTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_RouteSummary_RouteType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/route/fib-programming YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming struct {
	FailedSlots	[]uint8	`path:"failed-slots" module:"srl_nokia-ip-route-tables"`
	Status	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status	`path:"status" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-ip-route-tables"`
	ActiveRoutesWithEcmp	*uint32	`path:"active-routes-with-ecmp" module:"srl_nokia-ip-route-tables"`
	FibFailedRoutes	*uint32	`path:"fib-failed-routes" module:"srl_nokia-ip-route-tables"`
	ResilientHashRoutes	*uint32	`path:"resilient-hash-routes" module:"srl_nokia-ip-route-tables"`
	TotalRoutes	*uint64	`path:"total-routes" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast struct {
	Route	map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route	`path:"route" module:"srl_nokia-ip-route-tables"`
	RouteSummary	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary	`path:"route-summary" module:"srl_nokia-ip-route-tables"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics	`path:"statistics" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key represents the key for list Route of element /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key struct {
	Ipv6Prefix	string	`path:"ipv6-prefix"`
	RouteType	E_SrlNokiaCommon_IpRouteType	`path:"route-type"`
	RouteOwner	string	`path:"route-owner"`
	Id	uint32	`path:"id"`
}

// NewRoute creates a new entry in the Route list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast) NewRoute(Ipv6Prefix string, RouteType E_SrlNokiaCommon_IpRouteType, RouteOwner string, Id uint32) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route)
	}

	key := SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key{
		Ipv6Prefix: Ipv6Prefix,
		RouteType: RouteType,
		RouteOwner: RouteOwner,
		Id: Id,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route{
		Ipv6Prefix: &Ipv6Prefix,
		RouteType: RouteType,
		RouteOwner: &RouteOwner,
		Id: &Id,
	}

	return t.Route[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route struct {
	Active	*bool	`path:"active" module:"srl_nokia-ip-route-tables"`
	Best	*bool	`path:"best" module:"srl_nokia-ip-route-tables"`
	FibProgramming	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming	`path:"fib-programming" module:"srl_nokia-ip-route-tables"`
	Id	*uint32	`path:"id" module:"srl_nokia-ip-route-tables"`
	Ipv6Prefix	*string	`path:"ipv6-prefix" module:"srl_nokia-ip-route-tables"`
	LastAppUpdate	*string	`path:"last-app-update" module:"srl_nokia-ip-route-tables"`
	Metric	*uint32	`path:"metric" module:"srl_nokia-ip-route-tables"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"srl_nokia-ip-route-tables"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-ip-route-tables"`
	ResilientHash	*bool	`path:"resilient-hash" module:"srl_nokia-ip-route-tables"`
	RouteOwner	*string	`path:"route-owner" module:"srl_nokia-ip-route-tables"`
	RouteType	E_SrlNokiaCommon_IpRouteType	`path:"route-type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	if t.RouteOwner == nil {
		return nil, fmt.Errorf("nil value for key RouteOwner")
	}


	return map[string]interface{}{
		"id": *t.Id,
		"ipv6-prefix": *t.Ipv6Prefix,
		"route-owner": *t.RouteOwner,
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/route-summary YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary struct {
	RouteType	map[E_SrlNokiaCommon_IpRouteType]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType	`path:"route-type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary) IsYANGGoStruct() {}

// NewRouteType creates a new entry in the RouteType list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary) NewRouteType(IpRouteTypeName E_SrlNokiaCommon_IpRouteType) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteType == nil {
		t.RouteType = make(map[E_SrlNokiaCommon_IpRouteType]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType)
	}

	key := IpRouteTypeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteType", key)
	}

	t.RouteType[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType{
		IpRouteTypeName: IpRouteTypeName,
	}

	return t.RouteType[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/route-summary/route-type YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-ip-route-tables"`
	IpRouteTypeName	E_SrlNokiaCommon_IpRouteType	`path:"ip-route-type-name" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ip-route-type-name": t.IpRouteTypeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_RouteSummary_RouteType) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/route/fib-programming YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming struct {
	FailedSlots	[]uint8	`path:"failed-slots" module:"srl_nokia-ip-route-tables"`
	Status	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status	`path:"status" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-ip-route-tables"`
	ActiveRoutesWithEcmp	*uint32	`path:"active-routes-with-ecmp" module:"srl_nokia-ip-route-tables"`
	FibFailedRoutes	*uint32	`path:"fib-failed-routes" module:"srl_nokia-ip-route-tables"`
	ResilientHashRoutes	*uint32	`path:"resilient-hash-routes" module:"srl_nokia-ip-route-tables"`
	TotalRoutes	*uint64	`path:"total-routes" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop represents the /srl_nokia-network-instance/network-instance/route-table/next-hop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop struct {
	Index	*uint64	`path:"index" module:"srl_nokia-ip-route-tables"`
	IpAddress	*string	`path:"ip-address" module:"srl_nokia-ip-route-tables"`
	Mpls	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls	`path:"mpls" module:"srl_nokia-ip-route-tables"`
	ResolvingRoute	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute	`path:"resolving-route" module:"srl_nokia-ip-route-tables"`
	ResolvingTunnel	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel	`path:"resolving-tunnel" module:"srl_nokia-ip-route-tables"`
	Subinterface	*string	`path:"subinterface" module:"srl_nokia-ip-route-tables"`
	Type	E_SrlNokiaIpRouteTables_FibNexthopType	`path:"type" module:"srl_nokia-ip-route-tables"`
	Vxlan	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan	`path:"vxlan" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup represents the /srl_nokia-network-instance/network-instance/route-table/next-hop-group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup struct {
	Index	*uint64	`path:"index" module:"srl_nokia-ip-route-tables"`
	NextHop	map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop	`path:"next-hop" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup) NewNextHop(Id uint16) (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop{
		Id: &Id,
	}

	return t.NextHop[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop represents the /srl_nokia-network-instance/network-instance/route-table/next-hop-group/next-hop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop struct {
	Id	*uint16	`path:"id" module:"srl_nokia-ip-route-tables"`
	NextHop	*uint64	`path:"next-hop" module:"srl_nokia-ip-route-tables"`
	Resolved	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved	`path:"resolved" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls represents the /srl_nokia-network-instance/network-instance/route-table/next-hop/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls struct {
	PushedMplsLabelStack	[]SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union	`path:"pushed-mpls-label-stack" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/route-table/next-hop/mpls/pushed-mpls-label-stack within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack is used when /srl_nokia-network-instance/network-instance/route-table/next-hop/mpls/pushed-mpls-label-stack
// is to be set to a E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack value.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack struct {
	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack
// implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack) Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_Uint32 is used when /srl_nokia-network-instance/network-instance/route-table/next-hop/mpls/pushed-mpls-label-stack
// is to be set to a uint32 value.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_Uint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_Uint32) Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls) To_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack:
		return &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack{v}, nil
	case uint32:
		return &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack, uint32]", i, i)
	}
}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute represents the /srl_nokia-network-instance/network-instance/route-table/next-hop/resolving-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-ip-route-tables"`
	RouteOwner	*string	`path:"route-owner" module:"srl_nokia-ip-route-tables"`
	RouteType	E_SrlNokiaCommon_IpRouteType	`path:"route-type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel represents the /srl_nokia-network-instance/network-instance/route-table/next-hop/resolving-tunnel YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-ip-route-tables"`
	TunnelOwner	*string	`path:"tunnel-owner" module:"srl_nokia-ip-route-tables"`
	TunnelType	E_SrlNokiaCommon_TunnelType	`path:"tunnel-type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingTunnel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan represents the /srl_nokia-network-instance/network-instance/route-table/next-hop/vxlan YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan struct {
	DestinationMac	*string	`path:"destination-mac" module:"srl_nokia-ip-route-tables"`
	SourceMac	*string	`path:"source-mac" module:"srl_nokia-ip-route-tables"`
	Vni	*uint32	`path:"vni" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address represents the /srl_nokia-network-instance/network-instance/system-ipv4-address YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address struct {
	OperDownReason	E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason	`path:"oper-down-reason" module:"srl_nokia-network-instance"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address represents the /srl_nokia-network-instance/network-instance/system-ipv6-address YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address struct {
	OperDownReason	E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason	`path:"oper-down-reason" module:"srl_nokia-network-instance"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_TunnelTable represents the /srl_nokia-network-instance/network-instance/tunnel-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_TunnelTable struct {
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_TunnelTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_TunnelTable) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TunnelTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_TunnelTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_TunnelTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface represents the /srl_nokia-network-instance/network-instance/vxlan-interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface struct {
	Name	*string	`path:"name" module:"srl_nokia-network-instance"`
	OperDownReason	E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason	`path:"oper-down-reason" module:"srl_nokia-network-instance"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy represents the /srl_nokia-routing-policy/routing-policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy struct {
	AsPathSet	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet	`path:"as-path-set" module:"srl_nokia-routing-policy"`
	CommunitySet	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet	`path:"community-set" module:"srl_nokia-routing-policy"`
	Policy	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_Policy	`path:"policy" module:"srl_nokia-routing-policy"`
	PrefixSet	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet	`path:"prefix-set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy) IsYANGGoStruct() {}

// NewAsPathSet creates a new entry in the AsPathSet list of the
// SrlNokiaRoutingPolicy_RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy) NewAsPathSet(Name string) (*SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathSet", key)
	}

	t.AsPathSet[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet{
		Name: &Name,
	}

	return t.AsPathSet[key], nil
}

// NewCommunitySet creates a new entry in the CommunitySet list of the
// SrlNokiaRoutingPolicy_RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy) NewCommunitySet(Name string) (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommunitySet", key)
	}

	t.CommunitySet[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet{
		Name: &Name,
	}

	return t.CommunitySet[key], nil
}

// NewPolicy creates a new entry in the Policy list of the
// SrlNokiaRoutingPolicy_RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy) NewPolicy(Name string) (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_Policy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy{
		Name: &Name,
	}

	return t.Policy[key], nil
}

// NewPrefixSet creates a new entry in the PrefixSet list of the
// SrlNokiaRoutingPolicy_RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy) NewPrefixSet(Name string) (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSet", key)
	}

	t.PrefixSet[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet{
		Name: &Name,
	}

	return t.PrefixSet[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet represents the /srl_nokia-routing-policy/routing-policy/as-path-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet struct {
	Expression	*string	`path:"expression" module:"srl_nokia-routing-policy"`
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet represents the /srl_nokia-routing-policy/routing-policy/community-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet struct {
	Member	[]SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union	`path:"member" module:"srl_nokia-routing-policy"`
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/community-set/member within the YANG schema.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface {
	Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union()
}

// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity is used when /srl_nokia-routing-policy/routing-policy/community-set/member
// is to be set to a E_SrlNokiaPolicyTypes_BgpWellKnownCommunity value.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity struct {
	E_SrlNokiaPolicyTypes_BgpWellKnownCommunity	E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String is used when /srl_nokia-routing-policy/routing-policy/community-set/member
// is to be set to a string value.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String struct {
	String	string
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String) Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union() {}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) To_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union(i interface{}) (SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaPolicyTypes_BgpWellKnownCommunity:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity{v}, nil
	case string:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union, unknown union type, got: %T, want any of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, string]", i, i)
	}
}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy represents the /srl_nokia-routing-policy/routing-policy/policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy struct {
	DefaultAction	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction	`path:"default-action" module:"srl_nokia-routing-policy"`
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
	Statement	map[uint32]*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement	`path:"statement" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy) IsYANGGoStruct() {}

// NewStatement creates a new entry in the Statement list of the
// SrlNokiaRoutingPolicy_RoutingPolicy_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy) NewStatement(SequenceId uint32) (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Statement == nil {
		t.Statement = make(map[uint32]*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement)
	}

	key := SequenceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Statement[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Statement", key)
	}

	t.Statement[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement{
		SequenceId: &SequenceId,
	}

	return t.Statement[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_Policy struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction represents the /srl_nokia-routing-policy/routing-policy/policy/default-action YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction struct {
	Accept	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept	`path:"accept" module:"srl_nokia-routing-policy"`
	NextEntry	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry	`path:"next-entry" module:"srl_nokia-routing-policy"`
	NextPolicy	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy	`path:"next-policy" module:"srl_nokia-routing-policy"`
	Reject	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject	`path:"reject" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept struct {
	Bgp	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp	`path:"bgp" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp struct {
	AsPath	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath	`path:"as-path" module:"srl_nokia-routing-policy"`
	Communities	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities	`path:"communities" module:"srl_nokia-routing-policy"`
	LocalPreference	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference	`path:"local-preference" module:"srl_nokia-routing-policy"`
	Origin	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin	`path:"origin" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath struct {
	Prepend	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend	`path:"prepend" module:"srl_nokia-routing-policy"`
	Remove	*bool	`path:"remove" module:"srl_nokia-routing-policy"`
	Replace	[]uint32	`path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend struct {
	AsNumber	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union	`path:"as-number" module:"srl_nokia-routing-policy"`
	RepeatN	*uint8	`path:"repeat-n" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number within the YANG schema.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface {
	Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union()
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber is used when /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number
// is to be set to a E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber struct {
	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 is used when /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number
// is to be set to a uint32 value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union(i interface{}) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber{v}, nil
	case uint32:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber, uint32]", i, i)
	}
}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/communities YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities struct {
	Add	*string	`path:"add" module:"srl_nokia-routing-policy"`
	Remove	*string	`path:"remove" module:"srl_nokia-routing-policy"`
	Replace	*string	`path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/local-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference struct {
	Set	*uint32	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/origin YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin struct {
	Set	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/next-entry YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/next-policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/reject YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement represents the /srl_nokia-routing-policy/routing-policy/policy/statement YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement struct {
	Action	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action	`path:"action" module:"srl_nokia-routing-policy"`
	Match	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match	`path:"match" module:"srl_nokia-routing-policy"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SequenceId == nil {
		return nil, fmt.Errorf("nil value for key SequenceId")
	}

	return map[string]interface{}{
		"sequence-id": *t.SequenceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action struct {
	Accept	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept	`path:"accept" module:"srl_nokia-routing-policy"`
	NextEntry	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry	`path:"next-entry" module:"srl_nokia-routing-policy"`
	NextPolicy	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy	`path:"next-policy" module:"srl_nokia-routing-policy"`
	Reject	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject	`path:"reject" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept struct {
	Bgp	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp	`path:"bgp" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp struct {
	AsPath	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath	`path:"as-path" module:"srl_nokia-routing-policy"`
	Communities	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities	`path:"communities" module:"srl_nokia-routing-policy"`
	LocalPreference	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference	`path:"local-preference" module:"srl_nokia-routing-policy"`
	Origin	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin	`path:"origin" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath struct {
	Prepend	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend	`path:"prepend" module:"srl_nokia-routing-policy"`
	Remove	*bool	`path:"remove" module:"srl_nokia-routing-policy"`
	Replace	[]uint32	`path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend struct {
	AsNumber	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union	`path:"as-number" module:"srl_nokia-routing-policy"`
	RepeatN	*uint8	`path:"repeat-n" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number within the YANG schema.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface {
	Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union()
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber is used when /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number
// is to be set to a E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber struct {
	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 is used when /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number
// is to be set to a uint32 value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union(i interface{}) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber{v}, nil
	case uint32:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber, uint32]", i, i)
	}
}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/communities YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities struct {
	Add	*string	`path:"add" module:"srl_nokia-routing-policy"`
	Remove	*string	`path:"remove" module:"srl_nokia-routing-policy"`
	Replace	*string	`path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/local-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference struct {
	Set	*uint32	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/origin YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin struct {
	Set	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/next-entry YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/next-policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/reject YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match struct {
	Bgp	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp	`path:"bgp" module:"srl_nokia-routing-policy"`
	Family	E_SrlNokiaRoutingPolicy_BgpFamilyType	`path:"family" module:"srl_nokia-routing-policy"`
	Isis	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis	`path:"isis" module:"srl_nokia-routing-policy"`
	Ospf	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf	`path:"ospf" module:"srl_nokia-routing-policy"`
	PrefixSet	*string	`path:"prefix-set" module:"srl_nokia-routing-policy"`
	Protocol	E_SrlNokiaCommon_IpRouteType	`path:"protocol" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp struct {
	AsPathLength	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength	`path:"as-path-length" module:"srl_nokia-routing-policy"`
	AsPathSet	*string	`path:"as-path-set" module:"srl_nokia-routing-policy"`
	CommunitySet	*string	`path:"community-set" module:"srl_nokia-routing-policy"`
	Evpn	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn	`path:"evpn" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp/as-path-length YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength struct {
	Operator	E_SrlNokiaRoutingPolicy_ComparisonOperatorType	`path:"operator" module:"srl_nokia-routing-policy"`
	Unique	*bool	`path:"unique" module:"srl_nokia-routing-policy"`
	Value	*uint8	`path:"value" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp/evpn YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn struct {
	RouteType	[]uint8	`path:"route-type" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/isis YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis struct {
	Level	*uint8	`path:"level" module:"srl_nokia-routing-policy"`
	RouteType	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType	`path:"route-type" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/ospf YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf struct {
	AreaId	*string	`path:"area-id" module:"srl_nokia-routing-policy"`
	InstanceId	*uint32	`path:"instance-id" module:"srl_nokia-routing-policy"`
	RouteType	E_SrlNokiaPolicyTypes_PolOspfPathType	`path:"route-type" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Ospf) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet represents the /srl_nokia-routing-policy/routing-policy/prefix-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct {
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
	Prefix	map[SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix	`path:"prefix" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) IsYANGGoStruct() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key represents the key for list Prefix of element /srl_nokia-routing-policy/routing-policy/prefix-set.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key struct {
	IpPrefix	string	`path:"ip-prefix"`
	MaskLengthRange	string	`path:"mask-length-range"`
}

// NewPrefix creates a new entry in the Prefix list of the
// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) NewPrefix(IpPrefix string, MaskLengthRange string) (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix)
	}

	key := SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key{
		IpPrefix: IpPrefix,
		MaskLengthRange: MaskLengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix{
		IpPrefix: &IpPrefix,
		MaskLengthRange: &MaskLengthRange,
	}

	return t.Prefix[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix represents the /srl_nokia-routing-policy/routing-policy/prefix-set/prefix YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-routing-policy"`
	MaskLengthRange	*string	`path:"mask-length-range" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MaskLengthRange == nil {
		return nil, fmt.Errorf("nil value for key MaskLengthRange")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
		"mask-length-range": *t.MaskLengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaSystem_System represents the /srl_nokia-system/system YANG schema element.
type SrlNokiaSystem_System struct {
	Authentication	*SrlNokiaSystem_System_Authentication	`path:"authentication" module:"srl_nokia-keychains"`
	Features	[]string	`path:"features" module:"srl_nokia-system"`
	TraceOptions	[]E_SrlNokiaSystem_System_TraceOptions	`path:"trace-options" module:"srl_nokia-system"`
	WarmReboot	*SrlNokiaSystem_System_WarmReboot	`path:"warm-reboot" module:"srl_nokia-system-reboot"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaSystem_System_Authentication represents the /srl_nokia-system/system/authentication YANG schema element.
type SrlNokiaSystem_System_Authentication struct {
	Keychain	map[string]*SrlNokiaSystem_System_Authentication_Keychain	`path:"keychain" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication) IsYANGGoStruct() {}

// NewKeychain creates a new entry in the Keychain list of the
// SrlNokiaSystem_System_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Authentication) NewKeychain(Name string) (*SrlNokiaSystem_System_Authentication_Keychain, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*SrlNokiaSystem_System_Authentication_Keychain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &SrlNokiaSystem_System_Authentication_Keychain{
		Name: &Name,
	}

	return t.Keychain[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaSystem_System_Authentication_Keychain represents the /srl_nokia-system/system/authentication/keychain YANG schema element.
type SrlNokiaSystem_System_Authentication_Keychain struct {
	AdminState	E_SrlNokiaKeychains_AdminState	`path:"admin-state" module:"srl_nokia-keychains"`
	Description	*string	`path:"description" module:"srl_nokia-keychains"`
	Key	map[uint8]*SrlNokiaSystem_System_Authentication_Keychain_Key	`path:"key" module:"srl_nokia-keychains"`
	Name	*string	`path:"name" module:"srl_nokia-keychains"`
	Type	E_SrlNokiaKeychains_KeychainType	`path:"type" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication_Keychain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication_Keychain) IsYANGGoStruct() {}

// NewKey creates a new entry in the Key list of the
// SrlNokiaSystem_System_Authentication_Keychain struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaSystem_System_Authentication_Keychain) NewKey(Index uint8) (*SrlNokiaSystem_System_Authentication_Keychain_Key, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[uint8]*SrlNokiaSystem_System_Authentication_Keychain_Key)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Key[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Key", key)
	}

	t.Key[key] = &SrlNokiaSystem_System_Authentication_Keychain_Key{
		Index: &Index,
	}

	return t.Key[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Authentication_Keychain struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Authentication_Keychain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication_Keychain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication_Keychain) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaSystem_System_Authentication_Keychain_Key represents the /srl_nokia-system/system/authentication/keychain/key YANG schema element.
type SrlNokiaSystem_System_Authentication_Keychain_Key struct {
	Algorithm	E_SrlNokiaKeychains_AlgorithmType	`path:"algorithm" module:"srl_nokia-keychains"`
	AuthenticationKey	*string	`path:"authentication-key" module:"srl_nokia-keychains"`
	Index	*uint8	`path:"index" module:"srl_nokia-keychains"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Authentication_Keychain_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Authentication_Keychain_Key) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the SrlNokiaSystem_System_Authentication_Keychain_Key struct, which is a YANG list entry.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_Authentication_Keychain_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_Authentication_Keychain_Key) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// SrlNokiaSystem_System_WarmReboot represents the /srl_nokia-system/system/warm-reboot YANG schema element.
type SrlNokiaSystem_System_WarmReboot struct {
	BgpMaxWait	*uint16	`path:"bgp-max-wait" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_WarmReboot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_WarmReboot) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaSystem_System_WarmReboot) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaSystem_System_WarmReboot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaSystem_System_WarmReboot) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_SrlNokiaBgp_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaBgp_AdminState. An additional value named
// SrlNokiaBgp_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaBgp_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaBgp_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaBgp_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaBgp_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaBgp_AdminState.
func (E_SrlNokiaBgp_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaBgp_AdminState.
func (e E_SrlNokiaBgp_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaBgp_AdminState")
}

const (
	// SrlNokiaBgp_AdminState_UNSET corresponds to the value UNSET of SrlNokiaBgp_AdminState
	SrlNokiaBgp_AdminState_UNSET E_SrlNokiaBgp_AdminState = 0
	// SrlNokiaBgp_AdminState_enable corresponds to the value enable of SrlNokiaBgp_AdminState
	SrlNokiaBgp_AdminState_enable E_SrlNokiaBgp_AdminState = 2
	// SrlNokiaBgp_AdminState_disable corresponds to the value disable of SrlNokiaBgp_AdminState
	SrlNokiaBgp_AdminState_disable E_SrlNokiaBgp_AdminState = 3
)


// E_SrlNokiaBridgeTableMacDuplication_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaBridgeTableMacDuplication_AdminState. An additional value named
// SrlNokiaBridgeTableMacDuplication_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaBridgeTableMacDuplication_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaBridgeTableMacDuplication_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaBridgeTableMacDuplication_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaBridgeTableMacDuplication_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaBridgeTableMacDuplication_AdminState.
func (E_SrlNokiaBridgeTableMacDuplication_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaBridgeTableMacDuplication_AdminState.
func (e E_SrlNokiaBridgeTableMacDuplication_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaBridgeTableMacDuplication_AdminState")
}

const (
	// SrlNokiaBridgeTableMacDuplication_AdminState_UNSET corresponds to the value UNSET of SrlNokiaBridgeTableMacDuplication_AdminState
	SrlNokiaBridgeTableMacDuplication_AdminState_UNSET E_SrlNokiaBridgeTableMacDuplication_AdminState = 0
	// SrlNokiaBridgeTableMacDuplication_AdminState_enable corresponds to the value enable of SrlNokiaBridgeTableMacDuplication_AdminState
	SrlNokiaBridgeTableMacDuplication_AdminState_enable E_SrlNokiaBridgeTableMacDuplication_AdminState = 2
	// SrlNokiaBridgeTableMacDuplication_AdminState_disable corresponds to the value disable of SrlNokiaBridgeTableMacDuplication_AdminState
	SrlNokiaBridgeTableMacDuplication_AdminState_disable E_SrlNokiaBridgeTableMacDuplication_AdminState = 3
)


// E_SrlNokiaBridgeTableMacLearning_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaBridgeTableMacLearning_AdminState. An additional value named
// SrlNokiaBridgeTableMacLearning_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaBridgeTableMacLearning_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaBridgeTableMacLearning_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaBridgeTableMacLearning_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaBridgeTableMacLearning_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaBridgeTableMacLearning_AdminState.
func (E_SrlNokiaBridgeTableMacLearning_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaBridgeTableMacLearning_AdminState.
func (e E_SrlNokiaBridgeTableMacLearning_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaBridgeTableMacLearning_AdminState")
}

const (
	// SrlNokiaBridgeTableMacLearning_AdminState_UNSET corresponds to the value UNSET of SrlNokiaBridgeTableMacLearning_AdminState
	SrlNokiaBridgeTableMacLearning_AdminState_UNSET E_SrlNokiaBridgeTableMacLearning_AdminState = 0
	// SrlNokiaBridgeTableMacLearning_AdminState_enable corresponds to the value enable of SrlNokiaBridgeTableMacLearning_AdminState
	SrlNokiaBridgeTableMacLearning_AdminState_enable E_SrlNokiaBridgeTableMacLearning_AdminState = 2
	// SrlNokiaBridgeTableMacLearning_AdminState_disable corresponds to the value disable of SrlNokiaBridgeTableMacLearning_AdminState
	SrlNokiaBridgeTableMacLearning_AdminState_disable E_SrlNokiaBridgeTableMacLearning_AdminState = 3
)


// E_SrlNokiaBridgeTableMacLearning_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaBridgeTableMacLearning_OperState. An additional value named
// SrlNokiaBridgeTableMacLearning_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaBridgeTableMacLearning_OperState int64

// IsYANGGoEnum ensures that SrlNokiaBridgeTableMacLearning_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaBridgeTableMacLearning_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaBridgeTableMacLearning_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaBridgeTableMacLearning_OperState.
func (E_SrlNokiaBridgeTableMacLearning_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaBridgeTableMacLearning_OperState.
func (e E_SrlNokiaBridgeTableMacLearning_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaBridgeTableMacLearning_OperState")
}

const (
	// SrlNokiaBridgeTableMacLearning_OperState_UNSET corresponds to the value UNSET of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_UNSET E_SrlNokiaBridgeTableMacLearning_OperState = 0
	// SrlNokiaBridgeTableMacLearning_OperState_up corresponds to the value up of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_up E_SrlNokiaBridgeTableMacLearning_OperState = 2
	// SrlNokiaBridgeTableMacLearning_OperState_down corresponds to the value down of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_down E_SrlNokiaBridgeTableMacLearning_OperState = 3
	// SrlNokiaBridgeTableMacLearning_OperState_empty corresponds to the value empty of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_empty E_SrlNokiaBridgeTableMacLearning_OperState = 4
	// SrlNokiaBridgeTableMacLearning_OperState_downloading corresponds to the value downloading of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_downloading E_SrlNokiaBridgeTableMacLearning_OperState = 5
	// SrlNokiaBridgeTableMacLearning_OperState_booting corresponds to the value booting of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_booting E_SrlNokiaBridgeTableMacLearning_OperState = 6
	// SrlNokiaBridgeTableMacLearning_OperState_starting corresponds to the value starting of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_starting E_SrlNokiaBridgeTableMacLearning_OperState = 7
	// SrlNokiaBridgeTableMacLearning_OperState_failed corresponds to the value failed of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_failed E_SrlNokiaBridgeTableMacLearning_OperState = 8
	// SrlNokiaBridgeTableMacLearning_OperState_synchronizing corresponds to the value synchronizing of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_synchronizing E_SrlNokiaBridgeTableMacLearning_OperState = 9
	// SrlNokiaBridgeTableMacLearning_OperState_upgrading corresponds to the value upgrading of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_upgrading E_SrlNokiaBridgeTableMacLearning_OperState = 10
	// SrlNokiaBridgeTableMacLearning_OperState_low_power corresponds to the value low_power of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_low_power E_SrlNokiaBridgeTableMacLearning_OperState = 11
	// SrlNokiaBridgeTableMacLearning_OperState_degraded corresponds to the value degraded of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_degraded E_SrlNokiaBridgeTableMacLearning_OperState = 12
	// SrlNokiaBridgeTableMacLearning_OperState_warm_reboot corresponds to the value warm_reboot of SrlNokiaBridgeTableMacLearning_OperState
	SrlNokiaBridgeTableMacLearning_OperState_warm_reboot E_SrlNokiaBridgeTableMacLearning_OperState = 13
)


// E_SrlNokiaCommon_IpRouteType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaCommon_IpRouteType. An additional value named
// SrlNokiaCommon_IpRouteType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaCommon_IpRouteType int64

// IsYANGGoEnum ensures that SrlNokiaCommon_IpRouteType implements the yang.GoEnum
// interface. This ensures that SrlNokiaCommon_IpRouteType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaCommon_IpRouteType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaCommon_IpRouteType.
func (E_SrlNokiaCommon_IpRouteType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaCommon_IpRouteType.
func (e E_SrlNokiaCommon_IpRouteType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaCommon_IpRouteType")
}

const (
	// SrlNokiaCommon_IpRouteType_UNSET corresponds to the value UNSET of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_UNSET E_SrlNokiaCommon_IpRouteType = 0
	// SrlNokiaCommon_IpRouteType_aggregate corresponds to the value aggregate of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_aggregate E_SrlNokiaCommon_IpRouteType = 1
	// SrlNokiaCommon_IpRouteType_arp_nd corresponds to the value arp_nd of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_arp_nd E_SrlNokiaCommon_IpRouteType = 2
	// SrlNokiaCommon_IpRouteType_bgp corresponds to the value bgp of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_bgp E_SrlNokiaCommon_IpRouteType = 3
	// SrlNokiaCommon_IpRouteType_bgp_evpn corresponds to the value bgp_evpn of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_bgp_evpn E_SrlNokiaCommon_IpRouteType = 4
	// SrlNokiaCommon_IpRouteType_dhcp corresponds to the value dhcp of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_dhcp E_SrlNokiaCommon_IpRouteType = 5
	// SrlNokiaCommon_IpRouteType_host corresponds to the value host of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_host E_SrlNokiaCommon_IpRouteType = 6
	// SrlNokiaCommon_IpRouteType_isis corresponds to the value isis of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_isis E_SrlNokiaCommon_IpRouteType = 7
	// SrlNokiaCommon_IpRouteType_linux corresponds to the value linux of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_linux E_SrlNokiaCommon_IpRouteType = 8
	// SrlNokiaCommon_IpRouteType_local corresponds to the value local of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_local E_SrlNokiaCommon_IpRouteType = 9
	// SrlNokiaCommon_IpRouteType_ndk1 corresponds to the value ndk1 of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_ndk1 E_SrlNokiaCommon_IpRouteType = 10
	// SrlNokiaCommon_IpRouteType_ndk2 corresponds to the value ndk2 of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_ndk2 E_SrlNokiaCommon_IpRouteType = 11
	// SrlNokiaCommon_IpRouteType_ospfv2 corresponds to the value ospfv2 of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_ospfv2 E_SrlNokiaCommon_IpRouteType = 12
	// SrlNokiaCommon_IpRouteType_ospfv3 corresponds to the value ospfv3 of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_ospfv3 E_SrlNokiaCommon_IpRouteType = 13
	// SrlNokiaCommon_IpRouteType_static corresponds to the value static of SrlNokiaCommon_IpRouteType
	SrlNokiaCommon_IpRouteType_static E_SrlNokiaCommon_IpRouteType = 14
)


// E_SrlNokiaCommon_TunnelType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaCommon_TunnelType. An additional value named
// SrlNokiaCommon_TunnelType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaCommon_TunnelType int64

// IsYANGGoEnum ensures that SrlNokiaCommon_TunnelType implements the yang.GoEnum
// interface. This ensures that SrlNokiaCommon_TunnelType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaCommon_TunnelType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaCommon_TunnelType.
func (E_SrlNokiaCommon_TunnelType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaCommon_TunnelType.
func (e E_SrlNokiaCommon_TunnelType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaCommon_TunnelType")
}

const (
	// SrlNokiaCommon_TunnelType_UNSET corresponds to the value UNSET of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_UNSET E_SrlNokiaCommon_TunnelType = 0
	// SrlNokiaCommon_TunnelType_ldp corresponds to the value ldp of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_ldp E_SrlNokiaCommon_TunnelType = 1
	// SrlNokiaCommon_TunnelType_sr_isis corresponds to the value sr_isis of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_sr_isis E_SrlNokiaCommon_TunnelType = 2
	// SrlNokiaCommon_TunnelType_sr_mpls corresponds to the value sr_mpls of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_sr_mpls E_SrlNokiaCommon_TunnelType = 3
	// SrlNokiaCommon_TunnelType_sr_ospfv2 corresponds to the value sr_ospfv2 of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_sr_ospfv2 E_SrlNokiaCommon_TunnelType = 4
	// SrlNokiaCommon_TunnelType_sr_ospfv3 corresponds to the value sr_ospfv3 of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_sr_ospfv3 E_SrlNokiaCommon_TunnelType = 5
	// SrlNokiaCommon_TunnelType_sr_policy_mpls corresponds to the value sr_policy_mpls of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_sr_policy_mpls E_SrlNokiaCommon_TunnelType = 6
	// SrlNokiaCommon_TunnelType_vxlan corresponds to the value vxlan of SrlNokiaCommon_TunnelType
	SrlNokiaCommon_TunnelType_vxlan E_SrlNokiaCommon_TunnelType = 7
)


// E_SrlNokiaIfIp_AddressOrigin is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_AddressOrigin. An additional value named
// SrlNokiaIfIp_AddressOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_AddressOrigin int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_AddressOrigin implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_AddressOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_AddressOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_AddressOrigin.
func (E_SrlNokiaIfIp_AddressOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_AddressOrigin.
func (e E_SrlNokiaIfIp_AddressOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_AddressOrigin")
}

const (
	// SrlNokiaIfIp_AddressOrigin_UNSET corresponds to the value UNSET of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_UNSET E_SrlNokiaIfIp_AddressOrigin = 0
	// SrlNokiaIfIp_AddressOrigin_other corresponds to the value other of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_other E_SrlNokiaIfIp_AddressOrigin = 2
	// SrlNokiaIfIp_AddressOrigin_static corresponds to the value static of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_static E_SrlNokiaIfIp_AddressOrigin = 3
	// SrlNokiaIfIp_AddressOrigin_dhcp corresponds to the value dhcp of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_dhcp E_SrlNokiaIfIp_AddressOrigin = 4
	// SrlNokiaIfIp_AddressOrigin_link_layer corresponds to the value link_layer of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_link_layer E_SrlNokiaIfIp_AddressOrigin = 5
	// SrlNokiaIfIp_AddressOrigin_random corresponds to the value random of SrlNokiaIfIp_AddressOrigin
	SrlNokiaIfIp_AddressOrigin_random E_SrlNokiaIfIp_AddressOrigin = 6
)


// E_SrlNokiaIfIp_AnycastGwMacOrigin is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_AnycastGwMacOrigin. An additional value named
// SrlNokiaIfIp_AnycastGwMacOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_AnycastGwMacOrigin int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_AnycastGwMacOrigin implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_AnycastGwMacOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_AnycastGwMacOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_AnycastGwMacOrigin.
func (E_SrlNokiaIfIp_AnycastGwMacOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_AnycastGwMacOrigin.
func (e E_SrlNokiaIfIp_AnycastGwMacOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_AnycastGwMacOrigin")
}

const (
	// SrlNokiaIfIp_AnycastGwMacOrigin_UNSET corresponds to the value UNSET of SrlNokiaIfIp_AnycastGwMacOrigin
	SrlNokiaIfIp_AnycastGwMacOrigin_UNSET E_SrlNokiaIfIp_AnycastGwMacOrigin = 0
	// SrlNokiaIfIp_AnycastGwMacOrigin_configured corresponds to the value configured of SrlNokiaIfIp_AnycastGwMacOrigin
	SrlNokiaIfIp_AnycastGwMacOrigin_configured E_SrlNokiaIfIp_AnycastGwMacOrigin = 2
	// SrlNokiaIfIp_AnycastGwMacOrigin_vrid_auto_derived corresponds to the value vrid_auto_derived of SrlNokiaIfIp_AnycastGwMacOrigin
	SrlNokiaIfIp_AnycastGwMacOrigin_vrid_auto_derived E_SrlNokiaIfIp_AnycastGwMacOrigin = 3
)


// E_SrlNokiaIfIp_Ipv4AddressStatus is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_Ipv4AddressStatus. An additional value named
// SrlNokiaIfIp_Ipv4AddressStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_Ipv4AddressStatus int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_Ipv4AddressStatus implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_Ipv4AddressStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_Ipv4AddressStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_Ipv4AddressStatus.
func (E_SrlNokiaIfIp_Ipv4AddressStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_Ipv4AddressStatus.
func (e E_SrlNokiaIfIp_Ipv4AddressStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_Ipv4AddressStatus")
}

const (
	// SrlNokiaIfIp_Ipv4AddressStatus_UNSET corresponds to the value UNSET of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_UNSET E_SrlNokiaIfIp_Ipv4AddressStatus = 0
	// SrlNokiaIfIp_Ipv4AddressStatus_preferred corresponds to the value preferred of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_preferred E_SrlNokiaIfIp_Ipv4AddressStatus = 2
	// SrlNokiaIfIp_Ipv4AddressStatus_inaccessible corresponds to the value inaccessible of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_inaccessible E_SrlNokiaIfIp_Ipv4AddressStatus = 3
	// SrlNokiaIfIp_Ipv4AddressStatus_tentative corresponds to the value tentative of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_tentative E_SrlNokiaIfIp_Ipv4AddressStatus = 4
	// SrlNokiaIfIp_Ipv4AddressStatus_duplicate corresponds to the value duplicate of SrlNokiaIfIp_Ipv4AddressStatus
	SrlNokiaIfIp_Ipv4AddressStatus_duplicate E_SrlNokiaIfIp_Ipv4AddressStatus = 5
)


// E_SrlNokiaIfIp_Ipv6AddressStatus is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIfIp_Ipv6AddressStatus. An additional value named
// SrlNokiaIfIp_Ipv6AddressStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIfIp_Ipv6AddressStatus int64

// IsYANGGoEnum ensures that SrlNokiaIfIp_Ipv6AddressStatus implements the yang.GoEnum
// interface. This ensures that SrlNokiaIfIp_Ipv6AddressStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIfIp_Ipv6AddressStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIfIp_Ipv6AddressStatus.
func (E_SrlNokiaIfIp_Ipv6AddressStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIfIp_Ipv6AddressStatus.
func (e E_SrlNokiaIfIp_Ipv6AddressStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIfIp_Ipv6AddressStatus")
}

const (
	// SrlNokiaIfIp_Ipv6AddressStatus_UNSET corresponds to the value UNSET of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_UNSET E_SrlNokiaIfIp_Ipv6AddressStatus = 0
	// SrlNokiaIfIp_Ipv6AddressStatus_preferred corresponds to the value preferred of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_preferred E_SrlNokiaIfIp_Ipv6AddressStatus = 2
	// SrlNokiaIfIp_Ipv6AddressStatus_deprecated corresponds to the value deprecated of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_deprecated E_SrlNokiaIfIp_Ipv6AddressStatus = 3
	// SrlNokiaIfIp_Ipv6AddressStatus_invalid corresponds to the value invalid of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_invalid E_SrlNokiaIfIp_Ipv6AddressStatus = 4
	// SrlNokiaIfIp_Ipv6AddressStatus_inaccessible corresponds to the value inaccessible of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_inaccessible E_SrlNokiaIfIp_Ipv6AddressStatus = 5
	// SrlNokiaIfIp_Ipv6AddressStatus_unknown corresponds to the value unknown of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_unknown E_SrlNokiaIfIp_Ipv6AddressStatus = 6
	// SrlNokiaIfIp_Ipv6AddressStatus_tentative corresponds to the value tentative of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_tentative E_SrlNokiaIfIp_Ipv6AddressStatus = 7
	// SrlNokiaIfIp_Ipv6AddressStatus_duplicate corresponds to the value duplicate of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_duplicate E_SrlNokiaIfIp_Ipv6AddressStatus = 8
	// SrlNokiaIfIp_Ipv6AddressStatus_optimistic corresponds to the value optimistic of SrlNokiaIfIp_Ipv6AddressStatus
	SrlNokiaIfIp_Ipv6AddressStatus_optimistic E_SrlNokiaIfIp_Ipv6AddressStatus = 9
)


// E_SrlNokiaInterfacesBridgeTable_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfacesBridgeTable_AdminState. An additional value named
// SrlNokiaInterfacesBridgeTable_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfacesBridgeTable_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaInterfacesBridgeTable_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfacesBridgeTable_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfacesBridgeTable_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfacesBridgeTable_AdminState.
func (E_SrlNokiaInterfacesBridgeTable_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfacesBridgeTable_AdminState.
func (e E_SrlNokiaInterfacesBridgeTable_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfacesBridgeTable_AdminState")
}

const (
	// SrlNokiaInterfacesBridgeTable_AdminState_UNSET corresponds to the value UNSET of SrlNokiaInterfacesBridgeTable_AdminState
	SrlNokiaInterfacesBridgeTable_AdminState_UNSET E_SrlNokiaInterfacesBridgeTable_AdminState = 0
	// SrlNokiaInterfacesBridgeTable_AdminState_enable corresponds to the value enable of SrlNokiaInterfacesBridgeTable_AdminState
	SrlNokiaInterfacesBridgeTable_AdminState_enable E_SrlNokiaInterfacesBridgeTable_AdminState = 2
	// SrlNokiaInterfacesBridgeTable_AdminState_disable corresponds to the value disable of SrlNokiaInterfacesBridgeTable_AdminState
	SrlNokiaInterfacesBridgeTable_AdminState_disable E_SrlNokiaInterfacesBridgeTable_AdminState = 3
)


// E_SrlNokiaInterfaces_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_AdminState. An additional value named
// SrlNokiaInterfaces_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_AdminState.
func (E_SrlNokiaInterfaces_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_AdminState.
func (e E_SrlNokiaInterfaces_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_AdminState")
}

const (
	// SrlNokiaInterfaces_AdminState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_AdminState
	SrlNokiaInterfaces_AdminState_UNSET E_SrlNokiaInterfaces_AdminState = 0
	// SrlNokiaInterfaces_AdminState_enable corresponds to the value enable of SrlNokiaInterfaces_AdminState
	SrlNokiaInterfaces_AdminState_enable E_SrlNokiaInterfaces_AdminState = 2
	// SrlNokiaInterfaces_AdminState_disable corresponds to the value disable of SrlNokiaInterfaces_AdminState
	SrlNokiaInterfaces_AdminState_disable E_SrlNokiaInterfaces_AdminState = 3
)


// E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed. An additional value named
// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed.
func (E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed.
func (e E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed")
}

const (
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_UNSET E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 0
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_10G corresponds to the value 10G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_10G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 1
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_25G corresponds to the value 25G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_25G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 2
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_50G corresponds to the value 50G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_50G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 3
	// SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_100G corresponds to the value 100G of SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed
	SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed_100G E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed = 4
)


// E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_DuplexMode. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_DuplexMode implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_DuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_DuplexMode.
func (E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_DuplexMode
	SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode = 0
	// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_full corresponds to the value full of SrlNokiaInterfaces_Interface_Ethernet_DuplexMode
	SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_full E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode = 1
	// SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_half corresponds to the value half of SrlNokiaInterfaces_Interface_Ethernet_DuplexMode
	SrlNokiaInterfaces_Interface_Ethernet_DuplexMode_half E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode = 2
)


// E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium
	SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium = 0
	// SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_1000BASE_T corresponds to the value 1000BASE_T of SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium
	SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium_1000BASE_T E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium = 1
)


// E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_PortSpeed. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_PortSpeed implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_PortSpeed can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_PortSpeed.
func (E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 0
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10M corresponds to the value 10M of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10M E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 1
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100M corresponds to the value 100M of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100M E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 2
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1G corresponds to the value 1G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 3
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10G corresponds to the value 10G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_10G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 4
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_25G corresponds to the value 25G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_25G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 5
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_40G corresponds to the value 40G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_40G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 6
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_50G corresponds to the value 50G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_50G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 7
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100G corresponds to the value 100G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_100G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 8
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_200G corresponds to the value 200G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_200G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 9
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_400G corresponds to the value 400G of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_400G E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 10
	// SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1T corresponds to the value 1T of SrlNokiaInterfaces_Interface_Ethernet_PortSpeed
	SrlNokiaInterfaces_Interface_Ethernet_PortSpeed_1T E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed = 11
)


// E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling
	SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling = 0
	// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_power_off corresponds to the value power_off of SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling
	SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_power_off E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling = 1
	// SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_lacp corresponds to the value lacp of SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling
	SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling_lacp E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling = 2
)


// E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units. An additional value named
// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units.
func (E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units.
func (e E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units")
}

const (
	// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units
	SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_UNSET E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units = 0
	// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_kbps corresponds to the value kbps of SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units
	SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_kbps E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units = 1
	// SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_percentage corresponds to the value percentage of SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units
	SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units_percentage E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units = 2
)


// E_SrlNokiaInterfaces_Interface_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_OperState. An additional value named
// SrlNokiaInterfaces_Interface_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_OperState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_OperState.
func (E_SrlNokiaInterfaces_Interface_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_OperState.
func (e E_SrlNokiaInterfaces_Interface_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_OperState")
}

const (
	// SrlNokiaInterfaces_Interface_OperState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_OperState
	SrlNokiaInterfaces_Interface_OperState_UNSET E_SrlNokiaInterfaces_Interface_OperState = 0
	// SrlNokiaInterfaces_Interface_OperState_up corresponds to the value up of SrlNokiaInterfaces_Interface_OperState
	SrlNokiaInterfaces_Interface_OperState_up E_SrlNokiaInterfaces_Interface_OperState = 1
	// SrlNokiaInterfaces_Interface_OperState_down corresponds to the value down of SrlNokiaInterfaces_Interface_OperState
	SrlNokiaInterfaces_Interface_OperState_down E_SrlNokiaInterfaces_Interface_OperState = 2
)


// E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action. An additional value named
// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action.
func (E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action.
func (e E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action")
}

const (
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_UNSET E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 0
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_use_net_instance_action corresponds to the value use_net_instance_action of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_use_net_instance_action E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 1
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_stop_learning corresponds to the value stop_learning of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_stop_learning E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 2
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_blackhole corresponds to the value blackhole of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_blackhole E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 3
	// SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_oper_down corresponds to the value oper_down of SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action
	SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action_oper_down E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action = 4
)


// E_SrlNokiaInterfaces_Interface_Subinterface_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Subinterface_OperState. An additional value named
// SrlNokiaInterfaces_Interface_Subinterface_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Subinterface_OperState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Subinterface_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Subinterface_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Subinterface_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Subinterface_OperState.
func (E_SrlNokiaInterfaces_Interface_Subinterface_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Subinterface_OperState.
func (e E_SrlNokiaInterfaces_Interface_Subinterface_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Subinterface_OperState")
}

const (
	// SrlNokiaInterfaces_Interface_Subinterface_OperState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Subinterface_OperState
	SrlNokiaInterfaces_Interface_Subinterface_OperState_UNSET E_SrlNokiaInterfaces_Interface_Subinterface_OperState = 0
	// SrlNokiaInterfaces_Interface_Subinterface_OperState_up corresponds to the value up of SrlNokiaInterfaces_Interface_Subinterface_OperState
	SrlNokiaInterfaces_Interface_Subinterface_OperState_up E_SrlNokiaInterfaces_Interface_Subinterface_OperState = 1
	// SrlNokiaInterfaces_Interface_Subinterface_OperState_down corresponds to the value down of SrlNokiaInterfaces_Interface_Subinterface_OperState
	SrlNokiaInterfaces_Interface_Subinterface_OperState_down E_SrlNokiaInterfaces_Interface_Subinterface_OperState = 2
)


// E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Transceiver_ConnectorType. An additional value named
// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Transceiver_ConnectorType implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Transceiver_ConnectorType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Transceiver_ConnectorType.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType.
func (e E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType")
}

const (
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_UNSET E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 0
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SC corresponds to the value SC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 2
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE1_COPPER corresponds to the value FC_STYLE1_COPPER of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE1_COPPER E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 3
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE2_COPPER corresponds to the value FC_STYLE2_COPPER of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_STYLE2_COPPER E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 4
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_BNC_OR_TNC corresponds to the value BNC_OR_TNC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_BNC_OR_TNC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 5
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_COAX corresponds to the value FC_COAX of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FC_COAX E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 6
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FIBER_JACK corresponds to the value FIBER_JACK of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_FIBER_JACK E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 7
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_LC corresponds to the value LC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_LC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 8
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MT_RJ corresponds to the value MT_RJ of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MT_RJ E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 9
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MU corresponds to the value MU of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MU E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 10
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SG corresponds to the value SG of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SG E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 11
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_OPTICAL_PIGTAIL corresponds to the value OPTICAL_PIGTAIL of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_OPTICAL_PIGTAIL E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 12
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x12 corresponds to the value MPO_1x12 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x12 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 13
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x16 corresponds to the value MPO_2x16 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x16 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 14
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_HSSDC corresponds to the value HSSDC of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_HSSDC E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 15
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_COPPER_PIGTAIL corresponds to the value COPPER_PIGTAIL of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_COPPER_PIGTAIL E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 16
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_RJ45 corresponds to the value RJ45 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_RJ45 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 17
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_no_separable_connector corresponds to the value no_separable_connector of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_no_separable_connector E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 18
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MXC_2x16 corresponds to the value MXC_2x16 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MXC_2x16 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 19
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_CS_OPTICAL_CONNECTOR corresponds to the value CS_OPTICAL_CONNECTOR of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_CS_OPTICAL_CONNECTOR E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 20
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SN_OPTICAL_CONNECTOR corresponds to the value SN_OPTICAL_CONNECTOR of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_SN_OPTICAL_CONNECTOR E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 21
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x12 corresponds to the value MPO_2x12 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_2x12 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 22
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x16 corresponds to the value MPO_1x16 of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_MPO_1x16 E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 23
	// SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_unknown corresponds to the value unknown of SrlNokiaInterfaces_Interface_Transceiver_ConnectorType
	SrlNokiaInterfaces_Interface_Transceiver_ConnectorType_unknown E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType = 24
)


// E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Transceiver_FormFactor. An additional value named
// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Transceiver_FormFactor implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Transceiver_FormFactor can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Transceiver_FormFactor.
func (E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor.
func (e E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor")
}

const (
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_UNSET E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 0
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2 corresponds to the value CFP2 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 2
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2_ACO corresponds to the value CFP2_ACO of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP2_ACO E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 3
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP4 corresponds to the value CFP4 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_CFP4 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 4
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP corresponds to the value QSFP of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 5
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPplus corresponds to the value QSFPplus of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPplus E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 6
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP28 corresponds to the value QSFP28 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFP28 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 7
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPDD corresponds to the value QSFPDD of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_QSFPDD E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 8
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP corresponds to the value SFP of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 9
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFPplus corresponds to the value SFPplus of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFPplus E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 10
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Non_pluggable corresponds to the value Non_pluggable of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Non_pluggable E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 11
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Other corresponds to the value Other of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_Other E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 12
	// SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP28 corresponds to the value SFP28 of SrlNokiaInterfaces_Interface_Transceiver_FormFactor
	SrlNokiaInterfaces_Interface_Transceiver_FormFactor_SFP28 E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor = 13
)


// E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection. An additional value named
// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection.
func (E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection.
func (e E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection")
}

const (
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_UNSET E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 0
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_disabled corresponds to the value disabled of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_disabled E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 1
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_528 corresponds to the value rs_528 of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_528 E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 2
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_544 corresponds to the value rs_544 of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_544 E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 3
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_base_r corresponds to the value base_r of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_base_r E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 4
	// SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_108 corresponds to the value rs_108 of SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection
	SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection_rs_108 E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection = 5
)


// E_SrlNokiaInterfaces_PortOperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_PortOperDownReason. An additional value named
// SrlNokiaInterfaces_PortOperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_PortOperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_PortOperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_PortOperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_PortOperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_PortOperDownReason.
func (E_SrlNokiaInterfaces_PortOperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_PortOperDownReason.
func (e E_SrlNokiaInterfaces_PortOperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_PortOperDownReason")
}

const (
	// SrlNokiaInterfaces_PortOperDownReason_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_UNSET E_SrlNokiaInterfaces_PortOperDownReason = 0
	// SrlNokiaInterfaces_PortOperDownReason_port_admin_disabled corresponds to the value port_admin_disabled of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_admin_disabled E_SrlNokiaInterfaces_PortOperDownReason = 1
	// SrlNokiaInterfaces_PortOperDownReason_mda_admin_disabled corresponds to the value mda_admin_disabled of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_mda_admin_disabled E_SrlNokiaInterfaces_PortOperDownReason = 2
	// SrlNokiaInterfaces_PortOperDownReason_transceiver_laser_disabled corresponds to the value transceiver_laser_disabled of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_transceiver_laser_disabled E_SrlNokiaInterfaces_PortOperDownReason = 3
	// SrlNokiaInterfaces_PortOperDownReason_loopback corresponds to the value loopback of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_loopback E_SrlNokiaInterfaces_PortOperDownReason = 4
	// SrlNokiaInterfaces_PortOperDownReason_port_not_present corresponds to the value port_not_present of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_not_present E_SrlNokiaInterfaces_PortOperDownReason = 5
	// SrlNokiaInterfaces_PortOperDownReason_mda_not_present corresponds to the value mda_not_present of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_mda_not_present E_SrlNokiaInterfaces_PortOperDownReason = 6
	// SrlNokiaInterfaces_PortOperDownReason_transceiver_not_present corresponds to the value transceiver_not_present of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_transceiver_not_present E_SrlNokiaInterfaces_PortOperDownReason = 7
	// SrlNokiaInterfaces_PortOperDownReason_phy_initializing corresponds to the value phy_initializing of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_phy_initializing E_SrlNokiaInterfaces_PortOperDownReason = 8
	// SrlNokiaInterfaces_PortOperDownReason_lower_layer_down corresponds to the value lower_layer_down of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_lower_layer_down E_SrlNokiaInterfaces_PortOperDownReason = 9
	// SrlNokiaInterfaces_PortOperDownReason_port_mtu_resource_exceeded corresponds to the value port_mtu_resource_exceeded of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_mtu_resource_exceeded E_SrlNokiaInterfaces_PortOperDownReason = 10
	// SrlNokiaInterfaces_PortOperDownReason_unsupported_speed corresponds to the value unsupported_speed of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_unsupported_speed E_SrlNokiaInterfaces_PortOperDownReason = 11
	// SrlNokiaInterfaces_PortOperDownReason_invalid_transceiver_fec corresponds to the value invalid_transceiver_fec of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_invalid_transceiver_fec E_SrlNokiaInterfaces_PortOperDownReason = 12
	// SrlNokiaInterfaces_PortOperDownReason_other corresponds to the value other of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_other E_SrlNokiaInterfaces_PortOperDownReason = 13
	// SrlNokiaInterfaces_PortOperDownReason_fabric_availability corresponds to the value fabric_availability of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_fabric_availability E_SrlNokiaInterfaces_PortOperDownReason = 14
	// SrlNokiaInterfaces_PortOperDownReason_no_active_links corresponds to the value no_active_links of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_no_active_links E_SrlNokiaInterfaces_PortOperDownReason = 15
	// SrlNokiaInterfaces_PortOperDownReason_min_link_threshold corresponds to the value min_link_threshold of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_min_link_threshold E_SrlNokiaInterfaces_PortOperDownReason = 16
	// SrlNokiaInterfaces_PortOperDownReason_port_9_12_speed_mismatch corresponds to the value port_9_12_speed_mismatch of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_port_9_12_speed_mismatch E_SrlNokiaInterfaces_PortOperDownReason = 17
	// SrlNokiaInterfaces_PortOperDownReason_lag_resource_exceeded corresponds to the value lag_resource_exceeded of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_lag_resource_exceeded E_SrlNokiaInterfaces_PortOperDownReason = 18
	// SrlNokiaInterfaces_PortOperDownReason_lag_member_resource_exceeded corresponds to the value lag_member_resource_exceeded of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_lag_member_resource_exceeded E_SrlNokiaInterfaces_PortOperDownReason = 19
	// SrlNokiaInterfaces_PortOperDownReason_standby_signaling corresponds to the value standby_signaling of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_standby_signaling E_SrlNokiaInterfaces_PortOperDownReason = 20
	// SrlNokiaInterfaces_PortOperDownReason_interface_hold_time_up_active corresponds to the value interface_hold_time_up_active of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_interface_hold_time_up_active E_SrlNokiaInterfaces_PortOperDownReason = 21
	// SrlNokiaInterfaces_PortOperDownReason_interface_reload_timer_active corresponds to the value interface_reload_timer_active of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_interface_reload_timer_active E_SrlNokiaInterfaces_PortOperDownReason = 22
	// SrlNokiaInterfaces_PortOperDownReason_connector_down corresponds to the value connector_down of SrlNokiaInterfaces_PortOperDownReason
	SrlNokiaInterfaces_PortOperDownReason_connector_down E_SrlNokiaInterfaces_PortOperDownReason = 23
)


// E_SrlNokiaInterfaces_SiType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_SiType. An additional value named
// SrlNokiaInterfaces_SiType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_SiType int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_SiType implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_SiType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_SiType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_SiType.
func (E_SrlNokiaInterfaces_SiType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_SiType.
func (e E_SrlNokiaInterfaces_SiType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_SiType")
}

const (
	// SrlNokiaInterfaces_SiType_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_UNSET E_SrlNokiaInterfaces_SiType = 0
	// SrlNokiaInterfaces_SiType_bridged corresponds to the value bridged of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_bridged E_SrlNokiaInterfaces_SiType = 1
	// SrlNokiaInterfaces_SiType_local_mirror_dest corresponds to the value local_mirror_dest of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_local_mirror_dest E_SrlNokiaInterfaces_SiType = 2
	// SrlNokiaInterfaces_SiType_routed corresponds to the value routed of SrlNokiaInterfaces_SiType
	SrlNokiaInterfaces_SiType_routed E_SrlNokiaInterfaces_SiType = 3
)


// E_SrlNokiaInterfaces_SubifOperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_SubifOperDownReason. An additional value named
// SrlNokiaInterfaces_SubifOperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_SubifOperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_SubifOperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_SubifOperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_SubifOperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_SubifOperDownReason.
func (E_SrlNokiaInterfaces_SubifOperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_SubifOperDownReason.
func (e E_SrlNokiaInterfaces_SubifOperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_SubifOperDownReason")
}

const (
	// SrlNokiaInterfaces_SubifOperDownReason_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_UNSET E_SrlNokiaInterfaces_SubifOperDownReason = 0
	// SrlNokiaInterfaces_SubifOperDownReason_admin_disabled corresponds to the value admin_disabled of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_admin_disabled E_SrlNokiaInterfaces_SubifOperDownReason = 1
	// SrlNokiaInterfaces_SubifOperDownReason_port_down corresponds to the value port_down of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_port_down E_SrlNokiaInterfaces_SubifOperDownReason = 2
	// SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_resource_exceeded corresponds to the value ip_mtu_resource_exceeded of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_resource_exceeded E_SrlNokiaInterfaces_SubifOperDownReason = 3
	// SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_resource_exceeded corresponds to the value mpls_mtu_resource_exceeded of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_resource_exceeded E_SrlNokiaInterfaces_SubifOperDownReason = 4
	// SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_too_large corresponds to the value ip_mtu_too_large of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_too_large E_SrlNokiaInterfaces_SubifOperDownReason = 5
	// SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_too_large corresponds to the value mpls_mtu_too_large of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_mpls_mtu_too_large E_SrlNokiaInterfaces_SubifOperDownReason = 6
	// SrlNokiaInterfaces_SubifOperDownReason_l2_mtu_too_large corresponds to the value l2_mtu_too_large of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_l2_mtu_too_large E_SrlNokiaInterfaces_SubifOperDownReason = 7
	// SrlNokiaInterfaces_SubifOperDownReason_no_ip_config corresponds to the value no_ip_config of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_no_ip_config E_SrlNokiaInterfaces_SubifOperDownReason = 8
	// SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_larger_than_oper_mac_vrf_mtu corresponds to the value ip_mtu_larger_than_oper_mac_vrf_mtu of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_ip_mtu_larger_than_oper_mac_vrf_mtu E_SrlNokiaInterfaces_SubifOperDownReason = 9
	// SrlNokiaInterfaces_SubifOperDownReason_irb_mac_address_not_programmed corresponds to the value irb_mac_address_not_programmed of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_irb_mac_address_not_programmed E_SrlNokiaInterfaces_SubifOperDownReason = 10
	// SrlNokiaInterfaces_SubifOperDownReason_missing_xdp_state corresponds to the value missing_xdp_state of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_missing_xdp_state E_SrlNokiaInterfaces_SubifOperDownReason = 11
	// SrlNokiaInterfaces_SubifOperDownReason_no_underlay_egress_next_hop_resources corresponds to the value no_underlay_egress_next_hop_resources of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_no_underlay_egress_next_hop_resources E_SrlNokiaInterfaces_SubifOperDownReason = 12
	// SrlNokiaInterfaces_SubifOperDownReason_other corresponds to the value other of SrlNokiaInterfaces_SubifOperDownReason
	SrlNokiaInterfaces_SubifOperDownReason_other E_SrlNokiaInterfaces_SubifOperDownReason = 13
)


// E_SrlNokiaInterfaces_TransceiverOperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaInterfaces_TransceiverOperState. An additional value named
// SrlNokiaInterfaces_TransceiverOperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaInterfaces_TransceiverOperState int64

// IsYANGGoEnum ensures that SrlNokiaInterfaces_TransceiverOperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaInterfaces_TransceiverOperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaInterfaces_TransceiverOperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaInterfaces_TransceiverOperState.
func (E_SrlNokiaInterfaces_TransceiverOperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaInterfaces_TransceiverOperState.
func (e E_SrlNokiaInterfaces_TransceiverOperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaInterfaces_TransceiverOperState")
}

const (
	// SrlNokiaInterfaces_TransceiverOperState_UNSET corresponds to the value UNSET of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_UNSET E_SrlNokiaInterfaces_TransceiverOperState = 0
	// SrlNokiaInterfaces_TransceiverOperState_up corresponds to the value up of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_up E_SrlNokiaInterfaces_TransceiverOperState = 1
	// SrlNokiaInterfaces_TransceiverOperState_down corresponds to the value down of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_down E_SrlNokiaInterfaces_TransceiverOperState = 2
	// SrlNokiaInterfaces_TransceiverOperState_not_present corresponds to the value not_present of SrlNokiaInterfaces_TransceiverOperState
	SrlNokiaInterfaces_TransceiverOperState_not_present E_SrlNokiaInterfaces_TransceiverOperState = 3
)


// E_SrlNokiaIpRouteTables_FibNexthopType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaIpRouteTables_FibNexthopType. An additional value named
// SrlNokiaIpRouteTables_FibNexthopType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaIpRouteTables_FibNexthopType int64

// IsYANGGoEnum ensures that SrlNokiaIpRouteTables_FibNexthopType implements the yang.GoEnum
// interface. This ensures that SrlNokiaIpRouteTables_FibNexthopType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaIpRouteTables_FibNexthopType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaIpRouteTables_FibNexthopType.
func (E_SrlNokiaIpRouteTables_FibNexthopType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaIpRouteTables_FibNexthopType.
func (e E_SrlNokiaIpRouteTables_FibNexthopType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaIpRouteTables_FibNexthopType")
}

const (
	// SrlNokiaIpRouteTables_FibNexthopType_UNSET corresponds to the value UNSET of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_UNSET E_SrlNokiaIpRouteTables_FibNexthopType = 0
	// SrlNokiaIpRouteTables_FibNexthopType_broadcast corresponds to the value broadcast of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_broadcast E_SrlNokiaIpRouteTables_FibNexthopType = 1
	// SrlNokiaIpRouteTables_FibNexthopType_direct corresponds to the value direct of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_direct E_SrlNokiaIpRouteTables_FibNexthopType = 2
	// SrlNokiaIpRouteTables_FibNexthopType_discard corresponds to the value discard of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_discard E_SrlNokiaIpRouteTables_FibNexthopType = 3
	// SrlNokiaIpRouteTables_FibNexthopType_extract corresponds to the value extract of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_extract E_SrlNokiaIpRouteTables_FibNexthopType = 4
	// SrlNokiaIpRouteTables_FibNexthopType_indirect corresponds to the value indirect of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_indirect E_SrlNokiaIpRouteTables_FibNexthopType = 5
	// SrlNokiaIpRouteTables_FibNexthopType_reject corresponds to the value reject of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_reject E_SrlNokiaIpRouteTables_FibNexthopType = 6
	// SrlNokiaIpRouteTables_FibNexthopType_static_mpls corresponds to the value static_mpls of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_static_mpls E_SrlNokiaIpRouteTables_FibNexthopType = 7
	// SrlNokiaIpRouteTables_FibNexthopType_tunnel corresponds to the value tunnel of SrlNokiaIpRouteTables_FibNexthopType
	SrlNokiaIpRouteTables_FibNexthopType_tunnel E_SrlNokiaIpRouteTables_FibNexthopType = 8
)


// E_SrlNokiaKeychains_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaKeychains_AdminState. An additional value named
// SrlNokiaKeychains_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaKeychains_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaKeychains_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaKeychains_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaKeychains_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaKeychains_AdminState.
func (E_SrlNokiaKeychains_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaKeychains_AdminState.
func (e E_SrlNokiaKeychains_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaKeychains_AdminState")
}

const (
	// SrlNokiaKeychains_AdminState_UNSET corresponds to the value UNSET of SrlNokiaKeychains_AdminState
	SrlNokiaKeychains_AdminState_UNSET E_SrlNokiaKeychains_AdminState = 0
	// SrlNokiaKeychains_AdminState_enable corresponds to the value enable of SrlNokiaKeychains_AdminState
	SrlNokiaKeychains_AdminState_enable E_SrlNokiaKeychains_AdminState = 2
	// SrlNokiaKeychains_AdminState_disable corresponds to the value disable of SrlNokiaKeychains_AdminState
	SrlNokiaKeychains_AdminState_disable E_SrlNokiaKeychains_AdminState = 3
)


// E_SrlNokiaKeychains_AlgorithmType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaKeychains_AlgorithmType. An additional value named
// SrlNokiaKeychains_AlgorithmType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaKeychains_AlgorithmType int64

// IsYANGGoEnum ensures that SrlNokiaKeychains_AlgorithmType implements the yang.GoEnum
// interface. This ensures that SrlNokiaKeychains_AlgorithmType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaKeychains_AlgorithmType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaKeychains_AlgorithmType.
func (E_SrlNokiaKeychains_AlgorithmType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaKeychains_AlgorithmType.
func (e E_SrlNokiaKeychains_AlgorithmType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaKeychains_AlgorithmType")
}

const (
	// SrlNokiaKeychains_AlgorithmType_UNSET corresponds to the value UNSET of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_UNSET E_SrlNokiaKeychains_AlgorithmType = 0
	// SrlNokiaKeychains_AlgorithmType_cleartext corresponds to the value cleartext of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_cleartext E_SrlNokiaKeychains_AlgorithmType = 1
	// SrlNokiaKeychains_AlgorithmType_md5 corresponds to the value md5 of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_md5 E_SrlNokiaKeychains_AlgorithmType = 2
	// SrlNokiaKeychains_AlgorithmType_hmac_md5 corresponds to the value hmac_md5 of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_hmac_md5 E_SrlNokiaKeychains_AlgorithmType = 3
	// SrlNokiaKeychains_AlgorithmType_hmac_sha_1 corresponds to the value hmac_sha_1 of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_hmac_sha_1 E_SrlNokiaKeychains_AlgorithmType = 4
	// SrlNokiaKeychains_AlgorithmType_hmac_sha_256 corresponds to the value hmac_sha_256 of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_hmac_sha_256 E_SrlNokiaKeychains_AlgorithmType = 5
	// SrlNokiaKeychains_AlgorithmType_aes_128_cmac corresponds to the value aes_128_cmac of SrlNokiaKeychains_AlgorithmType
	SrlNokiaKeychains_AlgorithmType_aes_128_cmac E_SrlNokiaKeychains_AlgorithmType = 6
)


// E_SrlNokiaKeychains_KeychainType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaKeychains_KeychainType. An additional value named
// SrlNokiaKeychains_KeychainType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaKeychains_KeychainType int64

// IsYANGGoEnum ensures that SrlNokiaKeychains_KeychainType implements the yang.GoEnum
// interface. This ensures that SrlNokiaKeychains_KeychainType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaKeychains_KeychainType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaKeychains_KeychainType.
func (E_SrlNokiaKeychains_KeychainType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaKeychains_KeychainType.
func (e E_SrlNokiaKeychains_KeychainType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaKeychains_KeychainType")
}

const (
	// SrlNokiaKeychains_KeychainType_UNSET corresponds to the value UNSET of SrlNokiaKeychains_KeychainType
	SrlNokiaKeychains_KeychainType_UNSET E_SrlNokiaKeychains_KeychainType = 0
	// SrlNokiaKeychains_KeychainType_tcp_md5 corresponds to the value tcp_md5 of SrlNokiaKeychains_KeychainType
	SrlNokiaKeychains_KeychainType_tcp_md5 E_SrlNokiaKeychains_KeychainType = 1
	// SrlNokiaKeychains_KeychainType_isis corresponds to the value isis of SrlNokiaKeychains_KeychainType
	SrlNokiaKeychains_KeychainType_isis E_SrlNokiaKeychains_KeychainType = 2
	// SrlNokiaKeychains_KeychainType_ospf corresponds to the value ospf of SrlNokiaKeychains_KeychainType
	SrlNokiaKeychains_KeychainType_ospf E_SrlNokiaKeychains_KeychainType = 3
	// SrlNokiaKeychains_KeychainType_tcp_ao corresponds to the value tcp_ao of SrlNokiaKeychains_KeychainType
	SrlNokiaKeychains_KeychainType_tcp_ao E_SrlNokiaKeychains_KeychainType = 4
	// SrlNokiaKeychains_KeychainType_vrrp corresponds to the value vrrp of SrlNokiaKeychains_KeychainType
	SrlNokiaKeychains_KeychainType_vrrp E_SrlNokiaKeychains_KeychainType = 5
)


// E_SrlNokiaNetworkInstance_AdminState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_AdminState. An additional value named
// SrlNokiaNetworkInstance_AdminState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_AdminState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_AdminState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_AdminState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_AdminState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_AdminState.
func (E_SrlNokiaNetworkInstance_AdminState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_AdminState.
func (e E_SrlNokiaNetworkInstance_AdminState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_AdminState")
}

const (
	// SrlNokiaNetworkInstance_AdminState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_AdminState
	SrlNokiaNetworkInstance_AdminState_UNSET E_SrlNokiaNetworkInstance_AdminState = 0
	// SrlNokiaNetworkInstance_AdminState_enable corresponds to the value enable of SrlNokiaNetworkInstance_AdminState
	SrlNokiaNetworkInstance_AdminState_enable E_SrlNokiaNetworkInstance_AdminState = 2
	// SrlNokiaNetworkInstance_AdminState_disable corresponds to the value disable of SrlNokiaNetworkInstance_AdminState
	SrlNokiaNetworkInstance_AdminState_disable E_SrlNokiaNetworkInstance_AdminState = 3
)


// E_SrlNokiaNetworkInstance_MulticastType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_MulticastType. An additional value named
// SrlNokiaNetworkInstance_MulticastType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_MulticastType int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_MulticastType implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_MulticastType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_MulticastType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_MulticastType.
func (E_SrlNokiaNetworkInstance_MulticastType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_MulticastType.
func (e E_SrlNokiaNetworkInstance_MulticastType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_MulticastType")
}

const (
	// SrlNokiaNetworkInstance_MulticastType_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_MulticastType
	SrlNokiaNetworkInstance_MulticastType_UNSET E_SrlNokiaNetworkInstance_MulticastType = 0
	// SrlNokiaNetworkInstance_MulticastType_none corresponds to the value none of SrlNokiaNetworkInstance_MulticastType
	SrlNokiaNetworkInstance_MulticastType_none E_SrlNokiaNetworkInstance_MulticastType = 2
	// SrlNokiaNetworkInstance_MulticastType_BUM corresponds to the value BUM of SrlNokiaNetworkInstance_MulticastType
	SrlNokiaNetworkInstance_MulticastType_BUM E_SrlNokiaNetworkInstance_MulticastType = 3
	// SrlNokiaNetworkInstance_MulticastType_unknown_unicast corresponds to the value unknown_unicast of SrlNokiaNetworkInstance_MulticastType
	SrlNokiaNetworkInstance_MulticastType_unknown_unicast E_SrlNokiaNetworkInstance_MulticastType = 4
	// SrlNokiaNetworkInstance_MulticastType_broadcast_mcast corresponds to the value broadcast_mcast of SrlNokiaNetworkInstance_MulticastType
	SrlNokiaNetworkInstance_MulticastType_broadcast_mcast E_SrlNokiaNetworkInstance_MulticastType = 5
)


// E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action
	SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action = 0
	// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_stop_learning corresponds to the value stop_learning of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action
	SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_stop_learning E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action = 1
	// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_blackhole corresponds to the value blackhole of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action
	SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_blackhole E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action = 2
	// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_oper_down corresponds to the value oper_down of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action
	SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action_oper_down E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason.
func (E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason
	SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason = 0
	// SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason_admin_disabled corresponds to the value admin_disabled of SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason
	SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason_admin_disabled E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason = 1
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_dest_unreachable corresponds to the value dest_unreachable of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_dest_unreachable E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_packet_too_big corresponds to the value packet_too_big of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_packet_too_big E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_time_exceeded corresponds to the value time_exceeded of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_time_exceeded E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_param_problem corresponds to the value param_problem of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_param_problem E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_echo_request corresponds to the value echo_request of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_echo_request E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 129
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_echo_reply corresponds to the value echo_reply of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_echo_reply E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 130
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_rtr_solicitation corresponds to the value rtr_solicitation of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_rtr_solicitation E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 134
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_rtr_advertisement corresponds to the value rtr_advertisement of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_rtr_advertisement E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 135
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_nbr_solicitation corresponds to the value nbr_solicitation of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_nbr_solicitation E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 136
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_nbr_advertisement corresponds to the value nbr_advertisement of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_nbr_advertisement E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 137
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_redirect corresponds to the value redirect of SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name_redirect E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name = 138
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_echo_reply corresponds to the value echo_reply of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_echo_reply E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_dest_unreachable corresponds to the value dest_unreachable of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_dest_unreachable E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_redirect corresponds to the value redirect of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_redirect E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_echo corresponds to the value echo of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_echo E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 9
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_rtr_advertisement corresponds to the value rtr_advertisement of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_rtr_advertisement E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 10
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_rtr_selection corresponds to the value rtr_selection of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_rtr_selection E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 11
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_time_exceeded corresponds to the value time_exceeded of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_time_exceeded E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 12
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_param_problem corresponds to the value param_problem of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_param_problem E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 13
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_timestamp corresponds to the value timestamp of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_timestamp E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 14
	// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_timestamp_reply corresponds to the value timestamp_reply of SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name
	SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name_timestamp_reply E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name = 15
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_ip_addr_missing corresponds to the value ip_addr_missing of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_ip_addr_missing E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_ip_addr_overlap corresponds to the value ip_addr_overlap of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_ip_addr_overlap E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_subif_down corresponds to the value subif_down of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_subif_down E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_net_inst_down corresponds to the value net_inst_down of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_net_inst_down E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_vrf_type_mismatch corresponds to the value vrf_type_mismatch of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_vrf_type_mismatch E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_mac_dup_detected corresponds to the value mac_dup_detected of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_mac_dup_detected E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_associated_mac_vrf_down corresponds to the value associated_mac_vrf_down of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_associated_mac_vrf_down E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 7
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_mac_vrf_association_missing corresponds to the value mac_vrf_association_missing of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_mac_vrf_association_missing E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 8
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_ip_vrf_association_missing corresponds to the value ip_vrf_association_missing of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_ip_vrf_association_missing E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 9
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_associated_ip_vrf_down corresponds to the value associated_ip_vrf_down of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_associated_ip_vrf_down E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 10
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_evpn_mh_standby corresponds to the value evpn_mh_standby of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason_evpn_mh_standby E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason = 11
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_routed corresponds to the value routed of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_routed E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_admin_disabled corresponds to the value admin_disabled of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_admin_disabled E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_mac_dup_detected corresponds to the value mac_dup_detected of SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason
	SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason_mac_dup_detected E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_disabled corresponds to the value disabled of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_disabled E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_delete corresponds to the value delete of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_delete E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_replace corresponds to the value replace of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode_replace E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_disabled corresponds to the value disabled of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_disabled E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_delete corresponds to the value delete of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_delete E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_replace corresponds to the value replace of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode_replace E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_detail corresponds to the value detail of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_detail E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_receive corresponds to the value receive of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_receive E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_send corresponds to the value send of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier_send E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_events corresponds to the value events of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_events E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_packets corresponds to the value packets of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_packets E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_open corresponds to the value open of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_open E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_keepalive corresponds to the value keepalive of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_keepalive E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_graceful_restart corresponds to the value graceful_restart of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_graceful_restart E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_timers corresponds to the value timers of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_timers E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_route corresponds to the value route of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_route E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 7
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_notification corresponds to the value notification of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_notification E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 8
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_socket corresponds to the value socket of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_socket E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 9
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_update corresponds to the value update of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name_update E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name = 10
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_waiting corresponds to the value waiting of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_waiting E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_started corresponds to the value started of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_started E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_partial corresponds to the value partial of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_partial E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_timeout corresponds to the value timeout of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_timeout E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_converged corresponds to the value converged of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState_converged E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState = 5
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_prefer corresponds to the value prefer of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_prefer E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_require corresponds to the value require of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_require E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled corresponds to the value disabled of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode_disabled E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_MP_BGP corresponds to the value MP_BGP of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_MP_BGP E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_ROUTE_REFRESH corresponds to the value ROUTE_REFRESH of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_ROUTE_REFRESH E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_EXT_NH_ENCODING corresponds to the value EXT_NH_ENCODING of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_EXT_NH_ENCODING E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_GRACEFUL_RESTART corresponds to the value GRACEFUL_RESTART of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_GRACEFUL_RESTART E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_4_OCTET_ASN corresponds to the value 4_OCTET_ASN of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_4_OCTET_ASN E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_ORF_SEND_EXCOMM corresponds to the value ORF_SEND_EXCOMM of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_ORF_SEND_EXCOMM E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_ORF_RECEIVE_EXCOMM corresponds to the value ORF_RECEIVE_EXCOMM of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities_ORF_RECEIVE_EXCOMM E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities = 7
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_disabled corresponds to the value disabled of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_disabled E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_delete corresponds to the value delete of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_delete E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_replace corresponds to the value replace of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode_replace E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_up corresponds to the value up of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_up E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_down corresponds to the value down of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState_down E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_ipv4_unicast corresponds to the value ipv4_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_ipv4_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_ipv6_unicast corresponds to the value ipv6_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name_ipv6_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_up corresponds to the value up of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_up E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_down corresponds to the value down of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState_down E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_up corresponds to the value up of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_up E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_down corresponds to the value down of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState_down E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_none corresponds to the value none of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_none E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_start corresponds to the value start of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_start E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_stop corresponds to the value stop of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_stop E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_open corresponds to the value open of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_open E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_close corresponds to the value close of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_close E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_openFail corresponds to the value openFail of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_openFail E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_error corresponds to the value error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 7
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_connectRetry corresponds to the value connectRetry of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_connectRetry E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 8
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_holdTime corresponds to the value holdTime of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_holdTime E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 9
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_keepAlive corresponds to the value keepAlive of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_keepAlive E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 10
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvOpen corresponds to the value recvOpen of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvOpen E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 11
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvKeepAlive corresponds to the value recvKeepAlive of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvKeepAlive E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 12
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvUpdate corresponds to the value recvUpdate of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvUpdate E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 13
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvNotify corresponds to the value recvNotify of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_recvNotify E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 14
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_startPassive corresponds to the value startPassive of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_startPassive E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 15
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_parseError corresponds to the value parseError of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_parseError E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 16
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_outOfMemory corresponds to the value outOfMemory of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_outOfMemory E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 17
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_rtmLimitExceed corresponds to the value rtmLimitExceed of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_rtmLimitExceed E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 18
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_outOfProtNHIndex corresponds to the value outOfProtNHIndex of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_outOfProtNHIndex E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 19
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_outOfNHIndex corresponds to the value outOfNHIndex of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_outOfNHIndex E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 20
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_labelAllocFailed corresponds to the value labelAllocFailed of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_labelAllocFailed E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 21
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_lspIdAllocFailed corresponds to the value lspIdAllocFailed of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_lspIdAllocFailed E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 22
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_collisionResolution corresponds to the value collisionResolution of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_collisionResolution E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 23
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_adminShutdown corresponds to the value adminShutdown of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_adminShutdown E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 24
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_adminReset corresponds to the value adminReset of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_adminReset E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 25
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_configChange corresponds to the value configChange of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_configChange E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 26
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_maxPrefixExceed corresponds to the value maxPrefixExceed of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_maxPrefixExceed E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 27
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_maxPfxExcdLog corresponds to the value maxPfxExcdLog of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_maxPfxExcdLog E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 28
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_trackingPolMismatch corresponds to the value trackingPolMismatch of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_trackingPolMismatch E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 29
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_receivedMalformedAttr corresponds to the value receivedMalformedAttr of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_receivedMalformedAttr E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 30
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_adminResetHard corresponds to the value adminResetHard of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_adminResetHard E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 31
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_peerDamping corresponds to the value peerDamping of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent_peerDamping E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent = 32
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Message_Header_Error corresponds to the value Message_Header_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Message_Header_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Open_Message_Error corresponds to the value Open_Message_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Open_Message_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Update_Message_Error corresponds to the value Update_Message_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Update_Message_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Hold_Timer_Error corresponds to the value Hold_Timer_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Hold_Timer_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Finite_State_Machine_Error corresponds to the value Finite_State_Machine_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Finite_State_Machine_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Cease corresponds to the value Cease of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode_Cease E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode = 6
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Connection_Not_Synchronized corresponds to the value Connection_Not_Synchronized of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Connection_Not_Synchronized E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_Message_Length corresponds to the value Bad_Message_Length of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_Message_Length E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_Message_Type corresponds to the value Bad_Message_Type of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_Message_Type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unsupported_Version_Number corresponds to the value Unsupported_Version_Number of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unsupported_Version_Number E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_Peer_As corresponds to the value Bad_Peer_As of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_Peer_As E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_BGP_Identifier corresponds to the value Bad_BGP_Identifier of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Bad_BGP_Identifier E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unsupported_Optional_Parameter corresponds to the value Unsupported_Optional_Parameter of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unsupported_Optional_Parameter E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 7
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unacceptable_Hold_Time corresponds to the value Unacceptable_Hold_Time of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unacceptable_Hold_Time E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 8
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_UPDATE_Message_Error_subcodes corresponds to the value UPDATE_Message_Error_subcodes of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_UPDATE_Message_Error_subcodes E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 9
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Malformed_Attribute_List corresponds to the value Malformed_Attribute_List of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Malformed_Attribute_List E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 10
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unrecognized_Well_known_Attribute corresponds to the value Unrecognized_Well_known_Attribute of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Unrecognized_Well_known_Attribute E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 11
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Missing_Well_known_Attribute corresponds to the value Missing_Well_known_Attribute of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Missing_Well_known_Attribute E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 12
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Attribute_Flags_Error corresponds to the value Attribute_Flags_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Attribute_Flags_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 13
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Attribute_Length_Error corresponds to the value Attribute_Length_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Attribute_Length_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 14
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Invalid_ORIGIN_Attribute corresponds to the value Invalid_ORIGIN_Attribute of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Invalid_ORIGIN_Attribute E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 15
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Invalid_NEXT_HOP_Attribute corresponds to the value Invalid_NEXT_HOP_Attribute of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Invalid_NEXT_HOP_Attribute E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 16
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Optional_Attribute_Error corresponds to the value Optional_Attribute_Error of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Optional_Attribute_Error E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 17
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Invalid_Network_Field corresponds to the value Invalid_Network_Field of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Invalid_Network_Field E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 18
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Malformed_AS_PATH corresponds to the value Malformed_AS_PATH of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Malformed_AS_PATH E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 19
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Maximum_Number_of_Prefixes_Reached corresponds to the value Maximum_Number_of_Prefixes_Reached of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Maximum_Number_of_Prefixes_Reached E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 20
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Administrative_Shutdown corresponds to the value Administrative_Shutdown of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Administrative_Shutdown E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 21
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Peer_De_configured corresponds to the value Peer_De_configured of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Peer_De_configured E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 22
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Administrative_Reset corresponds to the value Administrative_Reset of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Administrative_Reset E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 23
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Connection_Rejected corresponds to the value Connection_Rejected of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Connection_Rejected E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 24
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Other_Configuration_Change corresponds to the value Other_Configuration_Change of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Other_Configuration_Change E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 25
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Connection_Collision_Resolution corresponds to the value Connection_Collision_Resolution of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Connection_Collision_Resolution E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 26
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Out_of_Resources corresponds to the value Out_of_Resources of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode_Out_of_Resources E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode = 27
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_idle corresponds to the value idle of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_idle E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_connect corresponds to the value connect of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_connect E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_active corresponds to the value active of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_active E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_opensent corresponds to the value opensent of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_opensent E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_openconfirm corresponds to the value openconfirm of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_openconfirm E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_established corresponds to the value established of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState_established E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState = 6
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_ipv4_unicast corresponds to the value ipv4_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_ipv4_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_ipv6_unicast corresponds to the value ipv6_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi_ipv6_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_MP_BGP corresponds to the value MP_BGP of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_MP_BGP E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ROUTE_REFRESH corresponds to the value ROUTE_REFRESH of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ROUTE_REFRESH E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_EXT_NH_ENCODING corresponds to the value EXT_NH_ENCODING of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_EXT_NH_ENCODING E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_GRACEFUL_RESTART corresponds to the value GRACEFUL_RESTART of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_GRACEFUL_RESTART E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_4_OCTET_ASN corresponds to the value 4_OCTET_ASN of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_4_OCTET_ASN E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ORF_SEND_EXCOMM corresponds to the value ORF_SEND_EXCOMM of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ORF_SEND_EXCOMM E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 6
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ORF_RECEIVE_EXCOMM corresponds to the value ORF_RECEIVE_EXCOMM of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ORF_RECEIVE_EXCOMM E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 7
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ADD_PATH corresponds to the value ADD_PATH of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_ADD_PATH E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 8
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_LONG_LIVED_GR corresponds to the value LONG_LIVED_GR of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities_LONG_LIVED_GR E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities = 9
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_ipv4_unicast corresponds to the value ipv4_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_ipv4_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_ipv6_unicast corresponds to the value ipv6_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib_ipv6_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_ipv4_unicast corresponds to the value ipv4_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_ipv4_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_ipv6_unicast corresponds to the value ipv6_unicast of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib_ipv6_unicast E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_idle corresponds to the value idle of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_idle E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_connect corresponds to the value connect of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_connect E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_active corresponds to the value active of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_active E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 3
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_opensent corresponds to the value opensent of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_opensent E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 4
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_openconfirm corresponds to the value openconfirm of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_openconfirm E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 5
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_established corresponds to the value established of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState_established E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState = 6
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_yes corresponds to the value yes of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_yes E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_no corresponds to the value no of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_no E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer = 2
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_unknown corresponds to the value unknown of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer_unknown E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState.
func (E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState = 0
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_up corresponds to the value up of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_up E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState = 1
	// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_down corresponds to the value down of SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState
	SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState_down E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status.
func (E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status = 0
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_success corresponds to the value success of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_success E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status = 1
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_failed corresponds to the value failed of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_failed E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status = 2
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_pending corresponds to the value pending of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status_pending E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved.
func (E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved = 0
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_true corresponds to the value true of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_true E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved = 1
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_false corresponds to the value false of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_false E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved = 2
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_not_applicable corresponds to the value not_applicable of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved_not_applicable E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved = 3
)


// E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack.
func (E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack = 0
	// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack
	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack_IMPLICIT_NULL E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack = 4
)


// E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason.
func (E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason = 0
	// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_system_interface_not_bound corresponds to the value system_interface_not_bound of SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_system_interface_not_bound E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason = 1
	// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_system_interface_has_no_ipv4_address corresponds to the value system_interface_has_no_ipv4_address of SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason_system_interface_has_no_ipv4_address E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason.
func (E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason = 0
	// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_system_interface_not_bound corresponds to the value system_interface_not_bound of SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_system_interface_not_bound E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason = 1
	// SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_system_interface_has_no_ipv6_address corresponds to the value system_interface_has_no_ipv6_address of SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason_system_interface_has_no_ipv6_address E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason = 2
)


// E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason. An additional value named
// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason.
func (E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason.
func (e E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason")
}

const (
	// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_UNSET E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason = 0
	// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vxlan_tunnel_down corresponds to the value vxlan_tunnel_down of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vxlan_tunnel_down E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason = 1
	// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_net_inst_down corresponds to the value net_inst_down of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_net_inst_down E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason = 2
	// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vxlan_if_default_net_inst_source_address_missing corresponds to the value vxlan_if_default_net_inst_source_address_missing of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vxlan_if_default_net_inst_source_address_missing E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason = 3
	// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vxlan_if_default_net_inst_source_if_down corresponds to the value vxlan_if_default_net_inst_source_if_down of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vxlan_if_default_net_inst_source_if_down E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason = 4
	// SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vrf_type_mismatch corresponds to the value vrf_type_mismatch of SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason
	SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason_vrf_type_mismatch E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason = 5
)


// E_SrlNokiaNetworkInstance_NiType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_NiType. An additional value named
// SrlNokiaNetworkInstance_NiType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_NiType int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_NiType implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_NiType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_NiType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_NiType.
func (E_SrlNokiaNetworkInstance_NiType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_NiType.
func (e E_SrlNokiaNetworkInstance_NiType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_NiType")
}

const (
	// SrlNokiaNetworkInstance_NiType_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_NiType
	SrlNokiaNetworkInstance_NiType_UNSET E_SrlNokiaNetworkInstance_NiType = 0
	// SrlNokiaNetworkInstance_NiType_default corresponds to the value default of SrlNokiaNetworkInstance_NiType
	SrlNokiaNetworkInstance_NiType_default E_SrlNokiaNetworkInstance_NiType = 1
	// SrlNokiaNetworkInstance_NiType_host corresponds to the value host of SrlNokiaNetworkInstance_NiType
	SrlNokiaNetworkInstance_NiType_host E_SrlNokiaNetworkInstance_NiType = 2
	// SrlNokiaNetworkInstance_NiType_ip_vrf corresponds to the value ip_vrf of SrlNokiaNetworkInstance_NiType
	SrlNokiaNetworkInstance_NiType_ip_vrf E_SrlNokiaNetworkInstance_NiType = 3
	// SrlNokiaNetworkInstance_NiType_mac_vrf corresponds to the value mac_vrf of SrlNokiaNetworkInstance_NiType
	SrlNokiaNetworkInstance_NiType_mac_vrf E_SrlNokiaNetworkInstance_NiType = 4
)


// E_SrlNokiaNetworkInstance_OperState is a derived int64 type which is used to represent
// the enumerated node SrlNokiaNetworkInstance_OperState. An additional value named
// SrlNokiaNetworkInstance_OperState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaNetworkInstance_OperState int64

// IsYANGGoEnum ensures that SrlNokiaNetworkInstance_OperState implements the yang.GoEnum
// interface. This ensures that SrlNokiaNetworkInstance_OperState can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaNetworkInstance_OperState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaNetworkInstance_OperState.
func (E_SrlNokiaNetworkInstance_OperState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaNetworkInstance_OperState.
func (e E_SrlNokiaNetworkInstance_OperState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaNetworkInstance_OperState")
}

const (
	// SrlNokiaNetworkInstance_OperState_UNSET corresponds to the value UNSET of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_UNSET E_SrlNokiaNetworkInstance_OperState = 0
	// SrlNokiaNetworkInstance_OperState_up corresponds to the value up of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_up E_SrlNokiaNetworkInstance_OperState = 2
	// SrlNokiaNetworkInstance_OperState_down corresponds to the value down of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_down E_SrlNokiaNetworkInstance_OperState = 3
	// SrlNokiaNetworkInstance_OperState_empty corresponds to the value empty of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_empty E_SrlNokiaNetworkInstance_OperState = 4
	// SrlNokiaNetworkInstance_OperState_downloading corresponds to the value downloading of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_downloading E_SrlNokiaNetworkInstance_OperState = 5
	// SrlNokiaNetworkInstance_OperState_booting corresponds to the value booting of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_booting E_SrlNokiaNetworkInstance_OperState = 6
	// SrlNokiaNetworkInstance_OperState_starting corresponds to the value starting of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_starting E_SrlNokiaNetworkInstance_OperState = 7
	// SrlNokiaNetworkInstance_OperState_failed corresponds to the value failed of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_failed E_SrlNokiaNetworkInstance_OperState = 8
	// SrlNokiaNetworkInstance_OperState_synchronizing corresponds to the value synchronizing of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_synchronizing E_SrlNokiaNetworkInstance_OperState = 9
	// SrlNokiaNetworkInstance_OperState_upgrading corresponds to the value upgrading of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_upgrading E_SrlNokiaNetworkInstance_OperState = 10
	// SrlNokiaNetworkInstance_OperState_low_power corresponds to the value low_power of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_low_power E_SrlNokiaNetworkInstance_OperState = 11
	// SrlNokiaNetworkInstance_OperState_degraded corresponds to the value degraded of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_degraded E_SrlNokiaNetworkInstance_OperState = 12
	// SrlNokiaNetworkInstance_OperState_warm_reboot corresponds to the value warm_reboot of SrlNokiaNetworkInstance_OperState
	SrlNokiaNetworkInstance_OperState_warm_reboot E_SrlNokiaNetworkInstance_OperState = 13
)


// E_SrlNokiaPolicyTypes_BgpWellKnownCommunity is a derived int64 type which is used to represent
// the enumerated node SrlNokiaPolicyTypes_BgpWellKnownCommunity. An additional value named
// SrlNokiaPolicyTypes_BgpWellKnownCommunity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaPolicyTypes_BgpWellKnownCommunity int64

// IsYANGGoEnum ensures that SrlNokiaPolicyTypes_BgpWellKnownCommunity implements the yang.GoEnum
// interface. This ensures that SrlNokiaPolicyTypes_BgpWellKnownCommunity can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaPolicyTypes_BgpWellKnownCommunity.
func (E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaPolicyTypes_BgpWellKnownCommunity.
func (e E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaPolicyTypes_BgpWellKnownCommunity")
}

const (
	// SrlNokiaPolicyTypes_BgpWellKnownCommunity_UNSET corresponds to the value UNSET of SrlNokiaPolicyTypes_BgpWellKnownCommunity
	SrlNokiaPolicyTypes_BgpWellKnownCommunity_UNSET E_SrlNokiaPolicyTypes_BgpWellKnownCommunity = 0
	// SrlNokiaPolicyTypes_BgpWellKnownCommunity_no_advertise corresponds to the value no_advertise of SrlNokiaPolicyTypes_BgpWellKnownCommunity
	SrlNokiaPolicyTypes_BgpWellKnownCommunity_no_advertise E_SrlNokiaPolicyTypes_BgpWellKnownCommunity = 1
	// SrlNokiaPolicyTypes_BgpWellKnownCommunity_no_export corresponds to the value no_export of SrlNokiaPolicyTypes_BgpWellKnownCommunity
	SrlNokiaPolicyTypes_BgpWellKnownCommunity_no_export E_SrlNokiaPolicyTypes_BgpWellKnownCommunity = 2
	// SrlNokiaPolicyTypes_BgpWellKnownCommunity_no_export_subconfed corresponds to the value no_export_subconfed of SrlNokiaPolicyTypes_BgpWellKnownCommunity
	SrlNokiaPolicyTypes_BgpWellKnownCommunity_no_export_subconfed E_SrlNokiaPolicyTypes_BgpWellKnownCommunity = 3
)


// E_SrlNokiaPolicyTypes_PolOspfPathType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaPolicyTypes_PolOspfPathType. An additional value named
// SrlNokiaPolicyTypes_PolOspfPathType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaPolicyTypes_PolOspfPathType int64

// IsYANGGoEnum ensures that SrlNokiaPolicyTypes_PolOspfPathType implements the yang.GoEnum
// interface. This ensures that SrlNokiaPolicyTypes_PolOspfPathType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaPolicyTypes_PolOspfPathType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaPolicyTypes_PolOspfPathType.
func (E_SrlNokiaPolicyTypes_PolOspfPathType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaPolicyTypes_PolOspfPathType.
func (e E_SrlNokiaPolicyTypes_PolOspfPathType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaPolicyTypes_PolOspfPathType")
}

const (
	// SrlNokiaPolicyTypes_PolOspfPathType_UNSET corresponds to the value UNSET of SrlNokiaPolicyTypes_PolOspfPathType
	SrlNokiaPolicyTypes_PolOspfPathType_UNSET E_SrlNokiaPolicyTypes_PolOspfPathType = 0
	// SrlNokiaPolicyTypes_PolOspfPathType_type_1_ext corresponds to the value type_1_ext of SrlNokiaPolicyTypes_PolOspfPathType
	SrlNokiaPolicyTypes_PolOspfPathType_type_1_ext E_SrlNokiaPolicyTypes_PolOspfPathType = 1
	// SrlNokiaPolicyTypes_PolOspfPathType_type_2_ext corresponds to the value type_2_ext of SrlNokiaPolicyTypes_PolOspfPathType
	SrlNokiaPolicyTypes_PolOspfPathType_type_2_ext E_SrlNokiaPolicyTypes_PolOspfPathType = 2
)


// E_SrlNokiaRoutingPolicy_BgpFamilyType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaRoutingPolicy_BgpFamilyType. An additional value named
// SrlNokiaRoutingPolicy_BgpFamilyType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaRoutingPolicy_BgpFamilyType int64

// IsYANGGoEnum ensures that SrlNokiaRoutingPolicy_BgpFamilyType implements the yang.GoEnum
// interface. This ensures that SrlNokiaRoutingPolicy_BgpFamilyType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaRoutingPolicy_BgpFamilyType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaRoutingPolicy_BgpFamilyType.
func (E_SrlNokiaRoutingPolicy_BgpFamilyType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaRoutingPolicy_BgpFamilyType.
func (e E_SrlNokiaRoutingPolicy_BgpFamilyType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaRoutingPolicy_BgpFamilyType")
}

const (
	// SrlNokiaRoutingPolicy_BgpFamilyType_UNSET corresponds to the value UNSET of SrlNokiaRoutingPolicy_BgpFamilyType
	SrlNokiaRoutingPolicy_BgpFamilyType_UNSET E_SrlNokiaRoutingPolicy_BgpFamilyType = 0
	// SrlNokiaRoutingPolicy_BgpFamilyType_evpn corresponds to the value evpn of SrlNokiaRoutingPolicy_BgpFamilyType
	SrlNokiaRoutingPolicy_BgpFamilyType_evpn E_SrlNokiaRoutingPolicy_BgpFamilyType = 1
	// SrlNokiaRoutingPolicy_BgpFamilyType_ipv4_unicast corresponds to the value ipv4_unicast of SrlNokiaRoutingPolicy_BgpFamilyType
	SrlNokiaRoutingPolicy_BgpFamilyType_ipv4_unicast E_SrlNokiaRoutingPolicy_BgpFamilyType = 2
	// SrlNokiaRoutingPolicy_BgpFamilyType_ipv6_unicast corresponds to the value ipv6_unicast of SrlNokiaRoutingPolicy_BgpFamilyType
	SrlNokiaRoutingPolicy_BgpFamilyType_ipv6_unicast E_SrlNokiaRoutingPolicy_BgpFamilyType = 3
)


// E_SrlNokiaRoutingPolicy_ComparisonOperatorType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaRoutingPolicy_ComparisonOperatorType. An additional value named
// SrlNokiaRoutingPolicy_ComparisonOperatorType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaRoutingPolicy_ComparisonOperatorType int64

// IsYANGGoEnum ensures that SrlNokiaRoutingPolicy_ComparisonOperatorType implements the yang.GoEnum
// interface. This ensures that SrlNokiaRoutingPolicy_ComparisonOperatorType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaRoutingPolicy_ComparisonOperatorType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaRoutingPolicy_ComparisonOperatorType.
func (E_SrlNokiaRoutingPolicy_ComparisonOperatorType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaRoutingPolicy_ComparisonOperatorType.
func (e E_SrlNokiaRoutingPolicy_ComparisonOperatorType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaRoutingPolicy_ComparisonOperatorType")
}

const (
	// SrlNokiaRoutingPolicy_ComparisonOperatorType_UNSET corresponds to the value UNSET of SrlNokiaRoutingPolicy_ComparisonOperatorType
	SrlNokiaRoutingPolicy_ComparisonOperatorType_UNSET E_SrlNokiaRoutingPolicy_ComparisonOperatorType = 0
	// SrlNokiaRoutingPolicy_ComparisonOperatorType_eq corresponds to the value eq of SrlNokiaRoutingPolicy_ComparisonOperatorType
	SrlNokiaRoutingPolicy_ComparisonOperatorType_eq E_SrlNokiaRoutingPolicy_ComparisonOperatorType = 1
	// SrlNokiaRoutingPolicy_ComparisonOperatorType_ge corresponds to the value ge of SrlNokiaRoutingPolicy_ComparisonOperatorType
	SrlNokiaRoutingPolicy_ComparisonOperatorType_ge E_SrlNokiaRoutingPolicy_ComparisonOperatorType = 2
	// SrlNokiaRoutingPolicy_ComparisonOperatorType_le corresponds to the value le of SrlNokiaRoutingPolicy_ComparisonOperatorType
	SrlNokiaRoutingPolicy_ComparisonOperatorType_le E_SrlNokiaRoutingPolicy_ComparisonOperatorType = 3
)


// E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber is a derived int64 type which is used to represent
// the enumerated node SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber. An additional value named
// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber int64

// IsYANGGoEnum ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber implements the yang.GoEnum
// interface. This ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber.
func (e E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber")
}

const (
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_UNSET corresponds to the value UNSET of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_UNSET E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber = 0
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_auto corresponds to the value auto of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_auto E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber = 2
)


// E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set is a derived int64 type which is used to represent
// the enumerated node SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set. An additional value named
// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set int64

// IsYANGGoEnum ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set implements the yang.GoEnum
// interface. This ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set.
func (e E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set")
}

const (
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_UNSET corresponds to the value UNSET of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_UNSET E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set = 0
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_igp corresponds to the value igp of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_igp E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set = 1
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_egp corresponds to the value egp of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_egp E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set = 2
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_incomplete corresponds to the value incomplete of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set_incomplete E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set = 3
)


// E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType is a derived int64 type which is used to represent
// the enumerated node SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType. An additional value named
// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType int64

// IsYANGGoEnum ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType implements the yang.GoEnum
// interface. This ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType.
func (E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType.
func (e E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType")
}

const (
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_UNSET corresponds to the value UNSET of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_UNSET E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType = 0
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_internal corresponds to the value internal of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_internal E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType = 1
	// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_external corresponds to the value external of SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType
	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType_external E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType = 2
)


// E_SrlNokiaSystem_System_TraceOptions is a derived int64 type which is used to represent
// the enumerated node SrlNokiaSystem_System_TraceOptions. An additional value named
// SrlNokiaSystem_System_TraceOptions_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_SrlNokiaSystem_System_TraceOptions int64

// IsYANGGoEnum ensures that SrlNokiaSystem_System_TraceOptions implements the yang.GoEnum
// interface. This ensures that SrlNokiaSystem_System_TraceOptions can be identified as a
// mapped type for a YANG enumeration.
func (E_SrlNokiaSystem_System_TraceOptions) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  SrlNokiaSystem_System_TraceOptions.
func (E_SrlNokiaSystem_System_TraceOptions) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_SrlNokiaSystem_System_TraceOptions.
func (e E_SrlNokiaSystem_System_TraceOptions) String() string {
	return ygot.EnumLogString(e, int64(e), "E_SrlNokiaSystem_System_TraceOptions")
}

const (
	// SrlNokiaSystem_System_TraceOptions_UNSET corresponds to the value UNSET of SrlNokiaSystem_System_TraceOptions
	SrlNokiaSystem_System_TraceOptions_UNSET E_SrlNokiaSystem_System_TraceOptions = 0
	// SrlNokiaSystem_System_TraceOptions_request corresponds to the value request of SrlNokiaSystem_System_TraceOptions
	SrlNokiaSystem_System_TraceOptions_request E_SrlNokiaSystem_System_TraceOptions = 1
	// SrlNokiaSystem_System_TraceOptions_response corresponds to the value response of SrlNokiaSystem_System_TraceOptions
	SrlNokiaSystem_System_TraceOptions_response E_SrlNokiaSystem_System_TraceOptions = 2
	// SrlNokiaSystem_System_TraceOptions_common corresponds to the value common of SrlNokiaSystem_System_TraceOptions
	SrlNokiaSystem_System_TraceOptions_common E_SrlNokiaSystem_System_TraceOptions = 3
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_SrlNokiaBgp_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaBridgeTableMacDuplication_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaBridgeTableMacLearning_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaBridgeTableMacLearning_OperState": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "empty"},
		5: {Name: "downloading"},
		6: {Name: "booting"},
		7: {Name: "starting"},
		8: {Name: "failed"},
		9: {Name: "synchronizing"},
		10: {Name: "upgrading"},
		11: {Name: "low-power"},
		12: {Name: "degraded"},
		13: {Name: "warm-reboot"},
	},
	"E_SrlNokiaCommon_IpRouteType": {
		1: {Name: "aggregate", DefiningModule: "srl_nokia-common"},
		2: {Name: "arp-nd", DefiningModule: "srl_nokia-common"},
		3: {Name: "bgp", DefiningModule: "srl_nokia-common"},
		4: {Name: "bgp-evpn", DefiningModule: "srl_nokia-common"},
		5: {Name: "dhcp", DefiningModule: "srl_nokia-common"},
		6: {Name: "host", DefiningModule: "srl_nokia-common"},
		7: {Name: "isis", DefiningModule: "srl_nokia-common"},
		8: {Name: "linux", DefiningModule: "srl_nokia-common"},
		9: {Name: "local", DefiningModule: "srl_nokia-common"},
		10: {Name: "ndk1", DefiningModule: "srl_nokia-common"},
		11: {Name: "ndk2", DefiningModule: "srl_nokia-common"},
		12: {Name: "ospfv2", DefiningModule: "srl_nokia-common"},
		13: {Name: "ospfv3", DefiningModule: "srl_nokia-common"},
		14: {Name: "static", DefiningModule: "srl_nokia-common"},
	},
	"E_SrlNokiaCommon_TunnelType": {
		1: {Name: "ldp", DefiningModule: "srl_nokia-common"},
		2: {Name: "sr-isis", DefiningModule: "srl_nokia-common"},
		3: {Name: "sr-mpls", DefiningModule: "srl_nokia-common"},
		4: {Name: "sr-ospfv2", DefiningModule: "srl_nokia-common"},
		5: {Name: "sr-ospfv3", DefiningModule: "srl_nokia-common"},
		6: {Name: "sr-policy-mpls", DefiningModule: "srl_nokia-common"},
		7: {Name: "vxlan", DefiningModule: "srl_nokia-common"},
	},
	"E_SrlNokiaIfIp_AddressOrigin": {
		2: {Name: "other"},
		3: {Name: "static"},
		4: {Name: "dhcp"},
		5: {Name: "link-layer"},
		6: {Name: "random"},
	},
	"E_SrlNokiaIfIp_AnycastGwMacOrigin": {
		2: {Name: "configured"},
		3: {Name: "vrid-auto-derived"},
	},
	"E_SrlNokiaIfIp_Ipv4AddressStatus": {
		2: {Name: "preferred"},
		3: {Name: "inaccessible"},
		4: {Name: "tentative"},
		5: {Name: "duplicate"},
	},
	"E_SrlNokiaIfIp_Ipv6AddressStatus": {
		2: {Name: "preferred"},
		3: {Name: "deprecated"},
		4: {Name: "invalid"},
		5: {Name: "inaccessible"},
		6: {Name: "unknown"},
		7: {Name: "tentative"},
		8: {Name: "duplicate"},
		9: {Name: "optimistic"},
	},
	"E_SrlNokiaInterfacesBridgeTable_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaInterfaces_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed": {
		1: {Name: "10G"},
		2: {Name: "25G"},
		3: {Name: "50G"},
		4: {Name: "100G"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode": {
		1: {Name: "full"},
		2: {Name: "half"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium": {
		1: {Name: "1000BASE-T"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed": {
		1: {Name: "10M"},
		2: {Name: "100M"},
		3: {Name: "1G"},
		4: {Name: "10G"},
		5: {Name: "25G"},
		6: {Name: "40G"},
		7: {Name: "50G"},
		8: {Name: "100G"},
		9: {Name: "200G"},
		10: {Name: "400G"},
		11: {Name: "1T"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling": {
		1: {Name: "power-off"},
		2: {Name: "lacp"},
	},
	"E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units": {
		1: {Name: "kbps"},
		2: {Name: "percentage"},
	},
	"E_SrlNokiaInterfaces_Interface_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action": {
		1: {Name: "use-net-instance-action"},
		2: {Name: "stop-learning"},
		3: {Name: "blackhole"},
		4: {Name: "oper-down"},
	},
	"E_SrlNokiaInterfaces_Interface_Subinterface_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType": {
		2: {Name: "SC"},
		3: {Name: "FC-STYLE1-COPPER"},
		4: {Name: "FC-STYLE2-COPPER"},
		5: {Name: "BNC-OR-TNC"},
		6: {Name: "FC-COAX"},
		7: {Name: "FIBER-JACK"},
		8: {Name: "LC"},
		9: {Name: "MT-RJ"},
		10: {Name: "MU"},
		11: {Name: "SG"},
		12: {Name: "OPTICAL-PIGTAIL"},
		13: {Name: "MPO-1x12"},
		14: {Name: "MPO-2x16"},
		15: {Name: "HSSDC"},
		16: {Name: "COPPER-PIGTAIL"},
		17: {Name: "RJ45"},
		18: {Name: "no-separable-connector"},
		19: {Name: "MXC-2x16"},
		20: {Name: "CS-OPTICAL-CONNECTOR"},
		21: {Name: "SN-OPTICAL-CONNECTOR"},
		22: {Name: "MPO-2x12"},
		23: {Name: "MPO-1x16"},
		24: {Name: "unknown"},
	},
	"E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor": {
		2: {Name: "CFP2"},
		3: {Name: "CFP2-ACO"},
		4: {Name: "CFP4"},
		5: {Name: "QSFP"},
		6: {Name: "QSFPplus"},
		7: {Name: "QSFP28"},
		8: {Name: "QSFPDD"},
		9: {Name: "SFP"},
		10: {Name: "SFPplus"},
		11: {Name: "Non-pluggable"},
		12: {Name: "Other"},
		13: {Name: "SFP28"},
	},
	"E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection": {
		1: {Name: "disabled"},
		2: {Name: "rs-528"},
		3: {Name: "rs-544"},
		4: {Name: "base-r"},
		5: {Name: "rs-108"},
	},
	"E_SrlNokiaInterfaces_PortOperDownReason": {
		1: {Name: "port-admin-disabled"},
		2: {Name: "mda-admin-disabled"},
		3: {Name: "transceiver-laser-disabled"},
		4: {Name: "loopback"},
		5: {Name: "port-not-present"},
		6: {Name: "mda-not-present"},
		7: {Name: "transceiver-not-present"},
		8: {Name: "phy-initializing"},
		9: {Name: "lower-layer-down"},
		10: {Name: "port-mtu-resource-exceeded"},
		11: {Name: "unsupported-speed"},
		12: {Name: "invalid-transceiver-fec"},
		13: {Name: "other"},
		14: {Name: "fabric-availability"},
		15: {Name: "no-active-links"},
		16: {Name: "min-link-threshold"},
		17: {Name: "port-9-12-speed-mismatch"},
		18: {Name: "lag-resource-exceeded"},
		19: {Name: "lag-member-resource-exceeded"},
		20: {Name: "standby-signaling"},
		21: {Name: "interface-hold-time-up-active"},
		22: {Name: "interface-reload-timer-active"},
		23: {Name: "connector-down"},
	},
	"E_SrlNokiaInterfaces_SiType": {
		1: {Name: "bridged", DefiningModule: "srl_nokia-interfaces"},
		2: {Name: "local-mirror-dest", DefiningModule: "srl_nokia-interfaces"},
		3: {Name: "routed", DefiningModule: "srl_nokia-interfaces"},
	},
	"E_SrlNokiaInterfaces_SubifOperDownReason": {
		1: {Name: "admin-disabled"},
		2: {Name: "port-down"},
		3: {Name: "ip-mtu-resource-exceeded"},
		4: {Name: "mpls-mtu-resource-exceeded"},
		5: {Name: "ip-mtu-too-large"},
		6: {Name: "mpls-mtu-too-large"},
		7: {Name: "l2-mtu-too-large"},
		8: {Name: "no-ip-config"},
		9: {Name: "ip-mtu-larger-than-oper-mac-vrf-mtu"},
		10: {Name: "irb-mac-address-not-programmed"},
		11: {Name: "missing-xdp-state"},
		12: {Name: "no-underlay-egress-next-hop-resources"},
		13: {Name: "other"},
	},
	"E_SrlNokiaInterfaces_TransceiverOperState": {
		1: {Name: "up"},
		2: {Name: "down"},
		3: {Name: "not-present"},
	},
	"E_SrlNokiaIpRouteTables_FibNexthopType": {
		1: {Name: "broadcast", DefiningModule: "srl_nokia-ip-route-tables"},
		2: {Name: "direct", DefiningModule: "srl_nokia-ip-route-tables"},
		3: {Name: "discard", DefiningModule: "srl_nokia-ip-route-tables"},
		4: {Name: "extract", DefiningModule: "srl_nokia-ip-route-tables"},
		5: {Name: "indirect", DefiningModule: "srl_nokia-ip-route-tables"},
		6: {Name: "reject", DefiningModule: "srl_nokia-ip-route-tables"},
		7: {Name: "static-mpls", DefiningModule: "srl_nokia-ip-route-tables"},
		8: {Name: "tunnel", DefiningModule: "srl_nokia-ip-route-tables"},
	},
	"E_SrlNokiaKeychains_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaKeychains_AlgorithmType": {
		1: {Name: "cleartext"},
		2: {Name: "md5"},
		3: {Name: "hmac-md5"},
		4: {Name: "hmac-sha-1"},
		5: {Name: "hmac-sha-256"},
		6: {Name: "aes-128-cmac"},
	},
	"E_SrlNokiaKeychains_KeychainType": {
		1: {Name: "tcp-md5"},
		2: {Name: "isis"},
		3: {Name: "ospf"},
		4: {Name: "tcp-ao"},
		5: {Name: "vrrp"},
	},
	"E_SrlNokiaNetworkInstance_AdminState": {
		2: {Name: "enable"},
		3: {Name: "disable"},
	},
	"E_SrlNokiaNetworkInstance_MulticastType": {
		2: {Name: "none"},
		3: {Name: "BUM"},
		4: {Name: "unknown-unicast"},
		5: {Name: "broadcast-mcast"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action": {
		1: {Name: "stop-learning"},
		2: {Name: "blackhole"},
		3: {Name: "oper-down"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason": {
		1: {Name: "admin-disabled"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name": {
		2: {Name: "dest-unreachable"},
		3: {Name: "packet-too-big"},
		4: {Name: "time-exceeded"},
		5: {Name: "param-problem"},
		129: {Name: "echo-request"},
		130: {Name: "echo-reply"},
		134: {Name: "rtr-solicitation"},
		135: {Name: "rtr-advertisement"},
		136: {Name: "nbr-solicitation"},
		137: {Name: "nbr-advertisement"},
		138: {Name: "redirect"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name": {
		1: {Name: "echo-reply"},
		4: {Name: "dest-unreachable"},
		6: {Name: "redirect"},
		9: {Name: "echo"},
		10: {Name: "rtr-advertisement"},
		11: {Name: "rtr-selection"},
		12: {Name: "time-exceeded"},
		13: {Name: "param-problem"},
		14: {Name: "timestamp"},
		15: {Name: "timestamp-reply"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason": {
		1: {Name: "ip-addr-missing"},
		2: {Name: "ip-addr-overlap"},
		3: {Name: "subif-down"},
		4: {Name: "net-inst-down"},
		5: {Name: "vrf-type-mismatch"},
		6: {Name: "mac-dup-detected"},
		7: {Name: "associated-mac-vrf-down"},
		8: {Name: "mac-vrf-association-missing"},
		9: {Name: "ip-vrf-association-missing"},
		10: {Name: "associated-ip-vrf-down"},
		11: {Name: "evpn-mh-standby"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason": {
		1: {Name: "routed"},
		2: {Name: "admin-disabled"},
		3: {Name: "mac-dup-detected"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode": {
		1: {Name: "disabled"},
		2: {Name: "delete"},
		3: {Name: "replace"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode": {
		1: {Name: "disabled"},
		2: {Name: "delete"},
		3: {Name: "replace"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier": {
		1: {Name: "detail"},
		2: {Name: "receive"},
		3: {Name: "send"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name": {
		1: {Name: "events"},
		2: {Name: "packets"},
		3: {Name: "open"},
		4: {Name: "keepalive"},
		5: {Name: "graceful-restart"},
		6: {Name: "timers"},
		7: {Name: "route"},
		8: {Name: "notification"},
		9: {Name: "socket"},
		10: {Name: "update"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState": {
		1: {Name: "waiting"},
		2: {Name: "started"},
		3: {Name: "partial"},
		4: {Name: "timeout"},
		5: {Name: "converged"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode": {
		1: {Name: "prefer"},
		2: {Name: "require"},
		3: {Name: "disabled"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities": {
		1: {Name: "MP_BGP"},
		2: {Name: "ROUTE_REFRESH"},
		3: {Name: "EXT_NH_ENCODING"},
		4: {Name: "GRACEFUL_RESTART"},
		5: {Name: "4-OCTET_ASN"},
		6: {Name: "ORF_SEND_EXCOMM"},
		7: {Name: "ORF_RECEIVE_EXCOMM"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode": {
		1: {Name: "disabled"},
		2: {Name: "delete"},
		3: {Name: "replace"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name": {
		1: {Name: "ipv4-unicast"},
		2: {Name: "ipv6-unicast"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent": {
		1: {Name: "none"},
		2: {Name: "start"},
		3: {Name: "stop"},
		4: {Name: "open"},
		5: {Name: "close"},
		6: {Name: "openFail"},
		7: {Name: "error"},
		8: {Name: "connectRetry"},
		9: {Name: "holdTime"},
		10: {Name: "keepAlive"},
		11: {Name: "recvOpen"},
		12: {Name: "recvKeepAlive"},
		13: {Name: "recvUpdate"},
		14: {Name: "recvNotify"},
		15: {Name: "startPassive"},
		16: {Name: "parseError"},
		17: {Name: "outOfMemory"},
		18: {Name: "rtmLimitExceed"},
		19: {Name: "outOfProtNHIndex"},
		20: {Name: "outOfNHIndex"},
		21: {Name: "labelAllocFailed"},
		22: {Name: "lspIdAllocFailed"},
		23: {Name: "collisionResolution"},
		24: {Name: "adminShutdown"},
		25: {Name: "adminReset"},
		26: {Name: "configChange"},
		27: {Name: "maxPrefixExceed"},
		28: {Name: "maxPfxExcdLog"},
		29: {Name: "trackingPolMismatch"},
		30: {Name: "receivedMalformedAttr"},
		31: {Name: "adminResetHard"},
		32: {Name: "peerDamping"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode": {
		1: {Name: "Message Header Error"},
		2: {Name: "Open Message Error"},
		3: {Name: "Update Message Error"},
		4: {Name: "Hold Timer Error"},
		5: {Name: "Finite State Machine Error"},
		6: {Name: "Cease"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode": {
		1: {Name: "Connection Not Synchronized"},
		2: {Name: "Bad Message Length"},
		3: {Name: "Bad Message Type"},
		4: {Name: "Unsupported Version Number"},
		5: {Name: "Bad Peer As"},
		6: {Name: "Bad BGP Identifier"},
		7: {Name: "Unsupported Optional Parameter"},
		8: {Name: "Unacceptable Hold Time"},
		9: {Name: "UPDATE Message Error subcodes"},
		10: {Name: "Malformed Attribute List"},
		11: {Name: "Unrecognized Well-known Attribute"},
		12: {Name: "Missing Well-known Attribute"},
		13: {Name: "Attribute Flags Error"},
		14: {Name: "Attribute Length Error"},
		15: {Name: "Invalid ORIGIN Attribute"},
		16: {Name: "Invalid NEXT_HOP Attribute"},
		17: {Name: "Optional Attribute Error"},
		18: {Name: "Invalid Network Field"},
		19: {Name: "Malformed AS_PATH"},
		20: {Name: "Maximum Number of Prefixes Reached"},
		21: {Name: "Administrative Shutdown"},
		22: {Name: "Peer De-configured"},
		23: {Name: "Administrative Reset"},
		24: {Name: "Connection Rejected"},
		25: {Name: "Other Configuration Change"},
		26: {Name: "Connection Collision Resolution"},
		27: {Name: "Out of Resources"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState": {
		1: {Name: "idle"},
		2: {Name: "connect"},
		3: {Name: "active"},
		4: {Name: "opensent"},
		5: {Name: "openconfirm"},
		6: {Name: "established"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi": {
		1: {Name: "ipv4-unicast"},
		2: {Name: "ipv6-unicast"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities": {
		1: {Name: "MP_BGP"},
		2: {Name: "ROUTE_REFRESH"},
		3: {Name: "EXT_NH_ENCODING"},
		4: {Name: "GRACEFUL_RESTART"},
		5: {Name: "4-OCTET_ASN"},
		6: {Name: "ORF_SEND_EXCOMM"},
		7: {Name: "ORF_RECEIVE_EXCOMM"},
		8: {Name: "ADD_PATH"},
		9: {Name: "LONG_LIVED_GR"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib": {
		1: {Name: "ipv4-unicast"},
		2: {Name: "ipv6-unicast"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib": {
		1: {Name: "ipv4-unicast"},
		2: {Name: "ipv6-unicast"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState": {
		1: {Name: "idle"},
		2: {Name: "connect"},
		3: {Name: "active"},
		4: {Name: "opensent"},
		5: {Name: "openconfirm"},
		6: {Name: "established"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer": {
		1: {Name: "yes"},
		2: {Name: "no"},
		3: {Name: "unknown"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState": {
		1: {Name: "up"},
		2: {Name: "down"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status": {
		1: {Name: "success"},
		2: {Name: "failed"},
		3: {Name: "pending"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved": {
		1: {Name: "true"},
		2: {Name: "false"},
		3: {Name: "not-applicable"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack": {
		4: {Name: "IMPLICIT_NULL"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason": {
		1: {Name: "system-interface-not-bound"},
		2: {Name: "system-interface-has-no-ipv4-address"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason": {
		1: {Name: "system-interface-not-bound"},
		2: {Name: "system-interface-has-no-ipv6-address"},
	},
	"E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason": {
		1: {Name: "vxlan-tunnel-down"},
		2: {Name: "net-inst-down"},
		3: {Name: "vxlan-if-default-net-inst-source-address-missing"},
		4: {Name: "vxlan-if-default-net-inst-source-if-down"},
		5: {Name: "vrf-type-mismatch"},
	},
	"E_SrlNokiaNetworkInstance_NiType": {
		1: {Name: "default", DefiningModule: "srl_nokia-network-instance"},
		2: {Name: "host", DefiningModule: "srl_nokia-network-instance"},
		3: {Name: "ip-vrf", DefiningModule: "srl_nokia-network-instance"},
		4: {Name: "mac-vrf", DefiningModule: "srl_nokia-network-instance"},
	},
	"E_SrlNokiaNetworkInstance_OperState": {
		2: {Name: "up"},
		3: {Name: "down"},
		4: {Name: "empty"},
		5: {Name: "downloading"},
		6: {Name: "booting"},
		7: {Name: "starting"},
		8: {Name: "failed"},
		9: {Name: "synchronizing"},
		10: {Name: "upgrading"},
		11: {Name: "low-power"},
		12: {Name: "degraded"},
		13: {Name: "warm-reboot"},
	},
	"E_SrlNokiaPolicyTypes_BgpWellKnownCommunity": {
		1: {Name: "no-advertise", DefiningModule: "srl_nokia-policy-types"},
		2: {Name: "no-export", DefiningModule: "srl_nokia-policy-types"},
		3: {Name: "no-export-subconfed", DefiningModule: "srl_nokia-policy-types"},
	},
	"E_SrlNokiaPolicyTypes_PolOspfPathType": {
		1: {Name: "type-1-ext", DefiningModule: "srl_nokia-policy-types"},
		2: {Name: "type-2-ext", DefiningModule: "srl_nokia-policy-types"},
	},
	"E_SrlNokiaRoutingPolicy_BgpFamilyType": {
		1: {Name: "evpn", DefiningModule: "srl_nokia-common"},
		2: {Name: "ipv4-unicast", DefiningModule: "srl_nokia-common"},
		3: {Name: "ipv6-unicast", DefiningModule: "srl_nokia-common"},
	},
	"E_SrlNokiaRoutingPolicy_ComparisonOperatorType": {
		1: {Name: "eq"},
		2: {Name: "ge"},
		3: {Name: "le"},
	},
	"E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber": {
		2: {Name: "auto"},
	},
	"E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set": {
		1: {Name: "igp"},
		2: {Name: "egp"},
		3: {Name: "incomplete"},
	},
	"E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType": {
		1: {Name: "internal"},
		2: {Name: "external"},
	},
	"E_SrlNokiaSystem_System_TraceOptions": {
		1: {Name: "request"},
		2: {Name: "response"},
		3: {Name: "common"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x6b, 0x77, 0xe3, 0x46,
		0x72, 0xf6, 0x77, 0xff, 0x0a, 0x2c, 0x93, 0x3d, 0x22, 0xd7, 0xd3, 0x12, 0x49, 0x51, 0xd4, 0x25,
		0x67, 0x8e, 0x33, 0xb6, 0xc7, 0x59, 0x9f, 0x9d, 0xb1, 0x7d, 0x6c, 0xbf, 0xf9, 0xb0, 0x12, 0x33,
		0x69, 0x02, 0x4d, 0x12, 0x31, 0x6e, 0x69, 0x34, 0x74, 0xf1, 0x8c, 0xf2, 0xdb, 0xdf, 0x03, 0xf0,
		0x7e, 0x47, 0x5f, 0x40, 0x82, 0xe4, 0xb3, 0x27, 0xb1, 0x34, 0x22, 0xba, 0x09, 0x34, 0xaa, 0xea,
		0x79, 0xaa, 0xba, 0xaa, 0xfa, 0xf3, 0x57, 0x96, 0x65, 0x59, 0x95, 0x9f, 0xa8, 0xcf, 0x2a, 0x77,
		0x56, 0xc5, 0x61, 0x8f, 0xae, 0xcd, 0x2a, 0x6f, 0x86, 0x7f, 0xfd, 0x87, 0x1b, 0x38, 0x95, 0x3b,
		0xab, 0x31, 0xfa, 0xe7, 0x77, 0x61, 0xd0, 0x73, 0xfb, 0x95, 0x3b, 0xab, 0x3e, 0xfa, 0xc3, 0xf7,
		0x2e, 0xaf, 0xdc, 0x59, 0xc3, 0x29, 0xb2, 0x3f, 0xb8, 0x81, 0x60, 0xbc, 0x47, 0x6d, 0x36, 0xf7,
		0xe7, 0xb9, 0x6f, 0x98, 0x5e, 0xf2, 0x66, 0xfe, 0x82, 0xf9, 0x2f, 0x9b, 0xfc, 0x79, 0xf1, 0x4b,
		0x27, 0x1f, 0xfc, 0xc2, 0x59, 0xcf, 0x7d, 0x5e, 0xfa, 0xa2, 0xb9, 0x2f, 0x8b, 0xb9, 0xf7, 0x29,
		0x08, 0xff, 0x70, 0x29, 0x71, 0x7b, 0x0b, 0xdf, 0x97, 0x5d, 0xf7, 0x5b, 0x98, 0xf0, 0x15, 0x37,
		0x3b, 0xbd, 0x27, 0xf6, 0xf2, 0x14, 0xf2, 0xf4, 0xb6, 0x2a, 0xd1, 0xf0, 0xeb, 0xde, 0xac, 0xbe,
		0xf0, 0xef, 0x34, 0x7e, 0xc7, 0xfb, 0x89, 0xcf, 0x02, 0x51, 0xb9, 0xb3, 0x04, 0x4f, 0xd8, 0x9a,
		0x0b, 0x67, 0xae, 0x9a, 0xbf, 0xbb, 0xa5, 0xcb, 0x5f, 0xe7, 0xfe, 0xf2, 0xba, 0xf0, 0xf4, 0x8b,
		0x4b, 0x3f, 0xf9, 0x80, 0x3a, 0xbe, 0x1b, 0x90, 0x58, 0x50, 0xb1, 0xe1, 0xb9, 0xc6, 0xeb, 0x33,
		0x7b, 0xf1, 0x9a, 0x1b, 0xfe, 0x9e, 0xf5, 0x68, 0xe2, 0xa5, 0xf7, 0x7b, 0xbf, 0xf2, 0x82, 0xec,
		0x22, 0x16, 0xd0, 0xae, 0xc7, 0x2a, 0x2b, 0x2f, 0xe8, 0xac, 0x99, 0x78, 0xf4, 0xbe, 0xeb, 0x6b,
		0x3e, 0x5e, 0xf7, 0xde, 0xf3, 0xbc, 0x7f, 0x59, 0x39, 0xc8, 0x2b, 0x0f, 0xd2, 0x72, 0x21, 0x2d,
		0x1f, 0x0a, 0x72, 0xb2, 0x5a, 0x5e, 0xd6, 0xc8, 0xcd, 0x64, 0xfe, 0xdf, 0x5f, 0x22, 0x96, 0x6f,
		0xed, 0xb6, 0xcb, 0xc8, 0x9c, 0xfa, 0xb6, 0x36, 0x5c, 0xf3, 0x3e, 0x48, 0xfc, 0xf4, 0x4b, 0xe5,
		0x6e, 0xf5, 0xfd, 0xb3, 0x88, 0x37, 0x8a, 0x5f, 0xfe, 0x97, 0x35, 0x5d, 0x49, 0xf6, 0x2c, 0xee,
		0xe2, 0x41, 0xf8, 0x44, 0x5c, 0x3f, 0x0a, 0xb9, 0xa0, 0x81, 0xcd, 0x0a, 0x7d, 0x87, 0x03, 0xb7,
		0x3f, 0x90, 0x7d, 0x77, 0xeb, 0x34, 0x87, 0x3d, 0x0b, 0x4e, 0x49, 0x12, 0xc4, 0x22, 0xd3, 0xba,
		0x8d, 0x6f, 0xd1, 0x4f, 0xe2, 0xcd, 0xba, 0xbb, 0x7d, 0x01, 0xe7, 0xa4, 0xa1, 0x5a, 0x3d, 0xb7,
		0xde, 0x5a, 0x67, 0x43, 0x85, 0x3f, 0xab, 0x59, 0x34, 0x70, 0xac, 0x58, 0x50, 0x2e, 0x62, 0xf2,
		0xe4, 0x8a, 0x41, 0xf5, 0xfc, 0xfc, 0x62, 0x56, 0x5c, 0xef, 0x02, 0xea, 0xb3, 0x37, 0xd6, 0x59,
		0xfc, 0x12, 0x0b, 0xe6, 0xd7, 0xcf, 0x6a, 0x35, 0x2b, 0xe4, 0x56, 0x10, 0x8a, 0xaa, 0xd4, 0xa0,
		0x2d, 0xaf, 0x66, 0x28, 0x26, 0x9c, 0x87, 0xfc, 0x23, 0x8b, 0x63, 0xda, 0xdf, 0xae, 0xc1, 0x9b,
		0xa4, 0xdc, 0x4a, 0xd7, 0xcc, 0xea, 0x32, 0x6b, 0x64, 0xd5, 0xde, 0xe4, 0x9b, 0x29, 0xa7, 0xed,
		0x58, 0x27, 0x9a, 0x2c, 0xbd, 0x7d, 0xe2, 0x8f, 0xee, 0xff, 0x4d, 0xfe, 0x39, 0x64, 0xc5, 0x72,
		0xad, 0x88, 0x6e, 0x58, 0x82, 0x5c, 0x13, 0xbe, 0x7e, 0xa5, 0x77, 0xc5, 0xfa, 0x4f, 0x3b, 0x1b,
		0x6c, 0x0a, 0x67, 0x3d, 0xc6, 0x59, 0x90, 0xad, 0xbc, 0x31, 0x29, 0xff, 0xf5, 0x87, 0xef, 0xac,
		0xe6, 0x4d, 0xfb, 0xf2, 0xce, 0xfa, 0x7d, 0xc0, 0xac, 0x1f, 0xc7, 0x94, 0x25, 0xb6, 0xfe, 0x83,
		0x87, 0x49, 0x64, 0x7d, 0xfc, 0xf1, 0x5b, 0x8b, 0x58, 0x6e, 0xef, 0x5d, 0xba, 0x62, 0xbf, 0x09,
		0x2a, 0x92, 0x38, 0x8f, 0x84, 0x4a, 0x4a, 0xc8, 0xac, 0x74, 0x4c, 0x9f, 0x32, 0xa7, 0x34, 0xaa,
		0x4a, 0xc5, 0x9c, 0x44, 0x28, 0x2c, 0x43, 0x71, 0x32, 0xf0, 0x55, 0xbe, 0xeb, 0x57, 0xa0, 0x48,
		0xa5, 0xcb, 0x19, 0xfd, 0x23, 0x4c, 0x04, 0xf1, 0x43, 0x27, 0x07, 0x2b, 0x9a, 0xbf, 0x7c, 0x33,
		0x7d, 0x69, 0x80, 0xbe, 0xec, 0x83, 0xbe, 0xac, 0xa3, 0xbf, 0x93, 0x0b, 0xec, 0x01, 0x0d, 0x02,
		0xe6, 0x91, 0x38, 0x62, 0xcc, 0xd9, 0xbe, 0x22, 0xe3, 0x95, 0x9e, 0x1f, 0xb6, 0xe5, 0x21, 0x37,
		0x33, 0xd8, 0x65, 0x51, 0x68, 0x6e, 0xb9, 0x30, 0x87, 0x48, 0xa8, 0x8a, 0x86, 0x09, 0x1b, 0x94,
		0x4b, 0x54, 0xcc, 0x1a, 0xa0, 0x7c, 0xa2, 0x93, 0xd3, 0xb4, 0x6c, 0x59, 0xfd, 0xad, 0x8c, 0x78,
		0x69, 0xed, 0x59, 0x90, 0xf8, 0x8c, 0x53, 0xe1, 0x86, 0x41, 0x9e, 0xa5, 0xcf, 0xc1, 0x90, 0x73,
		0x32, 0xe5, 0xed, 0x0f, 0xbc, 0xe1, 0x61, 0x2b, 0x41, 0xe2, 0x93, 0x91, 0x9c, 0xc7, 0xf9, 0x35,
		0x63, 0x6e, 0x14, 0x14, 0x03, 0x8a, 0xb1, 0x61, 0xed, 0x13, 0x37, 0x10, 0x37, 0x12, 0x2a, 0x71,
		0x95, 0xe3, 0xd2, 0x5f, 0x69, 0xd0, 0xdf, 0xce, 0xf1, 0xf2, 0x73, 0xbd, 0xc9, 0xc4, 0x1f, 0xdd,
		0x40, 0x8a, 0xb4, 0x67, 0x83, 0xfe, 0x93, 0x7a, 0x09, 0x5b, 0x0f, 0xff, 0x6b, 0xc7, 0xfd, 0xc0,
		0xa9, 0x9d, 0xda, 0x8b, 0xef, 0xdd, 0xbe, 0x9b, 0x79, 0xb5, 0x75, 0xc9, 0x09, 0x7e, 0x62, 0x7d,
		0x2a, 0xdc, 0xc7, 0xf4, 0xbb, 0x7b, 0xd4, 0x8b, 0x59, 0xee, 0xd1, 0xaf, 0x12, 0x5e, 0xc1, 0x47,
		0xfa, 0xac, 0xb1, 0x24, 0xf5, 0xc3, 0x59, 0x13, 0x43, 0x7e, 0x4d, 0x47, 0xd5, 0x4a, 0x4b, 0x71,
		0x1e, 0x19, 0xb7, 0xdf, 0xed, 0x91, 0x1e, 0xa3, 0x22, 0xe1, 0x46, 0xdd, 0xa2, 0xa9, 0xd5, 0x49,
		0x27, 0xbf, 0x8b, 0x42, 0x2e, 0xc8, 0x98, 0x2c, 0x17, 0x6c, 0x63, 0x67, 0x1e, 0x68, 0x3f, 0x76,
		0x76, 0xc5, 0x13, 0xef, 0xc5, 0xdf, 0x35, 0x1d, 0xd0, 0xe1, 0x8c, 0xf8, 0x54, 0xd8, 0x6b, 0x83,
		0x30, 0x4c, 0x0c, 0x18, 0x0f, 0x98, 0x20, 0x8d, 0x8b, 0xfb, 0x4b, 0x72, 0xdb, 0x39, 0xcb, 0x22,
		0x38, 0x12, 0xa3, 0x1a, 0xf7, 0x75, 0x95, 0x61, 0xcd, 0xd1, 0x30, 0xb9, 0x51, 0x97, 0xf7, 0x75,
		0x72, 0xd9, 0x39, 0xdb, 0x41, 0xc0, 0xe8, 0xdb, 0x91, 0x14, 0x58, 0x41, 0x28, 0xac, 0x38, 0x89,
		0x52, 0xd1, 0x60, 0x8e, 0xd5, 0x0b, 0xb9, 0x25, 0x06, 0x6e, 0x6c, 0xa5, 0xff, 0x4e, 0x1f, 0x99,
		0x8a, 0xe1, 0xbf, 0x3d, 0xf6, 0xc8, 0xbc, 0x93, 0x89, 0x25, 0xa9, 0xad, 0x4e, 0x89, 0xc3, 0x4c,
		0x11, 0x67, 0xb1, 0xe9, 0x28, 0xd3, 0x90, 0xff, 0x26, 0x9c, 0xc5, 0x96, 0x18, 0x30, 0xcb, 0x0e,
		0x83, 0x80, 0xd9, 0x22, 0xe4, 0xd9, 0x32, 0x8d, 0xad, 0x8c, 0xb5, 0x21, 0x08, 0x61, 0x90, 0xc0,
		0xc6, 0x3b, 0x0f, 0x2e, 0x49, 0x3c, 0xfd, 0xae, 0x83, 0x4a, 0xeb, 0xf6, 0xee, 0x82, 0x20, 0x14,
		0x43, 0x77, 0x6f, 0x23, 0xf8, 0xc6, 0xf6, 0x80, 0xf9, 0x34, 0xa2, 0x62, 0x90, 0x3e, 0xe7, 0xac,
		0xc9, 0x9a, 0x44, 0xd0, 0x2e, 0x26, 0xbf, 0x5e, 0xe4, 0x89, 0x36, 0x0d, 0xa7, 0x15, 0x3c, 0xb1,
		0x45, 0x30, 0x12, 0x9e, 0xdf, 0xb8, 0xf7, 0x53, 0x3a, 0xe9, 0x34, 0x2a, 0xf7, 0x69, 0xf2, 0xeb,
		0xa7, 0xb1, 0xfa, 0x7d, 0x5c, 0xbb, 0x7a, 0xf9, 0x02, 0x67, 0x0e, 0x8b, 0x6d, 0xee, 0x46, 0x1b,
		0x1f, 0x79, 0x66, 0xef, 0x78, 0x7a, 0x31, 0xf6, 0xfc, 0x0e, 0x7a, 0xcf, 0x6f, 0xfb, 0xab, 0x9c,
		0x8b, 0x68, 0xdc, 0x6c, 0xb8, 0xe6, 0x03, 0x0b, 0xfa, 0x99, 0x22, 0x68, 0x9b, 0x4d, 0x19, 0x47,
		0x4d, 0xd6, 0x41, 0x53, 0x76, 0x42, 0xe4, 0x9d, 0x8f, 0x1c, 0x8e, 0x98, 0x94, 0x03, 0x36, 0x79,
		0xd4, 0xe6, 0xd5, 0x55, 0xf9, 0x1e, 0xb6, 0x00, 0x28, 0xfe, 0x85, 0x0a, 0xc1, 0x78, 0xb0, 0x55,
		0xa4, 0x2a, 0xf7, 0xef, 0xc8, 0x3f, 0x29, 0xf9, 0xb3, 0x4e, 0x6e, 0xad, 0xbf, 0xfc, 0xfb, 0xbf,
		0xfc, 0xeb, 0x5f, 0xff, 0xeb, 0x21, 0xa9, 0xd7, 0x9b, 0xed, 0x6a, 0xed, 0xcb, 0xd7, 0x6f, 0xff,
		0xfb, 0xff, 0xce, 0xdf, 0x9c, 0x5d, 0x7c, 0xba, 0xfb, 0xb7, 0x6f, 0x48, 0xe7, 0x6f, 0x15, 0x43,
		0x00, 0x21, 0xe3, 0xa1, 0xed, 0x75, 0xdf, 0xca, 0x73, 0xe9, 0x69, 0xef, 0x58, 0x65, 0x0b, 0x50,
		0xca, 0xbd, 0xaa, 0xb1, 0x33, 0xb3, 0x1d, 0x6f, 0x27, 0x57, 0x62, 0x87, 0xea, 0x10, 0x77, 0xa8,
		0x68, 0xbf, 0xcf, 0x53, 0x73, 0xca, 0x88, 0x2b, 0xb1, 0x41, 0x35, 0x37, 0xca, 0x70, 0x18, 0xbe,
		0x8e, 0x30, 0xfc, 0x51, 0x85, 0xe1, 0x3d, 0x46, 0x7b, 0x9c, 0xf5, 0x64, 0xf6, 0xa6, 0xae, 0x73,
		0x5c, 0xfb, 0xcb, 0x0a, 0xc7, 0xa6, 0x77, 0x37, 0x75, 0x68, 0x96, 0x42, 0x34, 0x15, 0xad, 0xe7,
		0x96, 0x00, 0x55, 0x95, 0xf0, 0xa7, 0xc2, 0x8e, 0xc1, 0x9a, 0x70, 0xa8, 0x47, 0xfb, 0x32, 0xb1,
		0x16, 0x85, 0x18, 0x8f, 0x76, 0x50, 0xd4, 0x48, 0xa0, 0x67, 0x5b, 0x90, 0x34, 0x5d, 0x87, 0xdd,
		0x87, 0xe0, 0x73, 0x08, 0x6e, 0xae, 0xd0, 0xa9, 0x86, 0x3c, 0x04, 0xa1, 0xa8, 0x9e, 0x9f, 0x5f,
		0x9c, 0x9f, 0x5f, 0xfc, 0x6f, 0x18, 0xd7, 0x64, 0x64, 0x41, 0x29, 0x14, 0xb9, 0xf4, 0xfd, 0xff,
		0x1b, 0xc6, 0x96, 0x3d, 0x8a, 0xaa, 0x64, 0x61, 0x0a, 0xcb, 0x8d, 0x17, 0x02, 0x70, 0x61, 0x60,
		0x7d, 0x78, 0xf7, 0x1f, 0x96, 0xcf, 0xfc, 0x2e, 0xe3, 0x59, 0x14, 0x2e, 0x96, 0x15, 0x1d, 0x45,
		0xb9, 0x35, 0x15, 0xa3, 0x34, 0x26, 0xc2, 0x4b, 0x62, 0xac, 0xb8, 0x7c, 0x52, 0x5f, 0xfa, 0x6a,
		0x5a, 0x31, 0xde, 0x14, 0x29, 0xcc, 0xe9, 0xa2, 0x56, 0x6b, 0xd6, 0x5b, 0x6b, 0x28, 0xd5, 0x5e,
		0x18, 0x46, 0x5d, 0x6a, 0xff, 0x91, 0x45, 0xaa, 0xac, 0x90, 0x0f, 0x7d, 0xc0, 0x75, 0x17, 0xec,
		0x41, 0x01, 0xe6, 0x6f, 0x90, 0x06, 0x8e, 0x35, 0x4b, 0x97, 0x2c, 0x9b, 0x06, 0xd9, 0xfb, 0xec,
		0xb2, 0xc9, 0x7b, 0x66, 0x8e, 0x25, 0xc2, 0x7e, 0xc6, 0xa4, 0xa1, 0x07, 0x23, 0x3d, 0xd0, 0x5b,
		0xc5, 0x23, 0x56, 0x87, 0xa1, 0x90, 0xfb, 0x22, 0xb1, 0x1e, 0x92, 0x7a, 0xfd, 0x92, 0xbd, 0xb5,
		0xea, 0x7b, 0x10, 0xf2, 0xf4, 0xfb, 0x21, 0xda, 0x6a, 0xa2, 0xad, 0xb2, 0x76, 0xa7, 0x63, 0xdf,
		0x1f, 0x3d, 0x1a, 0x10, 0x41, 0xfb, 0x7d, 0x37, 0xe8, 0xaf, 0x32, 0xef, 0xb3, 0x9f, 0xef, 0x41,
		0xf0, 0xe7, 0x6e, 0x0f, 0x1a, 0xa0, 0xa6, 0x01, 0x5a, 0x8b, 0x78, 0xf4, 0xb6, 0x7d, 0x1c, 0x52,
		0xbb, 0x70, 0x92, 0xc8, 0x63, 0xcf, 0xfb, 0xe2, 0x31, 0x33, 0xdf, 0x0e, 0x41, 0x57, 0x14, 0x74,
		0x9d, 0x35, 0x3c, 0x1d, 0x93, 0x3f, 0x11, 0xf8, 0x9e, 0x17, 0x3e, 0x11, 0x3b, 0x0c, 0x04, 0x0f,
		0xbd, 0x0b, 0xce, 0x6c, 0xe6, 0x3e, 0xae, 0xa4, 0xf8, 0x1b, 0x07, 0xec, 0x41, 0x55, 0x66, 0x6f,
		0xc3, 0x1a, 0xdf, 0x37, 0x74, 0x46, 0x4d, 0x67, 0x8c, 0x2c, 0xe6, 0xa9, 0x2b, 0x8f, 0xe0, 0x34,
		0x88, 0x7d, 0x57, 0xe4, 0xd7, 0x9e, 0xf1, 0x88, 0x7d, 0xab, 0xcf, 0xe4, 0xce, 0xa1, 0x3f, 0x06,
		0xf4, 0x47, 0x79, 0x35, 0x8f, 0x54, 0x81, 0xd6, 0x6c, 0x17, 0xdc, 0x2f, 0x6d, 0x17, 0xbc, 0x3d,
		0xef, 0x5c, 0x78, 0xb4, 0x7f, 0x31, 0x8c, 0xb2, 0xe5, 0x2a, 0xc5, 0x2a, 0xc2, 0xcd, 0x9e, 0xf9,
		0xf6, 0x49, 0x39, 0xec, 0xcc, 0xeb, 0x0a, 0x03, 0x8b, 0xc6, 0x71, 0x68, 0xbb, 0x54, 0xb0, 0x85,
		0xf7, 0xbb, 0xae, 0xc5, 0xc5, 0x09, 0xfb, 0xdd, 0x26, 0x16, 0xf3, 0xe8, 0xbd, 0x8f, 0xb9, 0x4c,
		0xc0, 0x3d, 0x80, 0xc1, 0xdc, 0xba, 0xa7, 0x06, 0x6a, 0x12, 0x0d, 0xef, 0x7a, 0xcc, 0x7a, 0x1a,
		0xb0, 0xc0, 0x9a, 0xbb, 0x45, 0xcb, 0x8d, 0x47, 0x05, 0xe2, 0x0e, 0x24, 0x7d, 0x5c, 0x44, 0xaf,
		0xb1, 0x86, 0xa7, 0xe3, 0x5e, 0xc7, 0x82, 0x06, 0x4e, 0xf7, 0x85, 0xc4, 0x6e, 0x3f, 0xa0, 0xde,
		0x7e, 0xc2, 0x49, 0x4b, 0xf7, 0xb0, 0x12, 0xa8, 0xc1, 0x7a, 0xb6, 0x8a, 0xbc, 0xf6, 0x42, 0xee,
		0x57, 0xee, 0x8b, 0xab, 0xee, 0xda, 0x90, 0x07, 0x45, 0x13, 0x11, 0x92, 0x80, 0xf5, 0x43, 0xe1,
		0x6e, 0x6a, 0xd4, 0xb4, 0x6c, 0xa2, 0xe7, 0xc7, 0x21, 0x01, 0x08, 0x09, 0x40, 0x1b, 0xd6, 0xbe,
		0x1b, 0x86, 0x1e, 0xa3, 0x52, 0xc5, 0xe9, 0x8d, 0xd3, 0xc8, 0xd5, 0x89, 0x3c, 0x2a, 0x7a, 0x21,
		0xf7, 0xc9, 0x75, 0xb3, 0x59, 0x27, 0x4e, 0x03, 0x89, 0x3b, 0xab, 0x16, 0xe5, 0x24, 0xb3, 0x78,
		0x66, 0xab, 0x0d, 0x73, 0xd4, 0x44, 0x36, 0x56, 0x16, 0x37, 0xe6, 0x1a, 0x78, 0xd9, 0x59, 0x53,
		0x1a, 0xb9, 0x7d, 0x74, 0xeb, 0xbe, 0x4e, 0x6e, 0xf2, 0xd5, 0x39, 0x9a, 0x76, 0x12, 0x66, 0x11,
		0xc8, 0x0d, 0x83, 0xe5, 0x0c, 0x99, 0xac, 0xa0, 0x0f, 0x3e, 0xf0, 0x92, 0x67, 0x20, 0xbb, 0x70,
		0xf0, 0x77, 0x77, 0x29, 0xca, 0x0c, 0x1e, 0xaf, 0x01, 0xb9, 0x66, 0x87, 0xe5, 0xf3, 0xee, 0x85,
		0xfb, 0xcf, 0xec, 0x4c, 0xe6, 0x27, 0xfe, 0xb3, 0x83, 0xc0, 0xfa, 0xc1, 0xfa, 0x37, 0xac, 0xfd,
		0xfe, 0xdb, 0x52, 0xc1, 0x4b, 0x80, 0x97, 0x00, 0x2f, 0xe1, 0x94, 0xbd, 0x84, 0xd9, 0xec, 0x1b,
		0x38, 0x08, 0xf9, 0xf4, 0x4c, 0x66, 0xcd, 0xe0, 0x1b, 0xec, 0x58, 0x80, 0xe1, 0x18, 0x68, 0xcb,
		0x33, 0xbc, 0x82, 0x4d, 0x5e, 0xc1, 0x6c, 0xee, 0x48, 0x7e, 0xb7, 0x60, 0x6e, 0x54, 0x3e, 0xbf,
		0xa0, 0x01, 0xbf, 0xe0, 0x18, 0xfc, 0x82, 0x6d, 0xf5, 0xe5, 0x93, 0x0b, 0x47, 0x79, 0x7c, 0xf2,
		0x1d, 0xce, 0xc6, 0x03, 0x73, 0x2e, 0x44, 0x3e, 0xb7, 0x53, 0x5a, 0xcc, 0x54, 0xc4, 0x4d, 0x57,
		0xec, 0x4c, 0x92, 0x78, 0x29, 0x31, 0x2c, 0x9a, 0xc0, 0xe7, 0x11, 0xcb, 0x42, 0xb8, 0x40, 0x7e,
		0x37, 0x56, 0x63, 0x13, 0x6b, 0xc9, 0xd2, 0x35, 0x8c, 0x3e, 0x82, 0x82, 0xdb, 0xaa, 0xe6, 0x8e,
		0xc8, 0x13, 0xa8, 0x65, 0x81, 0x9f, 0x3f, 0x5d, 0x63, 0xbd, 0xb7, 0xe0, 0xf7, 0x7d, 0x31, 0x74,
		0x2d, 0x72, 0x0f, 0x19, 0x3b, 0x18, 0x92, 0xc3, 0x3c, 0xda, 0x97, 0xf2, 0x44, 0xcc, 0x10, 0xba,
		0x8d, 0x88, 0x39, 0xc9, 0x71, 0x36, 0xeb, 0xa2, 0x98, 0xa0, 0x76, 0x45, 0x50, 0x3c, 0xa3, 0x54,
		0x6f, 0xa5, 0xa5, 0x51, 0x5a, 0x5c, 0xa5, 0xaf, 0x7e, 0xfd, 0xaa, 0xd8, 0x11, 0xaf, 0x6f, 0x76,
		0xa5, 0xaa, 0x53, 0x9f, 0x47, 0xc7, 0xed, 0xd9, 0xb5, 0xb6, 0x14, 0xe6, 0x0f, 0x41, 0x79, 0x74,
		0xd6, 0xba, 0x9c, 0xba, 0x94, 0xfb, 0xea, 0x8e, 0xa9, 0x0e, 0xb0, 0x39, 0x5c, 0x8b, 0x71, 0x7e,
		0xbe, 0x3c, 0x31, 0x9e, 0x8c, 0x04, 0x33, 0x06, 0x33, 0x06, 0x33, 0xd6, 0x63, 0xc6, 0x0a, 0x1b,
		0x3b, 0x26, 0xf8, 0xf1, 0xfc, 0x9e, 0x86, 0x78, 0x26, 0x12, 0x91, 0x94, 0x22, 0xe0, 0xca, 0xc8,
		0xbe, 0x8f, 0x71, 0x8c, 0xda, 0xb4, 0x0f, 0xb4, 0xb8, 0x66, 0xe5, 0x01, 0x91, 0x37, 0x47, 0xe0,
		0x97, 0x1d, 0x91, 0x93, 0x35, 0x29, 0x84, 0x83, 0x97, 0x55, 0x00, 0x51, 0xcc, 0xbd, 0xba, 0x70,
		0xb3, 0x0e, 0xc4, 0xcd, 0x9a, 0x7b, 0xa3, 0xf0, 0xb3, 0x76, 0xa8, 0x3e, 0x70, 0xb4, 0xa4, 0x1d,
		0x2d, 0xad, 0x3d, 0x8c, 0x9c, 0x07, 0x2a, 0x4c, 0xae, 0x97, 0x3b, 0x58, 0x61, 0x65, 0xb1, 0x7d,
		0x9e, 0x4d, 0x27, 0x89, 0x83, 0x16, 0xde, 0x8f, 0xbe, 0xe3, 0xd3, 0x0f, 0x5e, 0xf8, 0xf4, 0x5d,
		0x1e, 0x26, 0xa4, 0xb6, 0x3b, 0x38, 0x08, 0x3d, 0x87, 0x08, 0xd7, 0x97, 0xc8, 0x18, 0x9c, 0x0e,
		0xc1, 0xbe, 0x20, 0xf6, 0x05, 0x97, 0x2f, 0x74, 0xc2, 0xa7, 0x40, 0x3e, 0xf6, 0x91, 0x8d, 0x42,
		0xdc, 0x03, 0x71, 0x8f, 0x3d, 0xc6, 0x3d, 0x12, 0x37, 0x10, 0x97, 0x4d, 0x85, 0xb0, 0xc7, 0xb5,
		0xc4, 0x10, 0xb9, 0xf3, 0x26, 0x35, 0x08, 0xaa, 0xca, 0xf9, 0x93, 0x93, 0xc1, 0x8a, 0xe7, 0x50,
		0x4e, 0xc6, 0xeb, 0x9e, 0xbd, 0x38, 0x7d, 0x37, 0xaa, 0x67, 0x30, 0x2a, 0x7a, 0x02, 0x96, 0xea,
		0x39, 0x95, 0x4b, 0x4b, 0x77, 0xd3, 0x6e, 0xd5, 0xeb, 0x87, 0xbf, 0x7c, 0x47, 0x10, 0x91, 0x4f,
		0xb1, 0x85, 0xb0, 0xe7, 0xc8, 0xe5, 0x2c, 0x56, 0x43, 0xa6, 0xc9, 0xe8, 0x82, 0x11, 0xaa, 0x09,
		0x84, 0x02, 0x42, 0x6d, 0x92, 0x45, 0x2a, 0x18, 0xa1, 0xc1, 0x90, 0x7f, 0x13, 0x87, 0x79, 0x82,
		0xaa, 0x44, 0xe9, 0x6f, 0x24, 0xc6, 0xe4, 0x3c, 0x67, 0xab, 0x2c, 0x80, 0xd5, 0xac, 0x03, 0xb1,
		0x54, 0xd7, 0xee, 0xb2, 0x09, 0xb8, 0x32, 0x10, 0xfb, 0xcf, 0x7b, 0x8e, 0xd8, 0xd2, 0xc0, 0x87,
		0x07, 0xe7, 0x73, 0xeb, 0x95, 0xa4, 0x3f, 0x9a, 0xe3, 0x1f, 0xbf, 0x0f, 0x7f, 0xdc, 0xcd, 0xfd,
		0xa8, 0x3e, 0x3c, 0x9c, 0x3f, 0x3c, 0x38, 0x5f, 0xd7, 0xbe, 0xa9, 0xfe, 0xf3, 0xcb, 0xfd, 0xc3,
		0xc3, 0xd7, 0x0f, 0x0f, 0xa4, 0x33, 0x77, 0x45, 0xad, 0x52, 0x4a, 0x24, 0x4e, 0x22, 0x79, 0xfc,
		0x4d, 0x22, 0xf8, 0x85, 0x40, 0x5d, 0xf8, 0x85, 0xf0, 0x0b, 0xe1, 0x17, 0xc2, 0x2f, 0x34, 0x8b,
		0x46, 0xea, 0x5e, 0xe1, 0xcc, 0x58, 0xf8, 0x84, 0x40, 0x27, 0xf8, 0x84, 0xf0, 0x09, 0xe1, 0x13,
		0xc2, 0x27, 0x84, 0x4f, 0x28, 0x71, 0xc5, 0xd1, 0xf4, 0xf3, 0xe8, 0x25, 0xe9, 0x17, 0x92, 0x66,
		0x83, 0x34, 0xd0, 0xcb, 0x63, 0x69, 0x41, 0x4e, 0xb2, 0x8f, 0xc7, 0x72, 0x66, 0xe5, 0xe6, 0x6c,
		0xcc, 0xdd, 0x77, 0x22, 0x98, 0xe4, 0x71, 0xa0, 0x91, 0x46, 0x4e, 0x21, 0xcf, 0xbf, 0x62, 0x68,
		0xa3, 0xb1, 0x53, 0xe1, 0x45, 0x13, 0x0d, 0x4d, 0x59, 0x3e, 0xa2, 0x16, 0x1a, 0x39, 0x6c, 0x7f,
		0xc4, 0x59, 0xcc, 0x02, 0xbb, 0x50, 0x86, 0xf0, 0xdd, 0xb8, 0x1f, 0x79, 0x6c, 0x89, 0x01, 0xb3,
		0xa6, 0xcb, 0xfd, 0x98, 0x12, 0xeb, 0x78, 0xf7, 0x4e, 0xf6, 0xf0, 0x89, 0xf7, 0xc9, 0x11, 0xb6,
		0x2d, 0x49, 0xd9, 0xda, 0xad, 0x94, 0x23, 0xc9, 0x34, 0x6f, 0xba, 0xa5, 0xa5, 0x9a, 0x61, 0xfa,
		0xf7, 0xd0, 0x73, 0x7e, 0x77, 0xb7, 0x9e, 0xa6, 0xaf, 0x96, 0x5e, 0xfa, 0x44, 0x7c, 0x6a, 0x13,
		0xea, 0x38, 0x9c, 0xc5, 0xb1, 0x44, 0x8e, 0xe9, 0xfc, 0x38, 0xc3, 0x8d, 0x29, 0x9b, 0x48, 0x34,
		0x2d, 0x34, 0x42, 0xb6, 0xeb, 0xc6, 0x94, 0xf9, 0x45, 0x45, 0x36, 0xe2, 0x25, 0xed, 0xb7, 0x57,
		0xee, 0xeb, 0xe4, 0x96, 0x92, 0xde, 0x3b, 0xf2, 0x43, 0x27, 0x75, 0xca, 0xef, 0xe6, 0xff, 0x5d,
		0xfb, 0x7c, 0xf5, 0x5a, 0xd9, 0x4b, 0x1b, 0x28, 0x8f, 0xda, 0x11, 0x49, 0xf9, 0x2a, 0x89, 0xb8,
		0x1b, 0x72, 0x57, 0xbc, 0xe4, 0xd7, 0xc6, 0x15, 0x63, 0xd1, 0x2a, 0x16, 0x1a, 0xb9, 0x69, 0x77,
		0xc4, 0x0d, 0x44, 0xa3, 0x2d, 0xa1, 0x8c, 0xed, 0x1c, 0x97, 0xca, 0xed, 0x90, 0x4a, 0x70, 0x36,
		0x95, 0x20, 0xf3, 0x24, 0x40, 0x2a, 0x19, 0xd6, 0xd4, 0x8e, 0x8b, 0xaa, 0xc7, 0x43, 0x25, 0x62,
		0xc8, 0x4a, 0xb1, 0xe3, 0xc9, 0x92, 0xb4, 0xaf, 0xae, 0x2e, 0xaf, 0x0e, 0x67, 0x59, 0x4a, 0xc1,
		0x26, 0x0f, 0x26, 0xd6, 0x99, 0x81, 0x41, 0x8f, 0x7a, 0x5e, 0x97, 0xda, 0x7f, 0x20, 0xd8, 0xb9,
		0xb4, 0x22, 0x88, 0x76, 0x96, 0x32, 0xda, 0xb9, 0xcc, 0x61, 0x10, 0xf6, 0xcc, 0x29, 0xee, 0x0a,
		0x4b, 0x87, 0xf8, 0xe7, 0x7e, 0xc4, 0x19, 0x81, 0x50, 0x53, 0xd2, 0x8d, 0xa6, 0xc2, 0x9b, 0xbc,
		0xc9, 0x68, 0xf0, 0x12, 0xbb, 0x36, 0xf5, 0x88, 0xcf, 0x1c, 0x77, 0x78, 0x74, 0x43, 0x3e, 0x57,
		0x72, 0x71, 0x20, 0x22, 0x3b, 0xf0, 0x23, 0x37, 0xac, 0xfd, 0xfe, 0x8f, 0x1c, 0x51, 0x53, 0x8f,
		0xd4, 0x9c, 0x0c, 0xcf, 0x17, 0xcf, 0xaf, 0x19, 0xd3, 0x31, 0x08, 0xae, 0x40, 0x29, 0x4a, 0xad,
		0x14, 0x5b, 0x1e, 0xe9, 0xfd, 0x73, 0xe6, 0xc1, 0x6f, 0xf7, 0x36, 0xe4, 0x85, 0x61, 0xfa, 0x66,
		0xd8, 0xb3, 0xb8, 0x8b, 0x07, 0xe1, 0x13, 0x71, 0xfd, 0x54, 0x75, 0x68, 0xfe, 0xdd, 0x2d, 0x33,
		0x32, 0x32, 0x70, 0xfb, 0x03, 0x5d, 0xd9, 0xe8, 0x14, 0x10, 0x14, 0x28, 0xda, 0xd5, 0xab, 0xca,
		0xfa, 0x7a, 0x7b, 0x60, 0xc7, 0xa9, 0x40, 0x58, 0x99, 0x2d, 0x5d, 0xe6, 0x72, 0xf0, 0xf3, 0xd6,
		0x49, 0xb4, 0xdc, 0xaa, 0xc1, 0xc5, 0xdb, 0x81, 0x10, 0x93, 0x35, 0xaf, 0x03, 0xae, 0x5d, 0x5e,
		0x81, 0x56, 0x5b, 0xc1, 0x13, 0x74, 0xe9, 0x38, 0xf3, 0x42, 0xea, 0x10, 0x87, 0x79, 0x54, 0x62,
		0x6b, 0x70, 0x6e, 0x14, 0x78, 0x2b, 0x78, 0xeb, 0x86, 0xb5, 0xcf, 0x5d, 0x46, 0x29, 0x51, 0x3e,
		0x59, 0xd2, 0x4d, 0xc1, 0x06, 0x36, 0x05, 0x17, 0x97, 0x44, 0xa1, 0xec, 0x11, 0x9b, 0x82, 0x87,
		0xb2, 0x29, 0x28, 0x01, 0x03, 0x26, 0xa8, 0x47, 0xf9, 0xf7, 0x04, 0xe7, 0x16, 0x04, 0x5b, 0x82,
		0xa5, 0xdc, 0x12, 0x9c, 0x7d, 0x47, 0xd8, 0x0c, 0xcc, 0x29, 0xe7, 0x52, 0x8b, 0x06, 0x1f, 0x71,
		0xd7, 0x22, 0x0c, 0x2f, 0x51, 0x5f, 0xa2, 0xe1, 0x27, 0xe6, 0xf5, 0x13, 0x73, 0xb7, 0x4f, 0x58,
		0x29, 0xb0, 0x39, 0x1b, 0x28, 0x60, 0x13, 0xf0, 0xc4, 0xfd, 0x46, 0xb5, 0x06, 0x07, 0x52, 0x69,
		0xde, 0x92, 0x0d, 0x0d, 0x76, 0xe5, 0x46, 0x36, 0x91, 0x5c, 0xba, 0xb4, 0x26, 0xb2, 0x0d, 0x09,
		0x8e, 0xc1, 0x89, 0x2c, 0xa2, 0x50, 0x61, 0xb7, 0x8d, 0x05, 0xe0, 0x07, 0xc3, 0x0f, 0xae, 0x1c,
		0x05, 0xff, 0x89, 0x05, 0x0d, 0x9c, 0xee, 0x0b, 0x89, 0xdd, 0x7e, 0x40, 0x3d, 0x37, 0xe8, 0xe7,
		0x27, 0x3f, 0xcb, 0x43, 0x11, 0x31, 0x07, 0xf3, 0xd9, 0xb0, 0xf6, 0xa5, 0xcf, 0xf4, 0x38, 0x18,
		0xc3, 0xcc, 0x1e, 0xa3, 0x80, 0xf8, 0x03, 0x12, 0xbb, 0x41, 0xdf, 0x63, 0x24, 0x65, 0x04, 0x8f,
		0x0c, 0x16, 0x7a, 0xed, 0xca, 0x20, 0x64, 0xa9, 0x7c, 0x82, 0x9e, 0x89, 0xe3, 0xf3, 0x0c, 0x85,
		0x87, 0x96, 0x00, 0x07, 0x61, 0xce, 0xbc, 0x4a, 0x22, 0xbd, 0x72, 0x47, 0x1a, 0xeb, 0xac, 0x56,
		0xcf, 0xad, 0xb7, 0xa9, 0x00, 0xdb, 0xd1, 0x59, 0xcd, 0xa2, 0x81, 0x63, 0x8d, 0xc4, 0xdc, 0xa3,
		0xfd, 0xf4, 0xff, 0x89, 0x78, 0x89, 0xd8, 0xf4, 0x8a, 0x4c, 0x27, 0xaa, 0xe7, 0xd6, 0x5f, 0x26,
		0x7f, 0xd9, 0x53, 0x6d, 0x44, 0x97, 0xc6, 0xcc, 0xb1, 0x96, 0x5f, 0xe3, 0xec, 0x2b, 0xf4, 0x5e,
		0xd2, 0xf7, 0x98, 0x5e, 0x3e, 0x0e, 0xe8, 0x59, 0x1e, 0xed, 0x4f, 0xdf, 0x69, 0x0c, 0x75, 0x98,
		0x2d, 0x92, 0x30, 0xb3, 0xa4, 0xd8, 0x13, 0xd8, 0x8b, 0xd1, 0xc7, 0xc6, 0x80, 0x21, 0x0c, 0xc0,
		0xee, 0xc0, 0x16, 0xef, 0x58, 0xb8, 0xb1, 0x70, 0xed, 0x58, 0xca, 0x2d, 0x1e, 0x8f, 0x31, 0x7c,
		0xa2, 0x20, 0x76, 0x02, 0xca, 0xec, 0x0f, 0xe7, 0x3e, 0x51, 0xd0, 0x0d, 0x48, 0xa3, 0xde, 0x6c,
		0x75, 0x89, 0x08, 0x49, 0xe3, 0xaa, 0x71, 0xd3, 0x25, 0x3d, 0x4e, 0x7d, 0x95, 0xae, 0xdd, 0x6b,
		0x67, 0xc2, 0x09, 0x13, 0xe8, 0xe1, 0xad, 0xcb, 0x1a, 0x34, 0x7a, 0x78, 0xff, 0xc9, 0x78, 0x38,
		0xe4, 0x57, 0xc4, 0x0e, 0x93, 0x94, 0x2c, 0xb5, 0x5b, 0x0a, 0x4d, 0xbc, 0x65, 0x7a, 0x78, 0x7f,
		0xcf, 0x7a, 0x34, 0xf1, 0xb2, 0xb5, 0xab, 0xcb, 0x7c, 0xd5, 0xdf, 0x69, 0x3c, 0x1d, 0x2a, 0xf7,
		0xd2, 0x0e, 0xec, 0x8c, 0x0b, 0x74, 0x0d, 0x57, 0x5e, 0xba, 0xc6, 0x4d, 0xab, 0xd5, 0xbe, 0x6e,
		0xb5, 0xea, 0xd7, 0x97, 0xd7, 0xf5, 0xdb, 0xab, 0xab, 0x46, 0xbb, 0x71, 0x85, 0x3e, 0xe2, 0x4a,
		0x3c, 0x2c, 0xff, 0x7c, 0x79, 0x8e, 0xbc, 0x48, 0x01, 0xb0, 0x79, 0x93, 0xe1, 0x5f, 0xf3, 0xea,
		0x4a, 0x0f, 0x48, 0x57, 0xcc, 0x03, 0x18, 0x05, 0x8c, 0x02, 0x46, 0x01, 0xa3, 0x80, 0x51, 0xc0,
		0xe8, 0xb1, 0xc3, 0xe8, 0x55, 0xe3, 0xb6, 0x4b, 0x42, 0x4e, 0xbc, 0x30, 0xe8, 0x33, 0xae, 0x85,
		0xa4, 0xab, 0xa7, 0x02, 0x98, 0x02, 0x4c, 0x01, 0xa6, 0x00, 0x53, 0x80, 0x29, 0xc0, 0xf4, 0xc8,
		0xc1, 0xb4, 0x79, 0xd5, 0xce, 0x7c, 0xc9, 0xab, 0x46, 0x43, 0xcb, 0x27, 0x5d, 0x35, 0x0f, 0x60,
		0x14, 0x30, 0x0a, 0x18, 0x05, 0x8c, 0x02, 0x46, 0x01, 0xa3, 0x47, 0x0e, 0xa3, 0x57, 0x8d, 0xe6,
		0x70, 0x6b, 0xb3, 0xde, 0xbc, 0xd4, 0xc2, 0xd1, 0x95, 0x13, 0x01, 0x48, 0x01, 0xa4, 0x00, 0x52,
		0x00, 0x29, 0x80, 0x14, 0x40, 0x7a, 0xe4, 0x40, 0xda, 0x6e, 0x69, 0xc1, 0xe7, 0xcc, 0x70, 0x80,
		0x26, 0x40, 0x13, 0xa0, 0x09, 0xd0, 0x04, 0x68, 0x02, 0x34, 0x8f, 0x1d, 0x34, 0xaf, 0x86, 0x3e,
		0x63, 0xf3, 0x5a, 0x0f, 0x3c, 0x97, 0xa7, 0x01, 0x88, 0x02, 0x44, 0x01, 0xa2, 0x00, 0x51, 0x80,
		0x28, 0x40, 0xf4, 0xc8, 0x41, 0xd4, 0xe6, 0x36, 0x19, 0x96, 0xc2, 0x69, 0x40, 0xe8, 0xd2, 0x24,
		0x00, 0x50, 0x00, 0x28, 0x00, 0x14, 0x00, 0x0a, 0x00, 0x05, 0x80, 0x1e, 0x39, 0x80, 0xf6, 0x38,
		0xed, 0xa7, 0x56, 0x53, 0x07, 0x3f, 0x17, 0xe7, 0x00, 0x7c, 0x02, 0x3e, 0x01, 0x9f, 0x80, 0x4f,
		0xc0, 0x27, 0xe0, 0xf3, 0xc8, 0xe1, 0xf3, 0x7f, 0x68, 0xb7, 0xab, 0x57, 0xcd, 0x32, 0x3f, 0x03,
		0xa0, 0x13, 0xd0, 0x09, 0xe8, 0x04, 0x74, 0x02, 0x3a, 0x01, 0x9d, 0x47, 0x0e, 0x9d, 0x3e, 0xb5,
		0x49, 0x44, 0x93, 0x98, 0xe9, 0xa0, 0xe7, 0xd2, 0x24, 0x00, 0x50, 0x00, 0x28, 0x00, 0x14, 0x00,
		0x0a, 0x00, 0x05, 0x80, 0x1e, 0x39, 0x80, 0x86, 0x8f, 0x8c, 0xc7, 0xee, 0x9f, 0x5a, 0xf8, 0xb9,
		0x38, 0x07, 0xe0, 0x13, 0xf0, 0x09, 0xf8, 0x04, 0x7c, 0x02, 0x3e, 0x01, 0x9f, 0xc7, 0x0c, 0x9f,
		0x1e, 0x8d, 0x05, 0xb1, 0x3d, 0x46, 0xb9, 0x3c, 0x6c, 0xce, 0x8c, 0x05, 0x5c, 0x02, 0x2e, 0xf7,
		0x08, 0x97, 0x6a, 0x47, 0x3d, 0x2e, 0x8a, 0x65, 0x43, 0x06, 0x2e, 0x25, 0x8f, 0x7e, 0xdc, 0x37,
		0x76, 0x35, 0x01, 0x5e, 0xca, 0x6b, 0x27, 0x7b, 0x74, 0xe4, 0x29, 0x41, 0x95, 0x84, 0xc6, 0xc8,
		0x1e, 0x35, 0x39, 0x19, 0xb8, 0xdb, 0x23, 0x27, 0xf7, 0x81, 0xc2, 0x61, 0x22, 0x4c, 0xb5, 0xaa,
		0x5f, 0x3f, 0x15, 0x30, 0x1a, 0x18, 0x0d, 0x97, 0x16, 0x2e, 0x2d, 0x5c, 0x5a, 0xb8, 0xb4, 0xc7,
		0xec, 0xd2, 0x66, 0x08, 0x68, 0xa2, 0x59, 0xfd, 0xba, 0x89, 0x00, 0xa4, 0x00, 0x52, 0x00, 0x29,
		0x80, 0x14, 0x40, 0x0a, 0x20, 0x3d, 0x7a, 0x20, 0x35, 0xd4, 0xae, 0x7e, 0xc3, 0x5c, 0x80, 0x53,
		0xc0, 0x29, 0xe0, 0x14, 0x70, 0x0a, 0x38, 0x05, 0x9c, 0x1e, 0x3b, 0x9c, 0x1a, 0x69, 0x58, 0xbf,
		0x6e, 0x22, 0x00, 0x29, 0x80, 0x14, 0x40, 0x0a, 0x20, 0x05, 0x90, 0x02, 0x48, 0x8f, 0x1d, 0x48,
		0xcd, 0xb4, 0xac, 0x5f, 0x3b, 0x13, 0xa0, 0x14, 0x50, 0x0a, 0x28, 0x05, 0x94, 0x02, 0x4a, 0x01,
		0xa5, 0xc7, 0x0e, 0xa5, 0x3a, 0x4d, 0xeb, 0x17, 0xc6, 0x03, 0x36, 0x01, 0x9b, 0x80, 0x4d, 0xc0,
		0x26, 0x60, 0x13, 0xb0, 0x79, 0xf4, 0xb0, 0x69, 0xa0, 0x6d, 0xfd, 0x9a, 0x79, 0x00, 0xa3, 0x80,
		0x51, 0xc0, 0x28, 0x60, 0x14, 0x30, 0x0a, 0x18, 0x3d, 0x76, 0x18, 0xd5, 0xef, 0x7e, 0xb4, 0x72,
		0x16, 0x40, 0x28, 0x20, 0x14, 0x10, 0x0a, 0x08, 0x05, 0x84, 0x02, 0x42, 0x0f, 0x16, 0x42, 0xbf,
		0xd2, 0x90, 0x85, 0xca, 0xbb, 0x20, 0x08, 0x05, 0x4d, 0x57, 0x3a, 0xd7, 0xeb, 0xaf, 0xc4, 0xf6,
		0x80, 0xf9, 0x34, 0xa2, 0x59, 0x51, 0x7b, 0xe5, 0x62, 0xc6, 0xfe, 0xa6, 0xe6, 0xab, 0x47, 0x6d,
		0x16, 0x5f, 0x4c, 0x7e, 0xbd, 0x60, 0x62, 0xc0, 0x78, 0xc0, 0xc4, 0x45, 0x9c, 0x7e, 0x47, 0x2c,
		0x5c, 0x3b, 0x0f, 0xe6, 0x56, 0x62, 0xc1, 0x13, 0x5b, 0x04, 0x23, 0x2b, 0xf9, 0x1b, 0xf7, 0x7e,
		0x4a, 0xbf, 0xe2, 0xc7, 0xc9, 0x37, 0x7c, 0x9a, 0xfc, 0xfa, 0xe9, 0xfd, 0xe8, 0x1b, 0x3e, 0xfd,
		0x36, 0xfd, 0x86, 0xaf, 0xd4, 0x96, 0x6b, 0xc3, 0x52, 0x55, 0x62, 0x11, 0x72, 0x9f, 0xd8, 0x61,
		0x20, 0x78, 0xe8, 0x6d, 0x5d, 0xa9, 0x29, 0x38, 0xcf, 0x0d, 0xdb, 0xf2, 0x2a, 0xc6, 0xfd, 0x05,
		0xb6, 0x5c, 0x96, 0x97, 0x5d, 0xc8, 0xb0, 0x0a, 0x55, 0x36, 0x21, 0xcb, 0x22, 0x94, 0xd9, 0x83,
		0x32, 0x6b, 0xd0, 0x60, 0x0b, 0x7a, 0x8a, 0xf5, 0xbd, 0x9b, 0xaf, 0x57, 0x4a, 0xa5, 0xcb, 0x43,
		0xea, 0xd8, 0x34, 0x16, 0x84, 0x53, 0xc1, 0xe4, 0x89, 0xed, 0xc2, 0x78, 0x50, 0x5a, 0x50, 0xda,
		0x3d, 0x52, 0xda, 0xc4, 0x0d, 0xc4, 0x65, 0x53, 0x81, 0xc4, 0x5e, 0x83, 0x50, 0x82, 0x50, 0x2e,
		0x11, 0xca, 0xfa, 0xf8, 0x7f, 0xa0, 0x91, 0x7a, 0x34, 0x32, 0xa7, 0xe2, 0xb3, 0x67, 0xc1, 0x29,
		0x49, 0x82, 0x58, 0xd0, 0xae, 0x27, 0x69, 0x02, 0xfc, 0x24, 0x16, 0xbb, 0x50, 0xca, 0xb1, 0xa9,
		0x09, 0x42, 0x51, 0x3d, 0x3f, 0xbf, 0x48, 0x02, 0x57, 0xc4, 0xd6, 0x5b, 0xeb, 0x2c, 0x62, 0xdc,
		0x66, 0x81, 0xa0, 0x7d, 0x76, 0x66, 0xd1, 0xc0, 0xb1, 0xaa, 0xe7, 0xd6, 0x43, 0x52, 0xaf, 0x5f,
		0xb2, 0x46, 0xbd, 0x5e, 0xab, 0x55, 0x14, 0x64, 0xf8, 0x3d, 0xe7, 0x21, 0xff, 0xc8, 0xe2, 0x98,
		0xf6, 0x99, 0xba, 0x30, 0x8f, 0xef, 0xf7, 0xf7, 0x01, 0xb3, 0x1e, 0xa9, 0xe7, 0x3a, 0xd6, 0xf4,
		0x4e, 0x2d, 0x9e, 0x9a, 0x32, 0xcb, 0x8d, 0xad, 0x2e, 0x13, 0x4f, 0x8c, 0x05, 0x56, 0xfd, 0xaf,
		0xd9, 0xcd, 0x37, 0xea, 0xf5, 0xbf, 0x56, 0x14, 0x65, 0x55, 0x11, 0x07, 0xd7, 0x61, 0xe2, 0xf0,
		0xac, 0x47, 0x7f, 0xb4, 0x0c, 0x6f, 0xd4, 0xe7, 0xd4, 0x85, 0xc9, 0xb5, 0x90, 0x29, 0xbf, 0xb2,
		0x4a, 0xdf, 0xfb, 0x7a, 0x92, 0xe1, 0x57, 0x3f, 0xf1, 0x84, 0xab, 0xc1, 0x4f, 0x17, 0xc6, 0x83,
		0x9f, 0x82, 0x9f, 0x82, 0x9f, 0x82, 0x9f, 0x82, 0x9f, 0x82, 0x9f, 0x82, 0x9f, 0x82, 0x9f, 0x82,
		0x9f, 0x82, 0x9f, 0x6a, 0xf1, 0xd3, 0x30, 0x62, 0x3c, 0xdb, 0xc0, 0xa0, 0x1e, 0xd1, 0x8d, 0xa5,
		0x6e, 0x98, 0xab, 0x60, 0xde, 0xda, 0x04, 0x6f, 0x05, 0x6f, 0x05, 0x6f, 0x05, 0x6f, 0xdd, 0x09,
		0x6f, 0x6d, 0x35, 0x6f, 0x5b, 0xb7, 0xed, 0xeb, 0xe6, 0x2d, 0xb6, 0xe7, 0xcb, 0x06, 0x61, 0xba,
		0xe1, 0x96, 0x0d, 0x73, 0x01, 0xc2, 0x00, 0x61, 0x80, 0x30, 0x40, 0x18, 0x20, 0x0c, 0x10, 0x56,
		0x24, 0x84, 0x25, 0xc1, 0x1f, 0x41, 0xf8, 0x14, 0x90, 0x24, 0x30, 0x05, 0x64, 0x2b, 0x67, 0x04,
		0x9c, 0x01, 0xce, 0x00, 0x67, 0x80, 0x33, 0xc0, 0x19, 0xe0, 0xcc, 0x34, 0x9c, 0x65, 0x41, 0x7b,
		0x79, 0xcc, 0x1a, 0x0e, 0xcb, 0x69, 0x7a, 0xa6, 0xf5, 0x14, 0xf9, 0xb5, 0xbb, 0x32, 0x0d, 0x20,
		0xe7, 0xb3, 0x98, 0x1d, 0xec, 0xb7, 0x03, 0x25, 0xf7, 0x88, 0x92, 0x2c, 0x48, 0xfc, 0x11, 0x8f,
		0x53, 0x39, 0x6b, 0xaf, 0x25, 0x31, 0xe6, 0x7d, 0x90, 0xf8, 0xe9, 0x4d, 0xbe, 0xee, 0xd4, 0x4e,
		0x98, 0xa0, 0xba, 0xfb, 0xa0, 0xb7, 0x50, 0x5c, 0x28, 0x2e, 0xe8, 0x2d, 0xe8, 0xed, 0x6e, 0xe8,
		0x2d, 0x12, 0x65, 0x4c, 0xd1, 0x5b, 0x24, 0xca, 0x20, 0x51, 0x46, 0x11, 0x13, 0x91, 0x28, 0xa3,
		0xa4, 0xc2, 0xd6, 0xd1, 0x17, 0x01, 0x2b, 0x18, 0x8b, 0x8a, 0xdb, 0x23, 0x3d, 0x46, 0x45, 0xc2,
		0xf3, 0xe3, 0xb7, 0x16, 0x83, 0x4c, 0xbf, 0xec, 0x4e, 0xa6, 0x9e, 0xd6, 0x34, 0xa3, 0x9c, 0x79,
		0xe0, 0x72, 0xb0, 0xca, 0x15, 0x2b, 0x62, 0x9a, 0x65, 0x7e, 0x65, 0x20, 0xbc, 0x20, 0x07, 0x27,
		0x2a, 0x32, 0x22, 0x28, 0x17, 0x31, 0x79, 0x72, 0xc5, 0x20, 0x85, 0x91, 0xf3, 0xf3, 0xd9, 0xaa,
		0xf4, 0xde, 0x5d, 0x40, 0x7d, 0xf6, 0xc6, 0x3a, 0x1b, 0x97, 0xa2, 0x9f, 0xc9, 0x00, 0x88, 0x1e,
		0x70, 0xac, 0x2e, 0x03, 0xb7, 0x82, 0x50, 0x58, 0x71, 0x12, 0x45, 0x21, 0x17, 0xcc, 0xb1, 0xc2,
		0xc0, 0x12, 0x03, 0x37, 0xb6, 0x26, 0x45, 0xf3, 0xb2, 0xd2, 0xa5, 0x01, 0x12, 0x26, 0xc1, 0xc1,
		0x08, 0x28, 0xcc, 0x4b, 0xba, 0xd4, 0xaa, 0x15, 0x64, 0xa0, 0x8d, 0xba, 0x63, 0x0a, 0xc2, 0x3d,
		0xe2, 0x46, 0xe7, 0xe7, 0x17, 0x5d, 0xce, 0xe8, 0x1f, 0x59, 0x17, 0xa3, 0xd0, 0x61, 0xa5, 0x10,
		0x62, 0x3b, 0x8b, 0x25, 0x24, 0x3c, 0x05, 0x0d, 0xeb, 0x69, 0xc0, 0x02, 0x6b, 0xee, 0x1e, 0x53,
		0xc8, 0x66, 0x41, 0xfa, 0xa1, 0x03, 0x99, 0x5e, 0x2b, 0xd3, 0x12, 0x8b, 0xb8, 0x5f, 0x11, 0x37,
		0x82, 0x05, 0x11, 0x67, 0x31, 0x0b, 0xec, 0x42, 0x39, 0xc3, 0x77, 0xa3, 0x15, 0x65, 0xb1, 0x25,
		0x06, 0xcc, 0x9a, 0x5f, 0xf2, 0x88, 0x72, 0xea, 0x33, 0xc1, 0x78, 0xbc, 0xfb, 0x80, 0xd4, 0xf0,
		0xc9, 0xf7, 0x49, 0x1e, 0xf2, 0x2e, 0xcd, 0xee, 0x65, 0xe7, 0x30, 0x9a, 0xd8, 0xc8, 0xb1, 0x4f,
		0xc5, 0x3e, 0x36, 0x21, 0xf7, 0xbf, 0xcb, 0xc3, 0xe7, 0x36, 0x74, 0xb2, 0xf9, 0x4a, 0x62, 0x15,
		0xf3, 0xae, 0x9e, 0xe2, 0xaa, 0x55, 0x36, 0x76, 0xd5, 0x91, 0x5e, 0x9f, 0xd5, 0x4b, 0xb2, 0xfc,
		0xc0, 0x2b, 0x1e, 0xb6, 0xe2, 0xf6, 0xdc, 0xc0, 0x61, 0xeb, 0xa3, 0x59, 0x13, 0x0b, 0x32, 0xbe,
		0x70, 0xcd, 0x82, 0x6d, 0x0e, 0xb9, 0x6f, 0xcd, 0x20, 0xc9, 0x13, 0x52, 0x97, 0x0d, 0xa1, 0xe7,
		0xb5, 0x50, 0xd2, 0x21, 0x72, 0x69, 0xfb, 0xa3, 0x10, 0x02, 0x97, 0x13, 0xd7, 0xad, 0x21, 0xed,
		0xfc, 0x21, 0xec, 0x1c, 0x21, 0xeb, 0x9c, 0x21, 0xea, 0x1c, 0x46, 0x47, 0x26, 0x04, 0x2d, 0x1b,
		0x72, 0x56, 0x0e, 0x8f, 0xca, 0x87, 0x43, 0xf3, 0xec, 0x8a, 0xc9, 0x84, 0x8c, 0x95, 0x33, 0x20,
		0x76, 0xf9, 0xcc, 0x8a, 0x76, 0xb8, 0xa3, 0x61, 0xac, 0x3c, 0x1a, 0x0b, 0x62, 0x0f, 0x46, 0xd2,
		0xb7, 0xc5, 0x60, 0xcd, 0x5e, 0x0c, 0xa3, 0x75, 0xd0, 0x46, 0xcb, 0xa1, 0x82, 0x11, 0x1a, 0x38,
		0x44, 0xb8, 0x3e, 0x23, 0x0e, 0xf3, 0x04, 0xcd, 0x61, 0xc1, 0x1a, 0x1b, 0x7a, 0x80, 0x56, 0x3e,
		0xb0, 0xa0, 0x9f, 0x81, 0xf6, 0x7e, 0x6c, 0x58, 0xf3, 0x84, 0x8c, 0xd8, 0x65, 0xf3, 0x78, 0x8c,
		0xd7, 0x06, 0x89, 0xfa, 0x85, 0x0a, 0xc1, 0x78, 0xb0, 0x55, 0xa4, 0x2a, 0x0f, 0x0f, 0xce, 0xe7,
		0xd6, 0x2b, 0x49, 0x7f, 0x34, 0xc7, 0x3f, 0x7e, 0x1f, 0xfe, 0xb8, 0x9b, 0xfb, 0x51, 0x7d, 0x78,
		0x38, 0x7f, 0x78, 0x70, 0xbe, 0xae, 0x7d, 0x53, 0xfd, 0xe7, 0x97, 0xfb, 0x87, 0x87, 0xaf, 0x1f,
		0x1e, 0x48, 0x67, 0xee, 0x8a, 0x5a, 0xa5, 0x18, 0x3b, 0x1b, 0x86, 0x51, 0x97, 0xda, 0x7f, 0x64,
		0xde, 0x76, 0x0e, 0x4b, 0x3b, 0x77, 0xb9, 0xa6, 0xad, 0xad, 0xc3, 0xd6, 0xee, 0xd5, 0xd6, 0x76,
		0xc3, 0xd0, 0x63, 0x34, 0xc8, 0x63, 0x5f, 0x1b, 0x52, 0xb7, 0x20, 0xb1, 0xa1, 0x92, 0x2f, 0x3c,
		0x2e, 0xd1, 0xc2, 0xb3, 0x7a, 0x6e, 0xbd, 0x1d, 0x9a, 0x86, 0x6a, 0xae, 0xcd, 0x52, 0xb5, 0xf0,
		0xe0, 0x6a, 0x85, 0x98, 0x8f, 0xd2, 0xe6, 0x4d, 0x61, 0x52, 0x88, 0xae, 0x98, 0x88, 0xf2, 0x69,
		0x85, 0x56, 0xe6, 0xa4, 0x78, 0xd3, 0x1a, 0x94, 0x61, 0x83, 0x4f, 0x42, 0x7a, 0x46, 0xf1, 0x66,
		0xe9, 0x60, 0xb3, 0x71, 0x29, 0x32, 0x1e, 0x5c, 0x3e, 0x46, 0x31, 0x33, 0x1d, 0x3c, 0x7e, 0x2d,
		0xa5, 0x2b, 0xe4, 0x8b, 0x64, 0x3b, 0x30, 0xa7, 0x17, 0x01, 0x8e, 0x0f, 0x3e, 0x5e, 0xd3, 0x68,
		0xe7, 0x40, 0xe3, 0x76, 0x69, 0xe3, 0x35, 0x8d, 0xab, 0xfa, 0x09, 0x79, 0x3b, 0xb7, 0xa5, 0x7c,
		0x5a, 0xb3, 0x16, 0xaa, 0x84, 0x0c, 0x6f, 0x4f, 0x18, 0xed, 0x8b, 0x04, 0xc8, 0xbc, 0xda, 0x6e,
		0x2a, 0x2c, 0xcd, 0x01, 0xe3, 0xf1, 0x68, 0xc3, 0x66, 0x0b, 0x20, 0x67, 0x57, 0x01, 0x91, 0x0f,
		0x1a, 0x91, 0x27, 0xdb, 0x79, 0x84, 0x7a, 0xde, 0x81, 0x87, 0x21, 0x2f, 0x4f, 0x07, 0x97, 0x9b,
		0x75, 0x44, 0x21, 0x67, 0x2f, 0xac, 0xfa, 0x7d, 0x5f, 0xd4, 0xbf, 0x64, 0xff, 0x25, 0xb1, 0xa0,
		0x81, 0xd3, 0x7d, 0xf9, 0x12, 0xbf, 0xc4, 0x82, 0xf9, 0xf5, 0x2f, 0x5e, 0x58, 0xad, 0x7f, 0x69,
		0xdc, 0xd7, 0xc9, 0x6d, 0x27, 0xfb, 0xcf, 0x97, 0x66, 0xf5, 0xbe, 0x4e, 0x5a, 0xa3, 0x7f, 0x5c,
		0xdd, 0xd7, 0xc9, 0x55, 0xa7, 0xf6, 0xe5, 0xbe, 0x31, 0xf9, 0x3c, 0xfb, 0xb5, 0xf6, 0x65, 0xbc,
		0xc1, 0x4d, 0xaa, 0xd9, 0x1f, 0xaa, 0x0f, 0x0f, 0x4e, 0xed, 0x73, 0xfd, 0x4d, 0xe3, 0xb5, 0x7a,
		0x71, 0x4f, 0xbb, 0xb6, 0xd3, 0xa9, 0x7d, 0x53, 0xbd, 0x58, 0xf8, 0xa8, 0xf6, 0xcd, 0x45, 0x75,
		0xf1, 0xf2, 0xda, 0x97, 0x6a, 0xfa, 0xed, 0x8d, 0x4e, 0xfa, 0x97, 0x2f, 0xd5, 0x46, 0xf3, 0xbe,
		0x4e, 0x6e, 0x3a, 0xb5, 0x5a, 0xed, 0x8b, 0xcb, 0xbb, 0x6a, 0xb7, 0xe6, 0xd1, 0x7e, 0xfe, 0xaf,
		0x29, 0x26, 0xac, 0x1a, 0x46, 0x8c, 0x13, 0x27, 0x7c, 0x0a, 0x08, 0x67, 0x34, 0xde, 0x90, 0x5a,
		0x30, 0xd7, 0xef, 0x61, 0x6e, 0x04, 0x36, 0xb2, 0x0e, 0x1a, 0x3b, 0xa2, 0x90, 0x0b, 0x92, 0xf3,
		0xa5, 0x5a, 0x39, 0x6b, 0x3e, 0xb7, 0xd4, 0x78, 0xae, 0xbb, 0xe9, 0xf7, 0xcf, 0x99, 0x71, 0x5b,
		0x6f, 0x25, 0xf2, 0xbf, 0xb6, 0xe9, 0x9a, 0xb2, 0x67, 0x71, 0x17, 0x0f, 0xc2, 0x27, 0xe2, 0xfa,
		0xe9, 0xa3, 0xd2, 0xed, 0xb9, 0x5d, 0x7a, 0x6f, 0x73, 0xe0, 0xf6, 0x07, 0xb2, 0x6f, 0xb1, 0x93,
		0x5f, 0x57, 0x63, 0xb1, 0xa9, 0x74, 0x75, 0x5e, 0x4b, 0x87, 0xd7, 0x42, 0x3f, 0x0f, 0x5a, 0x3f,
		0xf3, 0x55, 0x66, 0x43, 0x2b, 0xf7, 0xa5, 0x95, 0x33, 0x47, 0xe6, 0x6d, 0xd5, 0xca, 0xad, 0xc7,
		0xeb, 0x6d, 0x39, 0x5c, 0x0e, 0x5a, 0x59, 0xac, 0x56, 0x6e, 0x3b, 0x0c, 0xae, 0x62, 0x53, 0xce,
		0x5d, 0xc6, 0x89, 0xe0, 0x34, 0x88, 0xdd, 0x54, 0x27, 0xe3, 0xfc, 0xa7, 0x0c, 0xae, 0x1a, 0x9c,
		0xef, 0xac, 0xc1, 0x3a, 0xce, 0x1a, 0x34, 0x18, 0x16, 0xda, 0xdb, 0x59, 0x83, 0xb9, 0xab, 0xfc,
		0x75, 0x4f, 0x1e, 0x96, 0x38, 0x71, 0x58, 0xf6, 0xa4, 0x61, 0x95, 0x13, 0x86, 0x25, 0xfb, 0x07,
		0x48, 0x44, 0x17, 0x55, 0xfa, 0x05, 0xa8, 0xf6, 0x09, 0xd0, 0xae, 0x6d, 0x57, 0xaf, 0x69, 0x97,
		0xe8, 0x07, 0xa0, 0xd4, 0x07, 0xc0, 0xe0, 0xc9, 0xc0, 0xfb, 0x5c, 0xa5, 0xdd, 0x14, 0x39, 0x28,
		0x1d, 0x4c, 0xeb, 0x06, 0x33, 0x8d, 0xea, 0x23, 0x6a, 0xff, 0xc1, 0x84, 0x04, 0x72, 0xac, 0x1c,
		0x0d, 0xe8, 0x00, 0x74, 0x00, 0x3a, 0x00, 0x1d, 0x80, 0x8e, 0xa3, 0x87, 0x0e, 0xc7, 0x8d, 0x6d,
		0xca, 0x1d, 0xe6, 0x28, 0x41, 0xc7, 0xf2, 0x68, 0x40, 0x07, 0xa0, 0x03, 0xd0, 0x01, 0xe8, 0x00,
		0x74, 0x1c, 0x0c, 0x74, 0x1c, 0x4b, 0x6b, 0x20, 0xc1, 0x5d, 0x87, 0x05, 0xe2, 0xd2, 0x0a, 0xb9,
		0xb5, 0xf8, 0x51, 0xe8, 0xd3, 0x01, 0x7d, 0xfa, 0xe3, 0x12, 0x1d, 0x83, 0xf2, 0x2e, 0xd4, 0xb1,
		0x10, 0x9c, 0x61, 0x6a, 0x98, 0x0a, 0xb9, 0x99, 0x1f, 0x09, 0x62, 0x03, 0x62, 0x03, 0x62, 0x03,
		0x62, 0x03, 0x62, 0x73, 0xf4, 0x3e, 0x71, 0xcf, 0x8e, 0x35, 0x60, 0x63, 0x79, 0x34, 0xa0, 0x03,
		0xd0, 0x01, 0xe8, 0x00, 0x74, 0x00, 0x3a, 0x8e, 0x1e, 0x3a, 0xa6, 0xe7, 0x6d, 0xaa, 0x40, 0xc7,
		0xf2, 0x68, 0x40, 0x07, 0xa0, 0x03, 0xd0, 0x01, 0xe8, 0x00, 0x74, 0x1c, 0x3d, 0x74, 0x84, 0xb6,
		0x90, 0xc5, 0x8b, 0xd1, 0x10, 0x80, 0x04, 0x40, 0x02, 0x20, 0x01, 0x90, 0x00, 0x48, 0x1c, 0x3d,
		0x48, 0x8c, 0xcf, 0x87, 0x53, 0xf1, 0x2e, 0x16, 0xc7, 0x02, 0x36, 0x00, 0x1b, 0x80, 0x0d, 0xc0,
		0x06, 0x60, 0xe3, 0xb8, 0x61, 0x63, 0xd8, 0x1a, 0xd8, 0x63, 0x94, 0xe7, 0x87, 0x8b, 0x99, 0x31,
		0x80, 0x09, 0xc0, 0xc4, 0x86, 0xb5, 0x97, 0xeb, 0x56, 0xbc, 0x28, 0x36, 0x8d, 0x3c, 0x30, 0x91,
		0xb3, 0x6d, 0xc8, 0xae, 0x6d, 0x78, 0x13, 0x46, 0x7c, 0x69, 0x4d, 0xf2, 0x76, 0x3f, 0x3e, 0x26,
		0x93, 0x9d, 0x43, 0x82, 0xf3, 0xf6, 0x29, 0x99, 0x0c, 0xd8, 0x4d, 0xd7, 0xe4, 0x22, 0x51, 0x27,
		0x4c, 0x84, 0x4e, 0x5d, 0xd2, 0xea, 0xe1, 0xc0, 0x22, 0x60, 0x11, 0x5c, 0x16, 0xb8, 0x2c, 0x70,
		0x59, 0x8e, 0xdb, 0x65, 0x49, 0xad, 0xbf, 0x46, 0x65, 0xd2, 0xea, 0xe1, 0x00, 0x0f, 0x80, 0x07,
		0xc0, 0x03, 0xe0, 0x01, 0xf0, 0x38, 0x7e, 0xf0, 0x50, 0x4c, 0xdf, 0x5d, 0x1e, 0x0a, 0xd0, 0x00,
		0x68, 0x00, 0x34, 0x00, 0x1a, 0x00, 0x8d, 0xe3, 0x07, 0x0d, 0xdf, 0xcd, 0x4c, 0xbf, 0x6c, 0x22,
		0xd6, 0xf2, 0x50, 0x80, 0x06, 0x40, 0x03, 0xa0, 0x01, 0xd0, 0x00, 0x68, 0x1c, 0x0c, 0x68, 0x1c,
		0x4b, 0x13, 0x84, 0xc8, 0xa3, 0xa2, 0x17, 0x72, 0x9f, 0x5c, 0x37, 0x9b, 0x75, 0xe2, 0x34, 0x57,
		0xd4, 0xf8, 0x2f, 0x5c, 0x82, 0x9e, 0x08, 0xaa, 0xeb, 0x76, 0x6c, 0xc4, 0x47, 0xc9, 0x5d, 0x5e,
		0x18, 0x0b, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03, 0xea, 0x03,
		0xea, 0x53, 0x7a, 0xea, 0xa3, 0x5e, 0xb0, 0xbd, 0x7a, 0x38, 0x08, 0x10, 0x08, 0x10, 0x08, 0x10,
		0x08, 0x10, 0x08, 0xd0, 0xf1, 0x6f, 0x18, 0xa8, 0xec, 0x14, 0x60, 0x8b, 0x00, 0x30, 0x01, 0x98,
		0x00, 0x4c, 0x00, 0x26, 0x4e, 0x06, 0x26, 0x94, 0x8b, 0xb6, 0x57, 0x0d, 0x06, 0x70, 0x00, 0x38,
		0x00, 0x1c, 0x00, 0x0e, 0x00, 0xc7, 0x11, 0x00, 0x47, 0x39, 0x4e, 0x4b, 0x75, 0x98, 0xe7, 0x3e,
		0x32, 0xfe, 0x42, 0x82, 0xd0, 0x61, 0x24, 0x7c, 0x64, 0x9c, 0xbb, 0x4e, 0xb1, 0x87, 0xa6, 0xa6,
		0x97, 0x57, 0x54, 0x00, 0x55, 0xf9, 0x44, 0x58, 0xc1, 0x19, 0xf5, 0x89, 0x1f, 0x16, 0xfc, 0x60,
		0x31, 0xf5, 0x23, 0x8f, 0xbd, 0xbd, 0x92, 0x3e, 0x11, 0x76, 0xcd, 0x4b, 0x7f, 0x17, 0x04, 0xa1,
		0x18, 0x1e, 0xd1, 0xbb, 0xf1, 0xf8, 0xd0, 0xd8, 0x1e, 0x30, 0x9f, 0x46, 0x34, 0xab, 0x93, 0xae,
		0x5c, 0xcc, 0x80, 0x54, 0x8a, 0x01, 0x3d, 0x6a, 0xb3, 0xf8, 0x62, 0xf2, 0xeb, 0xc5, 0xd6, 0xd3,
		0x62, 0x87, 0x73, 0x0a, 0x9e, 0xd8, 0x22, 0x18, 0x21, 0xcb, 0x6f, 0xdc, 0xfb, 0x29, 0x9d, 0xf1,
		0xc7, 0xc9, 0x84, 0x9f, 0x26, 0xbf, 0x7e, 0xfa, 0x6d, 0x3a, 0xa1, 0xc6, 0x91, 0xf1, 0x71, 0xd2,
		0x9d, 0xdc, 0x63, 0x8e, 0x23, 0x6f, 0x67, 0xaf, 0xd6, 0x3c, 0xf4, 0xb6, 0x8e, 0x43, 0x6f, 0xf7,
		0x71, 0xe8, 0x2d, 0x75, 0x7c, 0x37, 0xd8, 0x72, 0xf0, 0xf8, 0xd2, 0x3a, 0xcf, 0x0e, 0xda, 0xf2,
		0x80, 0x53, 0xde, 0xb1, 0x9d, 0x48, 0x54, 0x58, 0x90, 0x6d, 0x70, 0x6d, 0xbc, 0xb0, 0x03, 0xfa,
		0x0d, 0xfa, 0x6d, 0x44, 0x36, 0xad, 0x9c, 0x47, 0xab, 0x4f, 0xe1, 0x7f, 0xe3, 0x11, 0xeb, 0x79,
		0x1f, 0x69, 0x2b, 0x89, 0x90, 0xe3, 0xd4, 0xa6, 0x8e, 0x60, 0x37, 0x2b, 0x23, 0x9b, 0x8f, 0x64,
		0xcf, 0x27, 0x1b, 0x9d, 0x02, 0xb6, 0xc5, 0xfd, 0x24, 0x16, 0x45, 0x6e, 0x88, 0x57, 0xab, 0xe7,
		0xd6, 0x5b, 0xeb, 0x6c, 0x68, 0xc8, 0xce, 0x6a, 0x16, 0x0d, 0x1c, 0x2b, 0x16, 0x94, 0x8b, 0x98,
		0x3c, 0xb9, 0x62, 0x50, 0x3d, 0x3f, 0xbf, 0x38, 0x3f, 0x9f, 0xe5, 0x06, 0xbd, 0xbb, 0x14, 0xdd,
		0xdf, 0x58, 0x67, 0xf1, 0x4b, 0x2c, 0x98, 0x5f, 0x3f, 0xab, 0xd5, 0xac, 0x90, 0x5b, 0x41, 0x28,
		0xaa, 0xb2, 0xe3, 0x64, 0xb6, 0xd2, 0xdf, 0x73, 0x1e, 0xf2, 0x8f, 0x2c, 0x8e, 0x69, 0x5f, 0x61,
		0x43, 0x7d, 0x85, 0xae, 0x59, 0xe9, 0xca, 0x5a, 0x5d, 0x66, 0x8d, 0x6c, 0xb8, 0xa4, 0x03, 0xa1,
		0xb8, 0xb5, 0xbf, 0xa8, 0x00, 0xc3, 0xca, 0x31, 0x7f, 0xf4, 0x5c, 0x6f, 0xe4, 0xe7, 0xd2, 0xdd,
		0xe5, 0x5f, 0x52, 0x84, 0x0d, 0x4b, 0x24, 0x35, 0xf1, 0x6b, 0x29, 0xbb, 0xaa, 0x70, 0xd6, 0x63,
		0x9c, 0x05, 0x76, 0xa1, 0x49, 0x26, 0xbf, 0xfe, 0xf0, 0x9d, 0xd5, 0xbc, 0x69, 0x5f, 0xde, 0x59,
		0xbf, 0x0f, 0x98, 0x35, 0x25, 0xbf, 0xd6, 0x7f, 0xf0, 0x30, 0x89, 0xac, 0x8f, 0x3f, 0x7e, 0x6b,
		0x11, 0xcb, 0xed, 0xbd, 0x4b, 0x57, 0x3a, 0x65, 0xc1, 0x49, 0xbc, 0xe3, 0xa4, 0x92, 0xe9, 0x2a,
		0xec, 0x33, 0xa7, 0x44, 0x61, 0x99, 0x8e, 0x22, 0xbe, 0x4b, 0x83, 0x97, 0x2c, 0x3c, 0xdb, 0x7f,
		0x92, 0x20, 0xb0, 0xd3, 0x31, 0xf9, 0xe8, 0x64, 0xa3, 0x2c, 0x74, 0x92, 0xb8, 0xd1, 0x71, 0x33,
		0xca, 0xf4, 0x01, 0x0b, 0x26, 0x95, 0xdb, 0x9c, 0xa2, 0x15, 0xa2, 0x45, 0x7c, 0x6a, 0xe7, 0x5f,
		0xcd, 0x65, 0x31, 0xcb, 0xc6, 0xe7, 0x5c, 0x99, 0x7c, 0x1e, 0x8c, 0xb4, 0xe8, 0xa9, 0x88, 0xa0,
		0x01, 0x51, 0x34, 0x69, 0x68, 0xa5, 0x44, 0xb3, 0x18, 0x2b, 0x2b, 0x2d, 0xaa, 0x92, 0x26, 0x34,
		0xe7, 0x3b, 0xcc, 0xed, 0x17, 0x2d, 0xbd, 0x41, 0x9f, 0xda, 0x84, 0x3a, 0x0e, 0x67, 0xb1, 0x14,
		0x4c, 0x4a, 0x74, 0x0b, 0x9c, 0x0a, 0x9a, 0x64, 0xcf, 0xb5, 0xc9, 0xc0, 0xfb, 0x3a, 0xb9, 0xa5,
		0xa4, 0xf7, 0x8e, 0xfc, 0xd0, 0xf9, 0xdc, 0x7c, 0xad, 0xde, 0xcd, 0xff, 0xbb, 0xf6, 0xf9, 0xea,
		0x35, 0xff, 0xba, 0x77, 0x0c, 0x41, 0x57, 0x8e, 0x37, 0xb3, 0xa0, 0xef, 0x24, 0xe4, 0x6e, 0x5f,
		0x62, 0xb3, 0x63, 0x8d, 0xd9, 0x18, 0x4f, 0x53, 0xb0, 0xf5, 0x68, 0xc2, 0x7a, 0xc0, 0x7a, 0x14,
		0x2a, 0x9a, 0xb2, 0xf1, 0x16, 0xc9, 0xb8, 0x8b, 0x59, 0x55, 0x7e, 0x74, 0xb9, 0x48, 0xa8, 0x47,
		0x78, 0x98, 0x08, 0xc6, 0x89, 0xeb, 0xc8, 0xab, 0xf1, 0xf2, 0x14, 0x39, 0x5f, 0x8f, 0x4c, 0xcc,
		0x74, 0x32, 0xa8, 0x91, 0x4f, 0x98, 0x3a, 0x20, 0x21, 0x30, 0x23, 0x7b, 0x37, 0x23, 0x89, 0x1b,
		0x88, 0x1b, 0x05, 0xb3, 0x21, 0xb1, 0xb1, 0x2d, 0x99, 0xc0, 0x20, 0x1f, 0x9f, 0x98, 0x7c, 0x91,
		0x4a, 0x42, 0xc3, 0x64, 0xf0, 0x64, 0x17, 0xff, 0x8d, 0xda, 0x78, 0xdd, 0xad, 0xfb, 0xe9, 0xab,
		0x51, 0xdd, 0xc2, 0x97, 0x94, 0x9a, 0xf9, 0xa5, 0x53, 0x48, 0x7c, 0x58, 0x5a, 0xba, 0xe6, 0xd5,
		0xd5, 0xe1, 0x2f, 0x5e, 0x41, 0xc1, 0xc0, 0x8e, 0x51, 0x85, 0x57, 0x88, 0xb8, 0x6b, 0x84, 0x0a,
		0x35, 0x54, 0x72, 0xd2, 0x1a, 0x9d, 0xd3, 0x9e, 0x20, 0x2e, 0x13, 0x3d, 0xd2, 0x65, 0x71, 0x4c,
		0xd8, 0x63, 0x14, 0x0c, 0xf7, 0xe3, 0x49, 0x9c, 0x74, 0x03, 0x26, 0x48, 0x2f, 0xe4, 0x4f, 0x94,
		0x3b, 0x6e, 0xd0, 0x57, 0x09, 0x17, 0x6b, 0x84, 0xad, 0x4d, 0x05, 0x11, 0x8d, 0x86, 0xae, 0x97,
		0x90, 0x46, 0x6a, 0x01, 0x0f, 0x4d, 0xea, 0x0b, 0x0e, 0x33, 0x95, 0xbb, 0x6c, 0x33, 0xab, 0x2a,
		0xcc, 0x1d, 0x07, 0x35, 0x4d, 0xa2, 0x4a, 0x54, 0x87, 0xb9, 0xb8, 0x10, 0xa5, 0xdc, 0x68, 0x29,
		0x7a, 0xdf, 0x72, 0x79, 0xaf, 0x31, 0xdb, 0x5e, 0x3c, 0x73, 0x79, 0xf7, 0x6c, 0x0f, 0x1b, 0x8b,
		0x3f, 0x07, 0xde, 0x8b, 0x15, 0x27, 0x51, 0x14, 0x72, 0xc1, 0x1c, 0x2b, 0x0c, 0xac, 0x1f, 0x7f,
		0xfd, 0xd6, 0x9a, 0x4d, 0x37, 0x8a, 0xb1, 0xc3, 0x38, 0x92, 0xe1, 0x3c, 0x6b, 0x75, 0x04, 0x5b,
		0x8d, 0x11, 0x67, 0x71, 0xd1, 0x3b, 0x8d, 0xef, 0xb3, 0x8d, 0x59, 0x4b, 0x0c, 0x98, 0x35, 0x35,
		0x08, 0x56, 0x2f, 0x09, 0x32, 0x96, 0x48, 0x3d, 0x57, 0xbc, 0x58, 0x6e, 0x90, 0x7d, 0x3e, 0xbb,
		0xbe, 0xe7, 0xbb, 0xf7, 0x40, 0xe3, 0xbd, 0x6f, 0x37, 0x2a, 0xaf, 0xd5, 0x81, 0x35, 0x5f, 0xc8,
		0x99, 0xfe, 0x39, 0xb9, 0x5e, 0x32, 0x0d, 0x74, 0x66, 0x69, 0x2e, 0xa4, 0xd0, 0x58, 0x2a, 0x37,
		0x74, 0xe6, 0x5b, 0x3e, 0xbd, 0x1b, 0x7e, 0xcb, 0x7f, 0x6c, 0x41, 0x3a, 0xb5, 0xcd, 0xd8, 0x2e,
		0x77, 0x9d, 0x3e, 0x23, 0xf9, 0x18, 0xcf, 0x44, 0xef, 0xe6, 0x46, 0x1d, 0xda, 0x86, 0x6c, 0x57,
		0x1c, 0xf9, 0x86, 0x6c, 0x57, 0x94, 0x66, 0x43, 0x76, 0x74, 0xa4, 0x00, 0x49, 0x82, 0x3f, 0x82,
		0xf0, 0x29, 0x20, 0x31, 0xb7, 0xd5, 0x76, 0x66, 0xd7, 0x4d, 0x54, 0x64, 0x84, 0x36, 0x8b, 0x0c,
		0x9c, 0x68, 0x94, 0x36, 0x97, 0x92, 0x1c, 0x73, 0x94, 0x36, 0x8f, 0x12, 0x95, 0x2d, 0x4a, 0xdb,
		0x0d, 0x43, 0x8f, 0x51, 0xa5, 0xed, 0x9d, 0xc6, 0x0e, 0xb7, 0x6a, 0x7c, 0x6a, 0x13, 0x27, 0x89,
		0x3c, 0xd7, 0xce, 0x0f, 0xd3, 0xd6, 0xe2, 0x96, 0xf8, 0xec, 0x04, 0x72, 0xca, 0xd7, 0x80, 0xf2,
		0x41, 0xf9, 0x74, 0x91, 0x6d, 0x32, 0x60, 0x18, 0x90, 0xd6, 0x48, 0xc9, 0xb5, 0x25, 0x44, 0x58,
		0x0b, 0xcf, 0x26, 0x83, 0x93, 0x98, 0x91, 0x80, 0x09, 0xe2, 0x06, 0x71, 0x96, 0x68, 0x4e, 0x46,
		0xf7, 0x20, 0x35, 0x53, 0x47, 0xf2, 0x8e, 0xe5, 0x90, 0x4f, 0x59, 0x09, 0x75, 0x94, 0xd1, 0xa0,
		0x52, 0x16, 0x11, 0x70, 0x56, 0x52, 0xd2, 0x62, 0xa3, 0xcd, 0xca, 0x4a, 0xab, 0x18, 0x50, 0x96,
		0x94, 0x01, 0x69, 0x24, 0x5d, 0x92, 0x00, 0x16, 0x24, 0x3e, 0xe3, 0x54, 0x41, 0x45, 0x2d, 0xc5,
		0xe4, 0x89, 0x69, 0x60, 0x4e, 0x2a, 0x89, 0xa2, 0xb0, 0x58, 0x50, 0x5e, 0x67, 0x44, 0xce, 0xeb,
		0x36, 0xe1, 0x7d, 0xcf, 0x3a, 0xa1, 0x17, 0x6a, 0x94, 0x40, 0xcb, 0x2f, 0xff, 0x36, 0xfb, 0xfe,
		0xdf, 0xd3, 0xaf, 0xff, 0xf4, 0x91, 0xda, 0xdf, 0xcf, 0x7c, 0xfb, 0x8e, 0xc9, 0x94, 0xc7, 0x28,
		0x0f, 0xdc, 0xa0, 0xaf, 0xc6, 0xa4, 0x26, 0xa3, 0x41, 0xa3, 0x40, 0xa3, 0xf6, 0x46, 0xa3, 0x24,
		0xca, 0x5a, 0xd7, 0x73, 0x29, 0xa9, 0x52, 0x42, 0x73, 0x84, 0x4a, 0xa5, 0x3e, 0x08, 0xfc, 0x09,
		0xfc, 0xe9, 0xf8, 0xf9, 0x93, 0xba, 0x46, 0x96, 0x9f, 0x3f, 0x49, 0x60, 0x0b, 0xed, 0xcb, 0xa0,
		0xf3, 0xf2, 0x2a, 0xf6, 0xe5, 0xd3, 0x5d, 0x24, 0x61, 0x1a, 0x06, 0x03, 0x06, 0x43, 0xdf, 0x60,
		0xc8, 0xc2, 0xbe, 0x11, 0xf8, 0x37, 0x6c, 0x74, 0xb4, 0xe9, 0x80, 0x16, 0x2d, 0x50, 0xa4, 0x07,
		0x9a, 0x34, 0x41, 0x5b, 0xfb, 0x4d, 0x58, 0x81, 0x02, 0xac, 0x81, 0x29, 0xab, 0x60, 0xdc, 0x3a,
		0x18, 0xb7, 0x12, 0xc5, 0x58, 0x0b, 0x35, 0xab, 0xa1, 0x68, 0x3d, 0xf4, 0x69, 0x47, 0x01, 0x96,
		0x40, 0x97, 0x86, 0x68, 0xd2, 0x11, 0xf5, 0x17, 0x50, 0xac, 0xa1, 0x57, 0x0c, 0xf7, 0x14, 0x12,
		0xf6, 0x19, 0xc7, 0x2f, 0x2e, 0x54, 0x68, 0x92, 0xc9, 0x08, 0xd0, 0x87, 0xd1, 0x8d, 0x7c, 0x7a,
		0xd7, 0x97, 0xce, 0xae, 0x3d, 0xe5, 0xb8, 0x9d, 0x64, 0x00, 0xaa, 0x88, 0x57, 0xb6, 0xf3, 0x88,
		0x9d, 0xeb, 0xbb, 0x42, 0x31, 0x5c, 0x97, 0x0d, 0x45, 0xac, 0x0e, 0xb1, 0xba, 0x7d, 0xc5, 0xea,
		0x7c, 0xfa, 0xec, 0xfa, 0x89, 0x4f, 0x58, 0x20, 0xb8, 0xcb, 0x62, 0x75, 0xbf, 0x76, 0x71, 0xa2,
		0x5d, 0xc6, 0xec, 0x9a, 0x57, 0x75, 0x04, 0xec, 0xe0, 0x7f, 0x23, 0x60, 0x37, 0x2f, 0x01, 0x6e,
		0x20, 0x2e, 0x9b, 0x1a, 0xa1, 0xba, 0x4b, 0x85, 0xa1, 0x6a, 0x85, 0x9f, 0xe3, 0xff, 0x69, 0xb8,
		0x09, 0x3a, 0x85, 0xa0, 0x93, 0x49, 0x34, 0x0b, 0x42, 0x27, 0xf3, 0x98, 0xaa, 0x6d, 0x9c, 0xbe,
		0x52, 0xdd, 0x1a, 0x47, 0x4d, 0x3f, 0xce, 0xd2, 0x2d, 0x18, 0x5d, 0x5a, 0xe2, 0x9b, 0xc6, 0x6d,
		0xf3, 0x78, 0x57, 0x79, 0x47, 0x8e, 0x61, 0xa7, 0x04, 0xf1, 0xf0, 0xa7, 0x21, 0xeb, 0x26, 0x62,
		0xc0, 0x59, 0x3c, 0x08, 0x3d, 0x87, 0x44, 0xb6, 0x50, 0xe7, 0x11, 0xab, 0xa7, 0xdb, 0x25, 0x9b,
		0xb8, 0xbd, 0x02, 0x99, 0x00, 0x99, 0x00, 0x99, 0x00, 0x99, 0x30, 0x83, 0x74, 0x6d, 0x90, 0x89,
		0xa2, 0xc9, 0x44, 0xa3, 0x5e, 0x07, 0x97, 0x28, 0x2b, 0x97, 0x38, 0xbe, 0x18, 0xa7, 0x44, 0xd4,
		0xce, 0x68, 0x80, 0x33, 0xfb, 0x5e, 0xb4, 0x57, 0xc8, 0xc9, 0x54, 0xb2, 0xde, 0x02, 0xc3, 0x97,
		0xe7, 0xe0, 0xa4, 0xeb, 0x99, 0xb5, 0x38, 0xf5, 0x12, 0xf3, 0xa1, 0x5a, 0x59, 0x99, 0x5e, 0x59,
		0x76, 0x46, 0xab, 0x93, 0x61, 0x5e, 0xf8, 0xb8, 0x65, 0xbc, 0x60, 0x56, 0x2f, 0xe4, 0xca, 0x3d,
		0x0f, 0x8e, 0xad, 0xce, 0x5c, 0x71, 0xc1, 0x50, 0x6c, 0x9e, 0x07, 0x52, 0x8a, 0x2c, 0x37, 0x9f,
		0x01, 0x90, 0x22, 0x0a, 0xce, 0x1d, 0x16, 0xdb, 0xdc, 0x8d, 0x72, 0x2d, 0xd9, 0xb4, 0xfa, 0x77,
		0x66, 0x10, 0x8e, 0x93, 0xc1, 0x71, 0x32, 0x46, 0x44, 0xc5, 0x92, 0x6c, 0x93, 0x5c, 0xf9, 0xc0,
		0x82, 0x7e, 0xa6, 0xb8, 0xe5, 0x3a, 0x62, 0xb1, 0x81, 0x23, 0x16, 0x17, 0x97, 0x44, 0xba, 0xc3,
		0xe0, 0x31, 0x9c, 0xa8, 0x98, 0x43, 0x82, 0x65, 0x1b, 0x7c, 0x57, 0xee, 0xdf, 0x91, 0x7f, 0x52,
		0xf2, 0x67, 0x9d, 0xdc, 0x5a, 0x7f, 0xf9, 0xf7, 0x7f, 0xf9, 0xd7, 0xbf, 0xfe, 0xd7, 0x43, 0x52,
		0xaf, 0x37, 0xdb, 0xd5, 0xda, 0x97, 0xaf, 0xdf, 0xfe, 0xf7, 0xff, 0x9d, 0xbf, 0x39, 0xbb, 0xf8,
		0x74, 0xf7, 0x6f, 0xdf, 0x90, 0xce, 0xdf, 0x2a, 0x05, 0x03, 0xad, 0x8a, 0xf3, 0x50, 0xaa, 0xc3,
		0x4e, 0x3c, 0x97, 0xe2, 0x98, 0x93, 0xad, 0x0b, 0x74, 0x14, 0x07, 0x9c, 0xb8, 0x3d, 0x37, 0x70,
		0xd8, 0x73, 0x7e, 0x7a, 0x33, 0x1e, 0x60, 0x98, 0xda, 0x34, 0x41, 0x6d, 0x8e, 0x8a, 0xda, 0x24,
		0x79, 0xe3, 0xe9, 0x63, 0x49, 0xb9, 0xc6, 0xb1, 0xd1, 0xc7, 0xc3, 0x69, 0x5a, 0xcd, 0xdb, 0xd6,
		0x6d, 0xfb, 0xba, 0x79, 0x8b, 0xc3, 0xa2, 0x8d, 0x18, 0x69, 0x49, 0x13, 0x5d, 0x84, 0x81, 0x86,
		0xef, 0x09, 0x03, 0x0d, 0x03, 0x7d, 0x2c, 0x06, 0xfa, 0xf6, 0xf6, 0xf6, 0x16, 0xa6, 0xb9, 0x70,
		0xaf, 0x6e, 0x37, 0x27, 0xc2, 0xd6, 0x8f, 0xfd, 0x28, 0xd8, 0xd9, 0xd8, 0xb2, 0x95, 0xa1, 0xdb,
		0xe4, 0xb8, 0xd3, 0xfa, 0x30, 0x2e, 0x3f, 0xbc, 0x39, 0x6b, 0xdb, 0x81, 0xf1, 0xa6, 0x3d, 0x58,
		0xab, 0xf4, 0x0d, 0x9c, 0x15, 0x96, 0xae, 0xec, 0xfd, 0x9c, 0x8b, 0x20, 0x58, 0x11, 0xf1, 0x45,
		0x22, 0xc1, 0xb0, 0x86, 0xd7, 0x83, 0x62, 0x81, 0x62, 0x6d, 0xa1, 0x58, 0x8d, 0xb6, 0x04, 0xc5,
		0x6a, 0x1f, 0x2c, 0xc5, 0x6a, 0x34, 0x6f, 0xc0, 0xb2, 0x96, 0x59, 0x56, 0xeb, 0xa6, 0x0d, 0x96,
		0x75, 0xf0, 0x2c, 0x2b, 0x08, 0x85, 0x25, 0xc5, 0x92, 0xce, 0x32, 0x6e, 0x95, 0x6f, 0x84, 0x17,
		0xee, 0x85, 0x52, 0x0d, 0x11, 0x2c, 0xe5, 0x7f, 0xf3, 0xc7, 0x3b, 0x88, 0x81, 0x1b, 0x83, 0x46,
		0x2d, 0x01, 0x4d, 0xce, 0xe5, 0x3a, 0x84, 0x14, 0x43, 0x15, 0x37, 0xe3, 0xfc, 0xfc, 0x42, 0xbc,
		0x44, 0xcc, 0xfa, 0xcb, 0x5b, 0xeb, 0x6c, 0x4e, 0x88, 0x47, 0x29, 0x57, 0x67, 0x43, 0x0f, 0x64,
		0xfd, 0x75, 0x5e, 0x68, 0x53, 0x8f, 0xf8, 0x6e, 0xf6, 0x62, 0x1d, 0x16, 0x8b, 0xb3, 0xfd, 0xca,
		0x3c, 0xf5, 0xbc, 0xf0, 0x89, 0x39, 0x56, 0xaa, 0x9c, 0x56, 0x76, 0xcb, 0xa3, 0x27, 0x49, 0x15,
		0x37, 0xfb, 0xf7, 0xd2, 0x1d, 0x43, 0x17, 0x96, 0x75, 0x41, 0x65, 0x19, 0x4f, 0xd2, 0xbd, 0x78,
		0x6c, 0xc9, 0x38, 0x17, 0x8f, 0xad, 0x83, 0x3b, 0xa8, 0x22, 0xd7, 0x49, 0xa9, 0x87, 0x7c, 0x50,
		0x45, 0x9e, 0x93, 0x50, 0x77, 0x74, 0x50, 0xc5, 0xf8, 0x84, 0x75, 0xf9, 0xb3, 0xbf, 0xa5, 0x8e,
		0x66, 0x3f, 0x9c, 0x86, 0x0c, 0x38, 0xa6, 0x37, 0x3a, 0x9c, 0xe6, 0xa9, 0xd3, 0x73, 0x88, 0xd4,
		0x7b, 0x0c, 0xaa, 0x9c, 0x2c, 0x68, 0x1d, 0x45, 0x6d, 0xa2, 0x94, 0xa8, 0x9b, 0xe0, 0x22, 0xd6,
		0x81, 0xd5, 0x26, 0xca, 0xa8, 0x82, 0x3c, 0xcb, 0xb0, 0xf6, 0x52, 0x9b, 0x28, 0x7f, 0x56, 0xca,
		0x92, 0x0d, 0x6f, 0x14, 0xfa, 0x88, 0xef, 0x9f, 0xb3, 0x58, 0x85, 0x7c, 0x1d, 0xa3, 0xbe, 0x3c,
		0x4e, 0x5f, 0x3e, 0x7b, 0x16, 0x77, 0x3d, 0x97, 0xc7, 0x82, 0x70, 0xe6, 0x31, 0x1a, 0x4b, 0x55,
		0xc5, 0x14, 0x2f, 0xa5, 0xcd, 0xfa, 0x79, 0xa3, 0x79, 0xde, 0x28, 0x5a, 0x3a, 0x65, 0xab, 0xb5,
		0x35, 0x8e, 0x5d, 0x9e, 0xf2, 0x5b, 0xf9, 0xca, 0x27, 0x33, 0x82, 0x60, 0x99, 0x3b, 0x78, 0xd6,
		0xb4, 0xcd, 0x5c, 0x25, 0xab, 0xca, 0x65, 0x53, 0x85, 0x49, 0xe8, 0x5a, 0x7b, 0xaa, 0x7c, 0x70,
		0xad, 0x9e, 0xf4, 0xaa, 0x8f, 0x52, 0x68, 0x42, 0x2a, 0x17, 0x38, 0x2c, 0x42, 0x62, 0x97, 0x22,
		0x84, 0x3a, 0xc7, 0xe3, 0x9a, 0x8d, 0x9a, 0xac, 0xbd, 0x69, 0xf3, 0xc7, 0xe7, 0x16, 0xa5, 0x7a,
		0xa6, 0x43, 0x29, 0x85, 0x6b, 0xa1, 0x55, 0xf8, 0xf1, 0xbb, 0x66, 0xb4, 0xd3, 0xda, 0x75, 0x9b,
		0x55, 0x03, 0xba, 0x76, 0x6e, 0xbd, 0x1d, 0x6e, 0x88, 0x54, 0xb3, 0xe0, 0x7c, 0x96, 0x38, 0x91,
		0xbe, 0xb1, 0xea, 0x30, 0x74, 0x39, 0xd1, 0xbd, 0xa9, 0xcd, 0xdb, 0x90, 0x20, 0xb1, 0xa4, 0xa6,
		0xe5, 0xd7, 0x53, 0xb7, 0x37, 0x7b, 0x94, 0xae, 0x1d, 0x06, 0x82, 0xba, 0x01, 0xe3, 0x96, 0x1b,
		0x4f, 0x2a, 0x1e, 0x95, 0x09, 0x13, 0x14, 0x77, 0x8b, 0xe2, 0xe6, 0x5b, 0xfc, 0xc3, 0xd2, 0xe4,
		0x83, 0x6c, 0xe6, 0xe4, 0x46, 0x24, 0x52, 0x73, 0xc9, 0x67, 0x77, 0x11, 0xd4, 0xc2, 0x3f, 0x88,
		0x3d, 0x20, 0xf6, 0x70, 0x78, 0xb1, 0x07, 0x37, 0x7a, 0x6c, 0x8d, 0x04, 0x3e, 0x43, 0x40, 0x32,
		0x08, 0x63, 0x41, 0xba, 0xae, 0x88, 0x75, 0xc2, 0x11, 0x37, 0x0a, 0x63, 0x65, 0x0b, 0x02, 0x97,
		0x26, 0xa8, 0x56, 0xef, 0xeb, 0xe4, 0xb6, 0xf3, 0xe5, 0xbe, 0x41, 0x6e, 0x3b, 0xc3, 0x5f, 0x1b,
		0xd9, 0x8f, 0xe1, 0xef, 0xcd, 0xfb, 0x3a, 0x69, 0x8d, 0x7f, 0xbf, 0xba, 0xaf, 0x93, 0xab, 0x4e,
		0xed, 0xe1, 0xe1, 0xbc, 0xf6, 0xf9, 0xf2, 0x55, 0x7e, 0xe0, 0xc5, 0xe8, 0xcb, 0x6a, 0x5f, 0xaa,
		0xf7, 0x0d, 0xd2, 0xec, 0x8c, 0xff, 0x71, 0x79, 0x5f, 0x27, 0xcd, 0x4e, 0xad, 0x56, 0x29, 0xda,
		0x7c, 0xee, 0x21, 0x0c, 0xb0, 0x6f, 0x77, 0x6a, 0x89, 0xab, 0xbd, 0x39, 0xab, 0x9f, 0xaf, 0xc8,
		0xc5, 0x78, 0x73, 0xd6, 0x68, 0x5e, 0xaf, 0xf9, 0xa0, 0x7d, 0x7b, 0xde, 0xbc, 0x6a, 0x8d, 0x3e,
		0xe4, 0x8c, 0xf8, 0x54, 0xd8, 0xd9, 0x27, 0xcd, 0xe6, 0x7d, 0x8b, 0xdc, 0x76, 0x1e, 0x1e, 0xce,
		0xcf, 0xff, 0xb6, 0xe2, 0xd3, 0xfb, 0x4b, 0x72, 0x35, 0x7c, 0xc9, 0xa3, 0x2b, 0x4a, 0xc8, 0x08,
		0x7f, 0x0a, 0x85, 0x45, 0xad, 0x47, 0xea, 0xb9, 0x8e, 0xf5, 0xe3, 0x2f, 0x8f, 0x2d, 0x2b, 0x09,
		0xdc, 0x94, 0x93, 0x58, 0xa3, 0x7d, 0x21, 0xcb, 0xcc, 0x31, 0x11, 0x20, 0x81, 0x23, 0x6c, 0xc8,
		0xbb, 0xde, 0xe0, 0x7d, 0x85, 0xf3, 0xbe, 0x90, 0xbb, 0x7d, 0x57, 0xe3, 0xe4, 0xe3, 0xd1, 0xf8,
		0x1d, 0x33, 0xbe, 0x26, 0x18, 0x1f, 0x18, 0xdf, 0x1e, 0xce, 0xc1, 0xcb, 0xac, 0x13, 0x51, 0x92,
		0x79, 0xeb, 0x98, 0x8e, 0xc2, 0x8b, 0xb8, 0xeb, 0x53, 0xfe, 0xa2, 0x6e, 0x36, 0xc6, 0x13, 0xc0,
		0x53, 0x84, 0xdd, 0x38, 0x7a, 0xbb, 0xc1, 0xfc, 0x48, 0xbc, 0xe8, 0x98, 0x8b, 0x4b, 0xec, 0x51,
		0xef, 0x59, 0x46, 0x8f, 0x78, 0x8f, 0xba, 0x04, 0xce, 0xa9, 0xb5, 0x79, 0x27, 0xc1, 0x3a, 0xf3,
		0xfb, 0xbe, 0x18, 0xfa, 0x96, 0xdb, 0xae, 0x1c, 0xd7, 0x19, 0x94, 0xd1, 0xcd, 0x1c, 0x81, 0xde,
		0x72, 0xb2, 0x7c, 0xfa, 0x78, 0xd6, 0xa4, 0xe4, 0x10, 0x5b, 0x86, 0x85, 0x38, 0x9d, 0x6a, 0xab,
		0x0f, 0x17, 0xb4, 0x70, 0x32, 0x19, 0x0b, 0x2a, 0x12, 0x8d, 0x03, 0xa8, 0x46, 0xe3, 0xe1, 0x82,
		0x82, 0x4a, 0x9e, 0xc6, 0xa6, 0xc3, 0xd8, 0x0f, 0x55, 0x12, 0xfc, 0xf2, 0xfb, 0xa1, 0x46, 0xd3,
		0xb0, 0xff, 0xc1, 0x5e, 0x54, 0xf6, 0x26, 0x2b, 0x1f, 0xdc, 0x58, 0xbc, 0x13, 0x42, 0x32, 0x87,
		0xfb, 0xa3, 0x1b, 0xbc, 0xf7, 0x58, 0x2a, 0x8d, 0x92, 0x15, 0xaa, 0x95, 0x8f, 0xf4, 0x79, 0x66,
		0x64, 0x5b, 0xe2, 0xc5, 0x54, 0x7e, 0xe6, 0x0e, 0xe3, 0xcc, 0xf9, 0x36, 0x7d, 0xd0, 0x20, 0xf1,
		0xbc, 0x43, 0x6f, 0xbb, 0x9f, 0xca, 0xf8, 0x85, 0x5c, 0x45, 0x86, 0xa5, 0xd3, 0x2b, 0xf9, 0xc7,
		0xe8, 0xb1, 0xf5, 0xe9, 0xdd, 0xe8, 0xfb, 0x76, 0x78, 0x84, 0x68, 0x56, 0x23, 0x46, 0x1c, 0x97,
		0x33, 0x5b, 0x30, 0x87, 0x74, 0x79, 0x48, 0x1d, 0x9b, 0xc6, 0x0a, 0x27, 0x8a, 0xae, 0x9d, 0x29,
		0x6f, 0xad, 0x82, 0xc2, 0xa9, 0x49, 0x95, 0x2c, 0x67, 0x28, 0xdf, 0x7a, 0x75, 0xe4, 0xea, 0x6a,
		0xea, 0xa8, 0xab, 0xb1, 0x50, 0x57, 0x63, 0x0a, 0x43, 0x35, 0x8a, 0x05, 0x24, 0x8b, 0x04, 0xca,
		0x78, 0xf6, 0x46, 0xe1, 0x8d, 0x96, 0x66, 0x2b, 0x9b, 0x37, 0x14, 0x3d, 0x97, 0xa4, 0xce, 0xf9,
		0xb1, 0xb5, 0x70, 0x8c, 0xc1, 0x6c, 0xb1, 0x6e, 0x18, 0xcc, 0x56, 0xe9, 0x2e, 0xdd, 0xb1, 0x96,
		0x5f, 0x7e, 0xcc, 0x55, 0xcf, 0x06, 0x17, 0xb5, 0xec, 0x35, 0xd0, 0xe5, 0x3a, 0xcf, 0x24, 0xdb,
		0x3b, 0xcf, 0x9a, 0x2d, 0xb0, 0xb9, 0x75, 0x3c, 0xe1, 0x13, 0x4b, 0xd6, 0x2e, 0x09, 0xce, 0x24,
		0xd9, 0xc4, 0xb7, 0x8b, 0x3c, 0x8b, 0x24, 0xe5, 0xd7, 0x95, 0x62, 0x9a, 0x07, 0xb4, 0xa5, 0x9a,
		0x07, 0xb4, 0xd1, 0x3c, 0xc0, 0x42, 0xf3, 0x80, 0xb5, 0xee, 0x18, 0x9a, 0x07, 0xc0, 0xc9, 0x41,
		0xf3, 0x00, 0x34, 0x0f, 0x40, 0x2c, 0x1d, 0xcd, 0x03, 0x8c, 0xc6, 0x05, 0x54, 0x1f, 0x11, 0x15,
		0xe8, 0xc5, 0x28, 0xde, 0x2a, 0x05, 0x44, 0x05, 0x7a, 0x71, 0xa3, 0x50, 0x81, 0x6e, 0x36, 0x9e,
		0xb5, 0xf6, 0xa6, 0x51, 0x81, 0x5e, 0x98, 0x16, 0x5a, 0xa8, 0x40, 0x2f, 0x4c, 0xd7, 0x50, 0x81,
		0x8e, 0x0a, 0xf4, 0xbd, 0x29, 0x2e, 0x2a, 0xd0, 0x51, 0x81, 0x0e, 0x07, 0x16, 0x0e, 0xec, 0x01,
		0x3a, 0xb0, 0x6e, 0xf4, 0xd8, 0x3e, 0x9a, 0x0a, 0xf4, 0xbb, 0x2f, 0xf7, 0x75, 0x72, 0x4b, 0x49,
		0xef, 0x1d, 0xf9, 0xa1, 0xf3, 0xb9, 0xfe, 0xa6, 0xf5, 0x5a, 0xbb, 0xab, 0x55, 0x17, 0xff, 0x76,
		0x57, 0xfb, 0x5c, 0x7f, 0x73, 0xf5, 0x5a, 0xad, 0xae, 0xf8, 0xe4, 0x9b, 0x55, 0x73, 0xd4, 0xbe,
		0x54, 0xab, 0xd5, 0x51, 0xed, 0xf9, 0x5c, 0x3d, 0xfa, 0x7d, 0xbd, 0xd1, 0xf9, 0x26, 0xfb, 0x75,
		0xf8, 0xdf, 0x49, 0x45, 0x7b, 0xae, 0x8b, 0x6b, 0xb5, 0xea, 0x6c, 0x21, 0x7b, 0xfa, 0xf3, 0x73,
		0xf3, 0xb5, 0xf6, 0xa5, 0xda, 0xb8, 0xaf, 0x93, 0xc6, 0xa4, 0xa8, 0xbd, 0x91, 0x4e, 0x72, 0x93,
		0x5e, 0x8e, 0xb2, 0x76, 0xf3, 0xbc, 0x31, 0x25, 0x80, 0xe7, 0x6f, 0xcf, 0xee, 0xee, 0x2e, 0x1a,
		0xcd, 0x9b, 0xb3, 0x94, 0x12, 0x66, 0xff, 0x6a, 0x4c, 0xfe, 0xb9, 0x50, 0xc3, 0xde, 0xeb, 0xad,
		0x2c, 0x6d, 0xef, 0xb1, 0x9b, 0x7a, 0x89, 0xcb, 0xd2, 0xfb, 0x5e, 0xd8, 0xa5, 0xde, 0xa4, 0x44,
		0xfa, 0xc7, 0x5f, 0x1e, 0xdb, 0xa8, 0x4b, 0x2f, 0xb2, 0x2e, 0x3d, 0xc7, 0x82, 0x83, 0x0e, 0x16,
		0x4e, 0x07, 0x51, 0x98, 0x0e, 0x22, 0x08, 0x22, 0x98, 0x4f, 0x02, 0x50, 0x98, 0x3e, 0xbe, 0x17,
		0x14, 0xa6, 0xc3, 0x6e, 0xc0, 0x6e, 0xe4, 0x95, 0x00, 0x14, 0xa6, 0xaf, 0x93, 0x46, 0x14, 0xa6,
		0x2f, 0x30, 0x42, 0x14, 0xa6, 0xa3, 0x30, 0x1d, 0x3b, 0x89, 0x28, 0x4c, 0x47, 0x61, 0xba, 0x04,
		0xc1, 0x42, 0x61, 0x3a, 0xa8, 0xe4, 0x29, 0xed, 0x45, 0xa0, 0x30, 0xfd, 0xd8, 0x0b, 0xd3, 0x65,
		0x76, 0x87, 0x8e, 0xb1, 0x30, 0xbd, 0xbd, 0xe3, 0xc2, 0xf4, 0xb6, 0xf1, 0xc2, 0x74, 0x54, 0xa0,
		0xee, 0xb9, 0x02, 0xb5, 0x8d, 0x0a, 0x54, 0xf3, 0x15, 0xa8, 0x6d, 0x54, 0xa0, 0xce, 0x06, 0x41,
		0x77, 0x59, 0x81, 0xda, 0x46, 0x05, 0xea, 0x62, 0x05, 0x6a, 0x1b, 0x15, 0xa8, 0xd2, 0xc0, 0x5a,
		0x70, 0x05, 0x6a, 0xbb, 0x88, 0x0a, 0x54, 0xaf, 0x49, 0x7c, 0x91, 0xe4, 0xaf, 0x41, 0x1d, 0x5d,
		0x9f, 0xaf, 0x0a, 0xb5, 0x5e, 0x96, 0x2a, 0xd4, 0xe3, 0x2e, 0x41, 0x2d, 0xba, 0xfe, 0x34, 0xb7,
		0x6b, 0x35, 0x59, 0xfb, 0xc4, 0x0d, 0x44, 0x23, 0x97, 0x3e, 0x8c, 0x24, 0xa5, 0x9d, 0xe3, 0xd2,
		0x5f, 0x69, 0xd0, 0x2f, 0x04, 0x10, 0x3e, 0xaa, 0x6c, 0xd2, 0xff, 0x27, 0xf5, 0x92, 0xf4, 0x6e,
		0x1a, 0x57, 0x75, 0xd9, 0x38, 0xc7, 0x0f, 0x9c, 0xda, 0xa9, 0x51, 0xfa, 0xde, 0xed, 0xbb, 0xb2,
		0xce, 0xcc, 0x70, 0x99, 0x59, 0x9f, 0x0a, 0xf7, 0x31, 0xfd, 0xfa, 0x2c, 0xe9, 0xbc, 0x90, 0xd0,
		0xd1, 0x47, 0xfa, 0xac, 0xbe, 0x2a, 0xb7, 0x07, 0xb5, 0x2a, 0xa5, 0x00, 0x2b, 0x15, 0xc7, 0x44,
		0xa1, 0x34, 0x4e, 0xab, 0xa4, 0x3a, 0xab, 0xdb, 0x1a, 0x31, 0xd1, 0x1d, 0xf3, 0x23, 0xe5, 0xea,
		0xb6, 0xa2, 0xaa, 0xab, 0xe7, 0xd6, 0xa2, 0x94, 0x24, 0xba, 0x70, 0xb7, 0x75, 0x79, 0xbf, 0x68,
		0x16, 0x96, 0xee, 0x46, 0xdb, 0x46, 0x4c, 0x0c, 0x18, 0x0f, 0x98, 0x58, 0x91, 0xb9, 0xb8, 0x76,
		0x8c, 0x47, 0xfb, 0x72, 0xf9, 0x8c, 0x86, 0x9c, 0xdb, 0x21, 0xbd, 0x59, 0xde, 0xc7, 0x10, 0x03,
		0x37, 0xb6, 0x54, 0x5c, 0x83, 0xe3, 0x76, 0x5b, 0x73, 0x2e, 0xd7, 0x21, 0x44, 0x33, 0x15, 0xe4,
		0x7f, 0x1c, 0x9a, 0x79, 0x6b, 0x9d, 0xcd, 0xc9, 0xf0, 0x38, 0x82, 0xb3, 0x37, 0xf1, 0x0d, 0x03,
		0xef, 0x65, 0x12, 0x3b, 0x48, 0x35, 0xcd, 0xca, 0xee, 0x53, 0xde, 0x70, 0x9f, 0x84, 0xf4, 0x6e,
		0x59, 0xad, 0xb2, 0x47, 0x53, 0x8a, 0x70, 0x0a, 0x69, 0x2c, 0x88, 0x3d, 0x18, 0xf1, 0xed, 0xbc,
		0x9e, 0xe1, 0xcc, 0x20, 0xc3, 0xee, 0x61, 0x13, 0xee, 0xe1, 0x51, 0xb9, 0x87, 0x0e, 0x15, 0x8c,
		0xd0, 0xc0, 0x21, 0xc2, 0xf5, 0x19, 0x71, 0x98, 0x27, 0xa8, 0x84, 0xaf, 0x98, 0x67, 0x03, 0xa7,
		0xf2, 0x81, 0x05, 0xfd, 0x2c, 0x8c, 0x53, 0x2e, 0x6f, 0xb1, 0x09, 0x5f, 0x71, 0x69, 0x4d, 0x2e,
		0x9b, 0xa7, 0xe7, 0x29, 0xe6, 0x90, 0x60, 0xd9, 0x82, 0xb4, 0xca, 0xc3, 0x83, 0xf3, 0xb9, 0xf5,
		0x4a, 0xd2, 0x1f, 0xcd, 0xf1, 0x8f, 0xdf, 0x87, 0x3f, 0xee, 0xe6, 0x7e, 0x54, 0x1f, 0x1e, 0xce,
		0x1f, 0x1e, 0x9c, 0xaf, 0x6b, 0xdf, 0x54, 0xff, 0xf9, 0xe5, 0xfe, 0xe1, 0xe1, 0xeb, 0x87, 0x07,
		0xd2, 0x99, 0xbb, 0x22, 0x47, 0xad, 0x57, 0x11, 0xb8, 0xe3, 0x47, 0x5e, 0x9c, 0x1f, 0x70, 0xb2,
		0xab, 0x0d, 0xb7, 0xc3, 0x2b, 0x1a, 0x69, 0x48, 0x8e, 0x9b, 0x3e, 0x70, 0xb8, 0x19, 0x3e, 0x62,
		0x59, 0x5a, 0xe2, 0xc5, 0x82, 0x0a, 0x37, 0x16, 0xae, 0xad, 0xd0, 0x15, 0x6f, 0x66, 0x6c, 0xc1,
		0x8d, 0xf1, 0x9a, 0xbb, 0x6e, 0x8c, 0x97, 0x53, 0x0c, 0x4d, 0x06, 0x70, 0xca, 0xd6, 0x1a, 0x2f,
		0x9f, 0x98, 0x16, 0xe2, 0x6b, 0xca, 0x37, 0xc7, 0x73, 0x03, 0xe2, 0xb8, 0xb1, 0x4d, 0xb9, 0xc3,
		0x1c, 0x12, 0x51, 0xfb, 0x0f, 0x26, 0x34, 0xb2, 0xfa, 0x56, 0xce, 0x76, 0x6a, 0xe5, 0x22, 0x92,
		0x2a, 0x60, 0xc2, 0x1d, 0xb6, 0x0e, 0x2c, 0xcb, 0x4f, 0x4e, 0x45, 0xe4, 0x7d, 0x60, 0x6b, 0x2f,
		0x79, 0x7e, 0x7f, 0x32, 0x1e, 0x92, 0x2e, 0x8d, 0x99, 0x43, 0xec, 0x30, 0x09, 0x04, 0xe3, 0xed,
		0x96, 0x46, 0xa2, 0x9f, 0x4a, 0xb3, 0x81, 0xe9, 0x69, 0x15, 0x95, 0xba, 0x62, 0x28, 0x64, 0x3a,
		0x85, 0x62, 0x24, 0x44, 0x6e, 0x3b, 0x4d, 0xdd, 0x61, 0x32, 0xe2, 0x40, 0xad, 0x75, 0x1e, 0xea,
		0x9a, 0x29, 0xfc, 0xba, 0xbe, 0x84, 0x39, 0xdf, 0x42, 0x53, 0x31, 0xb4, 0xfd, 0xb1, 0xb5, 0x4b,
		0xdc, 0xb8, 0x69, 0xb5, 0xda, 0xd7, 0xad, 0x56, 0xfd, 0xfa, 0xf2, 0xba, 0x7e, 0x7b, 0x75, 0xd5,
		0x68, 0x37, 0xae, 0x8e, 0x77, 0xd5, 0x4f, 0xa9, 0x5d, 0x51, 0x40, 0x86, 0x41, 0x59, 0x13, 0x84,
		0x62, 0x7e, 0x26, 0x90, 0x09, 0x90, 0x09, 0x90, 0x09, 0x90, 0x09, 0x90, 0x09, 0x90, 0x09, 0x90,
		0x89, 0x13, 0x21, 0x13, 0xbd, 0x90, 0x3f, 0x0d, 0x63, 0x0a, 0xa1, 0x2d, 0x74, 0xf9, 0xc4, 0xd2,
		0x64, 0xa0, 0x14, 0xa0, 0x14, 0xa0, 0x14, 0xa0, 0x14, 0xa0, 0x14, 0xa0, 0x14, 0xa0, 0x14, 0x27,
		0x47, 0x29, 0x4c, 0xc4, 0x28, 0x96, 0x67, 0x03, 0xa9, 0x00, 0xa9, 0x00, 0xa9, 0x00, 0xa9, 0x00,
		0xa9, 0x00, 0xa9, 0x00, 0xa9, 0x38, 0x05, 0x52, 0x31, 0x4c, 0x53, 0xf6, 0x18, 0xe5, 0x1a, 0x69,
		0xf6, 0xd3, 0x39, 0x40, 0x20, 0x40, 0x20, 0x4e, 0x82, 0x40, 0xa8, 0xe5, 0x6c, 0xaf, 0x53, 0x00,
		0xa5, 0x23, 0x1a, 0x24, 0x73, 0xba, 0xcb, 0x8a, 0xde, 0x4d, 0xc0, 0x77, 0xe1, 0xf0, 0x2d, 0x9b,
		0x53, 0x0e, 0xb0, 0x5e, 0x06, 0xeb, 0x7d, 0x1c, 0xa2, 0xb2, 0xdb, 0x1c, 0xf6, 0x32, 0xf2, 0x93,
		0x30, 0x11, 0xa6, 0xb2, 0x32, 0x96, 0xa7, 0x02, 0x5b, 0x01, 0x5b, 0x41, 0xb8, 0x03, 0xe1, 0x0e,
		0x84, 0x3b, 0xc0, 0x97, 0x10, 0xee, 0x38, 0x85, 0x70, 0x47, 0xca, 0x01, 0xcc, 0xe5, 0x65, 0xac,
		0x9c, 0x0d, 0xa4, 0x02, 0xa4, 0x02, 0xa4, 0x02, 0xa4, 0x02, 0xa4, 0x02, 0xa4, 0x02, 0xa4, 0xe2,
		0xf4, 0x48, 0x85, 0x91, 0x38, 0x05, 0x52, 0x33, 0x40, 0x2b, 0x40, 0x2b, 0x40, 0x2b, 0x40, 0x2b,
		0x40, 0x2b, 0x40, 0x2b, 0x8e, 0x88, 0x56, 0x1c, 0xfa, 0x89, 0x29, 0x29, 0xe6, 0x5c, 0x48, 0x77,
		0x82, 0xb1, 0x74, 0x7a, 0xbd, 0x7f, 0x8c, 0xbc, 0xf8, 0xd3, 0x6f, 0xd3, 0xaf, 0x3c, 0xd8, 0x73,
		0x53, 0x76, 0xd7, 0x9e, 0x38, 0x6b, 0xc6, 0xdb, 0x4b, 0xd2, 0xaf, 0x22, 0xcd, 0x06, 0x69, 0x93,
		0xcb, 0xd3, 0x6d, 0x4f, 0xbc, 0x62, 0x2d, 0x4e, 0xb3, 0x3d, 0xf1, 0x21, 0x9d, 0xaa, 0x93, 0x9a,
		0x19, 0xcb, 0x8d, 0x97, 0x5b, 0xe9, 0xe2, 0x30, 0x1d, 0x69, 0x25, 0x30, 0xb1, 0x96, 0x87, 0xdd,
		0xf5, 0xb5, 0x3c, 0xe7, 0xa2, 0xe4, 0xed, 0x77, 0xa7, 0x83, 0x95, 0x95, 0x82, 0x5a, 0x11, 0xca,
		0x9d, 0x8c, 0x32, 0x19, 0x81, 0xb3, 0x51, 0xd0, 0xfc, 0x76, 0xc3, 0xda, 0x9f, 0xd2, 0xd9, 0x28,
		0xcd, 0x9b, 0x16, 0xfa, 0xdd, 0x2e, 0xae, 0xca, 0x6d, 0xeb, 0xb6, 0x8d, 0xb3, 0x51, 0x8e, 0xc8,
		0xf9, 0x98, 0x39, 0x0f, 0x04, 0x2e, 0xc8, 0xe6, 0x15, 0x39, 0x49, 0x47, 0x64, 0xcd, 0x29, 0xfc,
		0xab, 0xce, 0x3d, 0x19, 0x1f, 0xb1, 0x2f, 0x71, 0x52, 0x4a, 0x28, 0x73, 0xf5, 0xf0, 0xb0, 0xff,
		0x3d, 0xf9, 0x37, 0x38, 0x5a, 0x45, 0xd2, 0x89, 0x39, 0xe5, 0xc3, 0x55, 0xe6, 0x5c, 0xf4, 0x95,
		0xc7, 0xab, 0xac, 0x70, 0xe5, 0xe7, 0xae, 0x2b, 0x8d, 0x5f, 0x3f, 0x79, 0x8d, 0x6b, 0x0f, 0x19,
		0x49, 0x15, 0x38, 0xfb, 0xf7, 0xd2, 0x3d, 0x43, 0x1f, 0x56, 0xe9, 0x83, 0xca, 0x42, 0x9e, 0xe0,
		0x39, 0x2e, 0x23, 0x77, 0x3a, 0xa7, 0x03, 0x9b, 0x5d, 0x8d, 0x93, 0x5b, 0xe0, 0xbc, 0x6e, 0x5a,
		0x7b, 0xc1, 0xdd, 0xa0, 0x2f, 0x75, 0x58, 0x4b, 0x01, 0x72, 0x1d, 0x46, 0x8c, 0x13, 0x27, 0x7c,
		0x0a, 0x08, 0x67, 0x34, 0xce, 0x11, 0xc5, 0x9a, 0xa6, 0x9a, 0x2c, 0x8e, 0x84, 0xbc, 0x43, 0xde,
		0x37, 0xad, 0x7d, 0xd2, 0x75, 0x7b, 0x44, 0x52, 0x6a, 0xe6, 0xe4, 0x3f, 0x47, 0x00, 0xa4, 0xf2,
		0x3e, 0x48, 0xfc, 0xf4, 0xbe, 0xf4, 0x9e, 0xee, 0xfd, 0x73, 0x16, 0x1a, 0xd8, 0xee, 0xc6, 0xc8,
		0xcb, 0xc5, 0xf4, 0x25, 0xb1, 0x67, 0x71, 0x17, 0x0f, 0xc2, 0x27, 0xe2, 0xfa, 0x29, 0x23, 0xa5,
		0xf9, 0x4f, 0x2c, 0x37, 0x23, 0x2e, 0x03, 0xb7, 0x3f, 0xd0, 0x15, 0x93, 0x8e, 0xba, 0xd1, 0x89,
		0x05, 0x15, 0x4c, 0xd2, 0xdc, 0x0c, 0xc7, 0xc0, 0xd0, 0xc0, 0xd0, 0x6c, 0x58, 0x7b, 0x16, 0x24,
		0x3e, 0xe3, 0xc3, 0x3d, 0x19, 0x58, 0x97, 0xd3, 0xb3, 0x2e, 0x12, 0xe7, 0x14, 0xc9, 0x9f, 0x4f,
		0x54, 0xbe, 0x63, 0xb0, 0xdc, 0xe8, 0xc8, 0x0f, 0xc1, 0x72, 0xa3, 0xd2, 0x1c, 0x81, 0xa5, 0x75,
		0x76, 0x90, 0x89, 0x33, 0x83, 0x24, 0x73, 0xb3, 0xa5, 0x73, 0xb2, 0xcd, 0x1d, 0x8b, 0x95, 0x4b,
		0x2c, 0x4d, 0xc6, 0xec, 0xcb, 0x76, 0x28, 0x56, 0x1e, 0xb1, 0x2d, 0x24, 0x42, 0x28, 0x9f, 0x47,
		0x6d, 0x2a, 0x7f, 0x5a, 0x21, 0x6f, 0x5a, 0x35, 0x5f, 0x5a, 0x27, 0x4f, 0x5a, 0x31, 0x3f, 0x5a,
		0x21, 0x0c, 0xa8, 0x93, 0x0f, 0xad, 0x9b, 0x07, 0x6d, 0x2c, 0x13, 0x57, 0x3f, 0x03, 0x57, 0x21,
		0xdf, 0x59, 0x2b, 0xcf, 0xb9, 0x80, 0xfc, 0xe6, 0x32, 0xad, 0x66, 0x41, 0xe1, 0xd7, 0x8e, 0xa9,
		0xe4, 0xd8, 0x37, 0xb9, 0x80, 0x54, 0xad, 0x33, 0x8b, 0xee, 0x39, 0x39, 0x00, 0x50, 0x00, 0x28,
		0x00, 0x14, 0x00, 0x0a, 0x00, 0x05, 0x80, 0xee, 0x09, 0x40, 0x73, 0x1a, 0x21, 0x85, 0x44, 0xad,
		0x29, 0xbc, 0xca, 0x27, 0x6c, 0x69, 0x28, 0xe9, 0x52, 0xf5, 0xc8, 0xff, 0x30, 0xee, 0xda, 0x83,
		0xb0, 0xb9, 0xe7, 0x1a, 0x5c, 0xe5, 0x2c, 0x2e, 0x63, 0xe0, 0xb6, 0x16, 0xe4, 0xe6, 0x97, 0xe9,
		0x54, 0x29, 0xa0, 0x72, 0x37, 0x1d, 0x03, 0xa7, 0x1b, 0x81, 0x08, 0x82, 0x08, 0x82, 0x08, 0x82,
		0x08, 0x82, 0x08, 0x82, 0x08, 0x1e, 0x0d, 0x8c, 0xea, 0x44, 0x53, 0x54, 0xdb, 0xc6, 0x00, 0x48,
		0x01, 0xa4, 0x00, 0x52, 0x00, 0x29, 0x80, 0x14, 0x40, 0x7a, 0xe0, 0x40, 0xea, 0x53, 0x61, 0x0f,
		0x98, 0x43, 0x38, 0xd5, 0x42, 0xd2, 0x15, 0xd3, 0x00, 0x4a, 0x01, 0xa5, 0x80, 0x52, 0x40, 0x29,
		0xa0, 0x14, 0x50, 0x7a, 0x12, 0x50, 0xaa, 0x11, 0xd0, 0x45, 0x18, 0x17, 0x90, 0x09, 0xc8, 0x04,
		0x64, 0x02, 0x32, 0x01, 0x99, 0xa7, 0x04, 0x99, 0x3a, 0x2e, 0x27, 0xfc, 0x4c, 0x80, 0x26, 0x40,
		0x13, 0xa0, 0x09, 0xd0, 0x04, 0x68, 0x9e, 0x14, 0x68, 0x0a, 0xc6, 0x7d, 0x37, 0xa0, 0x42, 0x2f,
		0x87, 0x68, 0x79, 0x16, 0x00, 0x29, 0x80, 0x14, 0x40, 0x0a, 0x20, 0x05, 0x90, 0x02, 0x48, 0x4b,
		0x0d, 0xa4, 0xc8, 0x26, 0x2f, 0x00, 0xc8, 0x56, 0x01, 0x1a, 0xb2, 0xc9, 0x0f, 0x87, 0x0a, 0xea,
		0x84, 0x52, 0x56, 0x4c, 0x03, 0x32, 0x08, 0x32, 0x08, 0x32, 0x08, 0x32, 0x08, 0x32, 0x08, 0x32,
		0x08, 0x32, 0x08, 0x32, 0x08, 0x32, 0x58, 0x6e, 0x32, 0xe8, 0xd1, 0x58, 0x10, 0xdb, 0x63, 0x94,
		0xcb, 0x33, 0xc0, 0x99, 0xb1, 0xa0, 0x7d, 0xa0, 0x7d, 0x7b, 0xa7, 0x7d, 0x0e, 0x15, 0x8c, 0xd0,
		0xc0, 0x21, 0xc2, 0xf5, 0x19, 0x71, 0x98, 0x27, 0xa8, 0x02, 0xeb, 0x6b, 0xc8, 0xd0, 0xbe, 0x0f,
		0x2c, 0xe8, 0x67, 0xe7, 0x53, 0x1d, 0x06, 0x07, 0x6b, 0x82, 0x84, 0x29, 0xaf, 0xdd, 0x65, 0x13,
		0x94, 0x6b, 0x1d, 0x60, 0x49, 0x68, 0xcc, 0x2f, 0x54, 0x08, 0xc6, 0x03, 0x69, 0x95, 0xa9, 0x3c,
		0x3c, 0x38, 0x9f, 0x5b, 0xaf, 0x24, 0xfd, 0xd1, 0x1c, 0xff, 0xf8, 0x7d, 0xf8, 0xe3, 0x6e, 0xee,
		0x47, 0xf5, 0xe1, 0xe1, 0xfc, 0xe1, 0xc1, 0xf9, 0xba, 0xf6, 0x4d, 0xf5, 0x9f, 0x5f, 0xee, 0x1f,
		0x1e, 0xbe, 0x7e, 0x78, 0x20, 0x9d, 0xb9, 0x2b, 0x6a, 0x95, 0x52, 0x62, 0x71, 0x98, 0x08, 0x13,
		0x3d, 0x13, 0x57, 0x4f, 0x03, 0x84, 0x06, 0x42, 0x23, 0x30, 0x83, 0xc0, 0x0c, 0x02, 0x33, 0x08,
		0xcc, 0x1c, 0xbf, 0x5b, 0x9b, 0x62, 0xa0, 0x66, 0xd7, 0xc4, 0xe5, 0x29, 0x00, 0xa1, 0x80, 0x50,
		0x40, 0x28, 0x20, 0x14, 0x10, 0x0a, 0x08, 0x2d, 0x35, 0x84, 0x62, 0x6f, 0xa3, 0x00, 0x20, 0x5b,
		0x05, 0x68, 0xd8, 0xdb, 0x28, 0x3b, 0x09, 0xd4, 0xef, 0x9b, 0xb8, 0x72, 0x16, 0x50, 0x41, 0x50,
		0x41, 0x50, 0x41, 0x50, 0x41, 0x50, 0x41, 0x50, 0xc1, 0x53, 0x03, 0x52, 0xad, 0x88, 0x0a, 0x5a,
		0x27, 0x02, 0x4a, 0x01, 0xa5, 0x80, 0x52, 0x40, 0x29, 0xa0, 0xf4, 0x54, 0xa1, 0x54, 0xc7, 0x13,
		0x85, 0xff, 0x09, 0xd0, 0x04, 0x68, 0x02, 0x34, 0x01, 0x9a, 0x00, 0xcd, 0xd3, 0x02, 0x4d, 0xee,
		0xf6, 0x35, 0xbb, 0x57, 0xac, 0x9e, 0x06, 0x50, 0x0a, 0x28, 0x05, 0x94, 0x02, 0x4a, 0x01, 0xa5,
		0x80, 0xd2, 0x93, 0x83, 0x52, 0xad, 0x58, 0xee, 0x8a, 0x79, 0x00, 0xa6, 0x00, 0x53, 0x80, 0x29,
		0xc0, 0x14, 0x60, 0x0a, 0x30, 0x3d, 0x0d, 0x30, 0xd5, 0x42, 0x50, 0xc0, 0x26, 0x60, 0x13, 0xb0,
		0x09, 0xd8, 0x04, 0x6c, 0x02, 0x36, 0x8f, 0x04, 0x36, 0xbf, 0xd2, 0x90, 0x85, 0xca, 0xbb, 0x20,
		0x08, 0x05, 0x4d, 0x57, 0x3a, 0xd7, 0xeb, 0xaf, 0xc4, 0xf6, 0x80, 0xf9, 0x34, 0xa2, 0x59, 0x0b,
		0x86, 0xca, 0xc5, 0x8c, 0x09, 0x4e, 0xcd, 0x57, 0x8f, 0xda, 0x2c, 0xbe, 0x98, 0xfc, 0x7a, 0x11,
		0x27, 0xdd, 0x99, 0x7f, 0xa4, 0xdf, 0x13, 0x0b, 0xd7, 0xce, 0x83, 0xbe, 0x95, 0x58, 0xf0, 0xc4,
		0x16, 0xc1, 0xc8, 0x52, 0xfe, 0xc6, 0xbd, 0x9f, 0xd2, 0xaf, 0xf9, 0x71, 0xf2, 0x2d, 0x9f, 0x26,
		0xbf, 0x7e, 0xfa, 0x6d, 0xe6, 0x5b, 0x3e, 0xfd, 0x36, 0xfd, 0x96, 0xaf, 0xd4, 0x96, 0x6d, 0xc3,
		0x92, 0x55, 0x44, 0x1e, 0x5b, 0x3f, 0xb1, 0xef, 0xd9, 0xd5, 0x5b, 0x5e, 0x40, 0x3e, 0x86, 0x91,
		0x9b, 0x59, 0xc8, 0x30, 0x8a, 0x95, 0x4c, 0x22, 0xcf, 0xbb, 0x91, 0xa4, 0x0f, 0xca, 0xb4, 0x41,
		0x99, 0x2e, 0xac, 0xa5, 0x09, 0x95, 0x82, 0xd5, 0x29, 0x37, 0x17, 0x98, 0x36, 0x75, 0x74, 0x58,
		0x20, 0x5c, 0xf1, 0xc2, 0x59, 0xae, 0xa5, 0x1f, 0xb7, 0x4c, 0xc9, 0x61, 0x57, 0x2b, 0x3f, 0x8e,
		0xa6, 0xfe, 0x96, 0xc6, 0x4c, 0x9e, 0x2d, 0xc7, 0x2e, 0xc9, 0x21, 0xbf, 0xf3, 0x18, 0x10, 0x4b,
		0xa1, 0xbc, 0x24, 0xf9, 0x9c, 0x34, 0x41, 0x0a, 0x6d, 0xea, 0x11, 0xdf, 0xcd, 0x2a, 0x45, 0x1d,
		0x16, 0x0b, 0x09, 0xe2, 0xf7, 0xa6, 0xe8, 0x9b, 0xe3, 0x61, 0x22, 0x98, 0x53, 0xa6, 0x3b, 0xea,
		0x72, 0xd7, 0xe9, 0x4b, 0xdd, 0xd2, 0x57, 0x66, 0xe0, 0x4b, 0x4f, 0x93, 0x14, 0x4a, 0xa5, 0x2a,
		0x7e, 0x12, 0x8b, 0xdc, 0x12, 0xa8, 0xc0, 0xd7, 0x83, 0x50, 0x58, 0xd5, 0x58, 0x50, 0x2e, 0x62,
		0xf2, 0xe4, 0x8a, 0x41, 0xf5, 0xfc, 0xfc, 0xe2, 0xfc, 0x7c, 0x16, 0x04, 0x7b, 0x77, 0x29, 0x62,
		0xbd, 0xb1, 0xce, 0xe2, 0x97, 0x58, 0x30, 0xff, 0xac, 0x66, 0x85, 0xdc, 0xca, 0x37, 0xc2, 0x0b,
		0x65, 0xae, 0x76, 0x79, 0x57, 0xe6, 0x72, 0xbf, 0xef, 0x8b, 0xb3, 0x5a, 0x4d, 0x86, 0xf1, 0xbf,
		0x4f, 0xf5, 0xeb, 0x23, 0x8b, 0x63, 0xda, 0x57, 0xf0, 0x14, 0x67, 0x21, 0xd0, 0x4a, 0xd7, 0x2d,
		0x4e, 0xa2, 0x28, 0xe4, 0x82, 0x39, 0x56, 0x18, 0x58, 0x62, 0xe0, 0xc6, 0xd6, 0x04, 0xb3, 0x65,
		0x9d, 0x48, 0x8d, 0x72, 0xb2, 0x59, 0x28, 0x1a, 0x96, 0x9a, 0xfb, 0xa3, 0x27, 0x54, 0xe0, 0xcc,
		0x26, 0x2a, 0xc9, 0xe6, 0x90, 0x2a, 0xd7, 0x62, 0x15, 0x44, 0x47, 0x5f, 0x0d, 0xd1, 0xd1, 0x8e,
		0x2a, 0xeb, 0xfa, 0x4a, 0xc2, 0x4a, 0xa4, 0xaf, 0x71, 0xd8, 0x11, 0xd9, 0x61, 0xeb, 0xc8, 0x44,
		0xe5, 0x83, 0x1b, 0x8b, 0x77, 0x42, 0x6c, 0x6e, 0xb3, 0x97, 0xfa, 0x8c, 0xef, 0x3d, 0x96, 0xbe,
		0x81, 0x2d, 0x5e, 0x46, 0xea, 0x22, 0xcd, 0x5c, 0xd9, 0xaa, 0xdf, 0x6e, 0xc0, 0xe0, 0xca, 0xcf,
		0xdc, 0x61, 0x9c, 0x39, 0xdf, 0xa6, 0xb7, 0x19, 0x24, 0x9e, 0x27, 0xf5, 0x74, 0x39, 0x49, 0xb9,
		0x06, 0x19, 0xdf, 0x20, 0xee, 0xaa, 0xcc, 0x7b, 0xb5, 0x60, 0x2e, 0xbf, 0xd6, 0x15, 0x0f, 0x5d,
		0x11, 0x9c, 0xf6, 0x7a, 0xae, 0x4d, 0x38, 0x15, 0xeb, 0xf5, 0x7a, 0x6a, 0x53, 0x66, 0xaf, 0x5e,
		0x27, 0x20, 0x23, 0x9e, 0xb4, 0xe6, 0xe3, 0x09, 0x9d, 0x5e, 0xd3, 0x62, 0x2c, 0x0f, 0x8d, 0x96,
		0xa5, 0xcf, 0x79, 0xed, 0x96, 0x34, 0x5d, 0x96, 0x36, 0x44, 0x0a, 0xf4, 0x58, 0x4e, 0x3d, 0xbf,
		0x77, 0xb7, 0x68, 0x9d, 0x1b, 0x90, 0x6e, 0x14, 0xe7, 0xf7, 0xa4, 0x46, 0xd7, 0xc3, 0x97, 0x82,
		0x2f, 0xb5, 0x61, 0xed, 0x13, 0x37, 0x10, 0xb9, 0x22, 0xa8, 0x12, 0x91, 0x53, 0xc9, 0xe8, 0xa5,
		0x04, 0xab, 0x54, 0x89, 0x56, 0xaa, 0x46, 0x29, 0xb5, 0xe3, 0x69, 0xea, 0x71, 0x34, 0x09, 0x0f,
		0x47, 0x29, 0x0a, 0x69, 0x30, 0xfa, 0xb8, 0xcf, 0x55, 0xda, 0x37, 0xfd, 0xda, 0x80, 0x5b, 0x61,
		0x22, 0xe4, 0xac, 0xf5, 0x78, 0x00, 0xcc, 0x35, 0xcc, 0x35, 0xcc, 0x35, 0xcc, 0x35, 0xcc, 0xf5,
		0x7e, 0xbd, 0xe5, 0x62, 0xfc, 0xc9, 0x1c, 0x6e, 0x98, 0xac, 0x3f, 0xf9, 0xfb, 0x70, 0xca, 0x5f,
		0xd3, 0x19, 0xf5, 0xdc, 0xc9, 0x20, 0xb6, 0x99, 0xfb, 0xc8, 0x78, 0x2e, 0x6f, 0x72, 0x72, 0xb1,
		0xa6, 0x33, 0x59, 0x87, 0x33, 0xb9, 0x0f, 0x67, 0xd2, 0x1e, 0xd0, 0x20, 0x60, 0x5e, 0x7e, 0x7e,
		0x32, 0x1e, 0x90, 0x8f, 0x9f, 0x34, 0xf2, 0xf2, 0x93, 0x26, 0xf8, 0x49, 0x89, 0xf9, 0xc9, 0x36,
		0x31, 0x9a, 0x89, 0x4d, 0x38, 0xec, 0x59, 0xe5, 0x74, 0xb6, 0xf5, 0xb1, 0x48, 0x45, 0xea, 0x2b,
		0x4d, 0x81, 0x55, 0x44, 0x4d, 0x57, 0xe4, 0x74, 0xc3, 0xf2, 0x25, 0x4e, 0x2a, 0x3b, 0xbc, 0x8c,
		0xb2, 0x94, 0x52, 0xdf, 0x28, 0xa4, 0x90, 0x5d, 0x1d, 0x6d, 0x3a, 0x57, 0x03, 0xe9, 0x5c, 0xca,
		0x4b, 0x57, 0x47, 0xf2, 0x96, 0x12, 0x6f, 0xcf, 0x3f, 0x5f, 0xbe, 0xd3, 0x43, 0xa3, 0x44, 0x90,
		0x28, 0x7c, 0x62, 0x5c, 0x05, 0x95, 0xa6, 0x83, 0xe5, 0xb0, 0xa9, 0x21, 0x8b, 0x4d, 0x4d, 0x60,
		0xd3, 0x09, 0x60, 0x53, 0x5e, 0x1a, 0x35, 0x19, 0x30, 0x70, 0xfb, 0x03, 0x42, 0x3d, 0xca, 0x7d,
		0x62, 0x87, 0x81, 0xe3, 0xe6, 0xce, 0x35, 0x5c, 0x29, 0x00, 0x2b, 0x67, 0x93, 0x5c, 0x52, 0x39,
		0xf2, 0xa5, 0x4c, 0xc2, 0x74, 0x04, 0xde, 0x94, 0xe0, 0xeb, 0x2a, 0x80, 0x31, 0x45, 0x30, 0xa6,
		0x10, 0x06, 0x15, 0x43, 0x11, 0x24, 0x24, 0xdf, 0xbe, 0x34, 0x99, 0x5b, 0x7a, 0xf7, 0xdd, 0x30,
		0xf4, 0x18, 0x0d, 0x54, 0x5e, 0xfb, 0xd8, 0x96, 0x37, 0x8a, 0xca, 0x1a, 0x79, 0xa3, 0x64, 0x08,
		0xc4, 0x80, 0xb3, 0x78, 0x10, 0x7a, 0x8e, 0x11, 0x43, 0x30, 0x9d, 0x0d, 0x86, 0x00, 0x86, 0xe0,
		0x88, 0x0d, 0x81, 0xc3, 0x6c, 0xd7, 0xa7, 0x9e, 0x54, 0x91, 0xd0, 0x92, 0x29, 0x50, 0x38, 0x54,
		0x6f, 0x99, 0xd0, 0xab, 0x4c, 0xa2, 0xe6, 0x37, 0xaa, 0xfb, 0x8f, 0x46, 0xfc, 0xc8, 0x25, 0xa7,
		0xe8, 0xb6, 0xd9, 0xbc, 0xbc, 0xbc, 0x6e, 0xd6, 0x2f, 0xdb, 0x37, 0x57, 0xad, 0xeb, 0xeb, 0xab,
		0x9b, 0xfa, 0xcd, 0x1b, 0xbd, 0x99, 0x4d, 0x2c, 0xee, 0x3a, 0xaf, 0x29, 0x55, 0x2b, 0xe5, 0xc9,
		0x5e, 0xdf, 0x68, 0xac, 0xb9, 0x86, 0x03, 0x9a, 0x63, 0xcd, 0xaf, 0x4b, 0xbc, 0xe6, 0x6a, 0x9e,
		0xaa, 0x9a, 0x0d, 0x52, 0x1f, 0xd5, 0x29, 0x0b, 0x23, 0x78, 0xa2, 0x3c, 0x70, 0x83, 0xbe, 0x31,
		0xe7, 0x60, 0x79, 0x3e, 0xb0, 0x02, 0xb0, 0x02, 0xb8, 0x07, 0x07, 0xe1, 0x1e, 0x8c, 0x95, 0xd7,
		0x94, 0x83, 0xb0, 0x3c, 0x1f, 0x8c, 0x01, 0x8c, 0x01, 0x5c, 0x04, 0xb8, 0x08, 0x70, 0x11, 0xe0,
		0x22, 0xc0, 0x45, 0x28, 0xbd, 0x8b, 0xe0, 0x51, 0xc1, 0x62, 0x41, 0x1e, 0x47, 0xaf, 0x59, 0xb5,
		0x64, 0x78, 0x76, 0x16, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00,
		0x30, 0x80, 0xf2, 0x33, 0x80, 0xf0, 0xc9, 0x5c, 0xfa, 0xc0, 0xaa, 0xc9, 0xc0, 0x07, 0xc0, 0x07,
		0x10, 0x1e, 0x2c, 0x7b, 0x78, 0x70, 0xaa, 0xb9, 0x06, 0x62, 0x83, 0xab, 0x26, 0x83, 0x19, 0x80,
		0x19, 0x80, 0x5b, 0x00, 0xb7, 0x00, 0x6e, 0x01, 0xdc, 0x02, 0xb8, 0x05, 0x07, 0xe1, 0x16, 0x18,
		0x4c, 0x1d, 0x58, 0x3d, 0x1d, 0x38, 0x01, 0x38, 0x01, 0x5c, 0x83, 0x43, 0x70, 0x0d, 0x0c, 0x26,
		0x0e, 0xac, 0x9e, 0x0e, 0xa6, 0x00, 0xa6, 0x00, 0xee, 0x01, 0xdc, 0x03, 0xb8, 0x07, 0x70, 0x0f,
		0xe0, 0x1e, 0xec, 0xc7, 0x3d, 0x30, 0x5a, 0xc8, 0x28, 0x79, 0xf2, 0xc1, 0x64, 0x9c, 0x74, 0x93,
		0x9c, 0x71, 0x77, 0x99, 0x8b, 0x51, 0xdb, 0x91, 0x0b, 0xf9, 0x9a, 0x5c, 0x4b, 0xbe, 0x8f, 0xce,
		0xf8, 0x5b, 0x3f, 0x7d, 0x37, 0xfc, 0xd6, 0x4f, 0x3f, 0xa6, 0xdf, 0xfa, 0x4b, 0xf6, 0xa5, 0x3b,
		0x2c, 0x5e, 0xf6, 0x68, 0xcc, 0x38, 0xe9, 0xba, 0x34, 0x26, 0x76, 0xc2, 0xf9, 0x10, 0x4b, 0x25,
		0x6b, 0x98, 0x57, 0xcc, 0x81, 0x52, 0x66, 0x94, 0x32, 0x6b, 0x5b, 0x00, 0x94, 0x32, 0xc3, 0xcd,
		0x80, 0x9b, 0x81, 0x88, 0x83, 0x7c, 0xc4, 0x01, 0xa5, 0xcc, 0x30, 0x04, 0x30, 0x04, 0xc7, 0x11,
		0x6f, 0xb8, 0x44, 0xbc, 0xa1, 0xb8, 0x78, 0xc3, 0x25, 0xe2, 0x0d, 0x3b, 0x8f, 0x37, 0x5c, 0x22,
		0xde, 0xb0, 0x27, 0x46, 0x80, 0x52, 0x66, 0xb0, 0x02, 0xb0, 0x02, 0xb8, 0x07, 0x28, 0x65, 0x86,
		0x31, 0x80, 0x31, 0x80, 0x8b, 0x00, 0x17, 0x01, 0x2e, 0x02, 0x5c, 0x04, 0xb8, 0x08, 0xc3, 0x45,
		0x43, 0x29, 0x33, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0xc0, 0x49,
		0x32, 0x00, 0x94, 0x32, 0x83, 0x0f, 0x80, 0x0f, 0x9c, 0x7a, 0x78, 0x10, 0xa5, 0xcc, 0x30, 0x03,
		0x30, 0x03, 0x70, 0x0b, 0xe0, 0x16, 0xc0, 0x2d, 0x80, 0x5b, 0x00, 0xb7, 0x00, 0xa5, 0xcc, 0xe0,
		0x04, 0xe0, 0x04, 0x70, 0x0d, 0x50, 0xca, 0x0c, 0x53, 0x00, 0x53, 0x00, 0xf7, 0x00, 0xee, 0x01,
		0xdc, 0x03, 0xb8, 0x07, 0xc7, 0xed, 0x1e, 0x1c, 0x49, 0x29, 0xb3, 0x72, 0x69, 0xae, 0x65, 0xa0,
		0xa2, 0xf9, 0x43, 0xfa, 0xe5, 0xdf, 0xba, 0x34, 0xfe, 0x6e, 0xf4, 0xd5, 0x3b, 0xac, 0x6b, 0x0e,
		0x13, 0xa1, 0x71, 0x2a, 0xf3, 0xdc, 0x68, 0xd4, 0x32, 0xa3, 0x96, 0x59, 0xdb, 0x04, 0xa0, 0x96,
		0x19, 0x7e, 0x06, 0xfc, 0x0c, 0x84, 0x1c, 0xe4, 0x43, 0x0e, 0xa8, 0x65, 0x86, 0x21, 0x80, 0x21,
		0x40, 0xef, 0x34, 0x04, 0x1c, 0xcc, 0x2f, 0x2e, 0x02, 0x0e, 0xe5, 0x59, 0x73, 0xec, 0x47, 0x4a,
		0x31, 0x02, 0xd4, 0x32, 0x83, 0x15, 0x80, 0x15, 0xc0, 0x3d, 0x40, 0x2d, 0x33, 0x8c, 0x01, 0x8c,
		0x01, 0x5c, 0x04, 0xb8, 0x08, 0x70, 0x11, 0xe0, 0x22, 0xc0, 0x45, 0x18, 0x2e, 0x1a, 0x6a, 0x99,
		0xc1, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x4e, 0x92, 0x01, 0xa0,
		0x96, 0x19, 0x7c, 0x00, 0x7c, 0xe0, 0xd4, 0xc3, 0x83, 0xa8, 0x65, 0x86, 0x19, 0x80, 0x19, 0x80,
		0x5b, 0x00, 0xb7, 0x00, 0x6e, 0x01, 0xdc, 0x02, 0xb8, 0x05, 0xa8, 0x65, 0x06, 0x27, 0x00, 0x27,
		0x80, 0x6b, 0x80, 0x5a, 0x66, 0x98, 0x02, 0x98, 0x02, 0xb8, 0x07, 0x70, 0x0f, 0xe0, 0x1e, 0xc0,
		0x3d, 0x38, 0x6e, 0xf7, 0xe0, 0x48, 0x6a, 0x99, 0x15, 0x8a, 0x72, 0x2d, 0x03, 0x55, 0xcc, 0x3f,
		0x67, 0x5f, 0xbb, 0xf3, 0x83, 0x99, 0x9f, 0xe8, 0x23, 0xf3, 0x58, 0xd0, 0xcf, 0xd6, 0x4b, 0xb2,
		0x7c, 0x79, 0x66, 0xac, 0x5c, 0xf1, 0x72, 0x1d, 0xc5, 0xcb, 0x28, 0x5e, 0x36, 0xc0, 0x93, 0xb4,
		0xf8, 0x91, 0x0a, 0x2f, 0xd2, 0x82, 0x0f, 0x45, 0x1e, 0xa4, 0x40, 0x1b, 0x75, 0x78, 0x8f, 0x79,
		0xbe, 0x63, 0x0c, 0x73, 0xb5, 0xf9, 0x8d, 0x02, 0xaf, 0xd1, 0xe2, 0x33, 0xe6, 0x79, 0x4c, 0x21,
		0x6b, 0xa9, 0xc6, 0x5b, 0x5e, 0x0b, 0xe2, 0x11, 0x1d, 0x53, 0xe8, 0xf7, 0x95, 0x86, 0x28, 0xa4,
		0xd6, 0x39, 0x35, 0x2c, 0x6e, 0xe0, 0xb0, 0x6d, 0x86, 0xb9, 0xf2, 0xc1, 0x8d, 0xc5, 0x3b, 0x21,
		0xf2, 0x75, 0x5e, 0x48, 0x95, 0xf3, 0xbd, 0xc7, 0x52, 0xbb, 0x1b, 0xe7, 0x83, 0xc2, 0x54, 0x04,
		0x67, 0x46, 0x34, 0x6e, 0x5a, 0xad, 0xf6, 0x75, 0xab, 0x55, 0xbf, 0xbe, 0xbc, 0xae, 0xdf, 0x5e,
		0x5d, 0x35, 0xda, 0x8d, 0xab, 0x1c, 0x93, 0xfc, 0xcc, 0x1d, 0xc6, 0x99, 0xf3, 0x6d, 0xfa, 0x58,
		0x41, 0xe2, 0x79, 0x5a, 0xab, 0x23, 0xc9, 0xce, 0xf4, 0x59, 0x59, 0x0e, 0xbb, 0xae, 0x49, 0xc0,
		0x36, 0x83, 0xde, 0x7a, 0x61, 0xda, 0xb0, 0x54, 0x15, 0x3b, 0x0c, 0x02, 0x66, 0x8b, 0x90, 0x13,
		0x91, 0x07, 0xda, 0x26, 0x70, 0xb6, 0x30, 0x6e, 0x9b, 0xa8, 0xe6, 0x22, 0x55, 0xb9, 0xc9, 0x94,
		0x0c, 0x89, 0x52, 0x25, 0x4f, 0xb2, 0xa4, 0x49, 0x99, 0x2c, 0x29, 0x93, 0x24, 0x0d, 0x72, 0xa4,
		0x67, 0x78, 0x72, 0x93, 0xa0, 0xc9, 0xda, 0xb3, 0x20, 0xf1, 0x19, 0xa7, 0x39, 0xb7, 0x44, 0x26,
		0xb4, 0xa7, 0x95, 0xe3, 0xda, 0xf7, 0x41, 0xe2, 0xa7, 0x37, 0xf3, 0x5a, 0x80, 0x72, 0x38, 0x54,
		0x30, 0x62, 0x87, 0x8e, 0x84, 0x5e, 0x4c, 0x87, 0x40, 0x25, 0xa0, 0x12, 0x9b, 0xd6, 0x5e, 0x70,
		0x37, 0xe8, 0xcb, 0x68, 0xc3, 0x4d, 0x11, 0x12, 0xee, 0xf8, 0x84, 0x3d, 0x8e, 0x60, 0x3b, 0xaf,
		0x88, 0x4f, 0xc7, 0x18, 0x96, 0xf1, 0x3a, 0x64, 0xfc, 0xa8, 0x64, 0x3c, 0xff, 0xf6, 0x60, 0xce,
		0xed, 0xc0, 0x6d, 0xb7, 0xc8, 0x9e, 0x05, 0xa7, 0x24, 0x09, 0x62, 0x41, 0xbb, 0x5e, 0xce, 0x9b,
		0xf5, 0x93, 0x58, 0xe4, 0xf6, 0x78, 0x15, 0x1c, 0xff, 0x20, 0x14, 0xd5, 0xf3, 0xf3, 0x8b, 0xf3,
		0xf3, 0x8b, 0x2e, 0x67, 0xf4, 0x8f, 0x30, 0x11, 0xc4, 0x0f, 0x1d, 0x56, 0x93, 0x89, 0x03, 0xbc,
		0xe7, 0x3c, 0xe4, 0x1f, 0x59, 0x1c, 0xd3, 0xbe, 0x46, 0x11, 0xd3, 0x54, 0x71, 0xad, 0x20, 0x14,
		0x96, 0x9d, 0xa9, 0x5d, 0xc2, 0xd3, 0xa5, 0xb2, 0x9e, 0x06, 0x2c, 0xb0, 0xe6, 0x6e, 0xd0, 0x72,
		0x63, 0x8b, 0x05, 0xe9, 0x87, 0xd2, 0x7b, 0x97, 0x1a, 0xfb, 0x78, 0xb3, 0xfa, 0xc4, 0xd2, 0xa7,
		0x26, 0xfe, 0xe8, 0xb1, 0x15, 0x1c, 0x63, 0x13, 0xdb, 0x78, 0x73, 0xea, 0xa6, 0xbe, 0x82, 0xfb,
		0x8d, 0x68, 0x7f, 0xa5, 0xe7, 0xd1, 0xaa, 0x61, 0x0b, 0x13, 0x03, 0xc6, 0x03, 0x26, 0x48, 0xe4,
		0x3b, 0xf9, 0xd1, 0x65, 0x6e, 0x14, 0x38, 0x14, 0xf0, 0xa5, 0xf4, 0x1c, 0xaa, 0x47, 0x13, 0x4f,
		0x48, 0xa4, 0x90, 0x4d, 0x6e, 0x7f, 0x71, 0x20, 0xa4, 0x1d, 0xd2, 0xbe, 0x53, 0x36, 0xa5, 0x26,
		0xee, 0x21, 0xf7, 0x49, 0x8f, 0xda, 0x22, 0xe4, 0x12, 0xa2, 0x3e, 0x33, 0x08, 0x62, 0x0e, 0x31,
		0x3f, 0xbe, 0x58, 0x51, 0x2f, 0xe4, 0x4f, 0x94, 0x3b, 0x64, 0x48, 0x5a, 0xed, 0x90, 0x73, 0x66,
		0x4b, 0xc2, 0xc1, 0xba, 0x19, 0xe0, 0x65, 0x43, 0x61, 0x4a, 0xad, 0x30, 0xf0, 0xca, 0x35, 0xbc,
		0xf2, 0x75, 0x6a, 0x0f, 0x1f, 0x5d, 0xcd, 0x47, 0x37, 0xb5, 0x9e, 0x27, 0xe8, 0xb1, 0xbb, 0x41,
		0xfe, 0x93, 0x22, 0x26, 0xf2, 0x3b, 0x3b, 0x28, 0x1f, 0x52, 0x35, 0x40, 0xed, 0x8e, 0x01, 0xa9,
		0xf2, 0x1e, 0xe4, 0xa0, 0x77, 0x80, 0x83, 0x89, 0x83, 0x1b, 0x94, 0x93, 0xfa, 0xea, 0x48, 0xea,
		0x33, 0x6f, 0xb1, 0x8f, 0x28, 0xa9, 0x4f, 0xbe, 0xfe, 0x49, 0xb2, 0xee, 0xc9, 0x4c, 0x06, 0xad,
		0xd6, 0xc1, 0x09, 0x26, 0x0e, 0x4c, 0x80, 0x02, 0x42, 0x01, 0x0b, 0x51, 0x40, 0x64, 0xd5, 0xce,
		0x7d, 0x11, 0xb2, 0x6a, 0xb5, 0x04, 0x71, 0x7e, 0x2d, 0x91, 0x55, 0xab, 0xeb, 0xeb, 0x58, 0xfb,
		0xc9, 0xaa, 0xcd, 0x8b, 0x88, 0xea, 0xd5, 0xff, 0x66, 0x0e, 0x0c, 0x00, 0x2a, 0x02, 0x15, 0x4f,
		0x9e, 0x96, 0xaa, 0xd7, 0xdd, 0x9b, 0x69, 0xd4, 0x0f, 0x25, 0x84, 0x12, 0x82, 0x9a, 0x82, 0x9a,
		0x82, 0x9a, 0x82, 0x9a, 0x96, 0x82, 0x9a, 0x2a, 0x35, 0xac, 0xd7, 0x69, 0x54, 0x0f, 0x04, 0x04,
		0x02, 0x02, 0x01, 0x81, 0x80, 0x40, 0x40, 0x20, 0x60, 0x39, 0x10, 0x50, 0xa3, 0x61, 0xbb, 0x81,
		0x46, 0xed, 0xc0, 0x43, 0xe0, 0xe1, 0x29, 0x87, 0x65, 0x74, 0x1a, 0xa5, 0x1b, 0x68, 0x90, 0x0e,
		0xf5, 0x83, 0xfa, 0x81, 0x8e, 0x82, 0x8e, 0x82, 0x8e, 0x82, 0x8e, 0x96, 0x86, 0x8e, 0x1a, 0xd8,
		0x2a, 0xd4, 0x69, 0x10, 0x0e, 0x4c, 0x04, 0x26, 0x9e, 0x3a, 0x25, 0x35, 0xb0, 0x51, 0xa8, 0xd3,
		0x98, 0x1b, 0x2a, 0x08, 0x15, 0x04, 0x2d, 0x05, 0x2d, 0x05, 0x2d, 0x05, 0x2d, 0x2d, 0x9e, 0x96,
		0x1e, 0x48, 0xeb, 0xc3, 0xfc, 0xb5, 0x3f, 0x96, 0x46, 0xfb, 0xc3, 0x1f, 0x83, 0x7c, 0x6d, 0xa7,
		0xd5, 0x8a, 0x9e, 0x3c, 0x1a, 0x33, 0x4e, 0xba, 0x2e, 0x8d, 0x89, 0x9d, 0x70, 0x3e, 0xc4, 0x94,
		0x9c, 0xb5, 0x4f, 0x2b, 0xc6, 0xa2, 0x04, 0x0a, 0x25, 0x50, 0xcb, 0x17, 0xa2, 0x04, 0x0a, 0xf4,
		0x15, 0x1e, 0xe4, 0x1e, 0x3d, 0x48, 0x94, 0x40, 0x41, 0x01, 0xe1, 0x3f, 0x9a, 0xf5, 0x1f, 0x2f,
		0xe1, 0x3f, 0x16, 0xba, 0x68, 0xf0, 0x1f, 0x8b, 0x5f, 0x4b, 0x94, 0x40, 0xa1, 0x04, 0x0a, 0xa8,
		0x08, 0x5a, 0x8a, 0x12, 0x28, 0x28, 0x21, 0x94, 0x10, 0xd4, 0x14, 0xd4, 0x14, 0xd4, 0x14, 0xd4,
		0x74, 0xcf, 0xd4, 0x14, 0x25, 0x50, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x44,
		0x09, 0x14, 0x4a, 0xa0, 0x80, 0x87, 0x08, 0xcb, 0xa0, 0x04, 0x0a, 0xea, 0x07, 0xf5, 0x03, 0x1d,
		0x05, 0x1d, 0x05, 0x1d, 0x05, 0x1d, 0x45, 0x09, 0x14, 0x30, 0x11, 0x98, 0x78, 0x6a, 0x94, 0x14,
		0x25, 0x50, 0x50, 0x41, 0xd0, 0x52, 0xd0, 0x52, 0xd0, 0x52, 0xd0, 0x52, 0x94, 0x40, 0x6d, 0xb4,
		0x8d, 0x3b, 0x2b, 0x81, 0x92, 0x2e, 0x01, 0xb2, 0x34, 0x2a, 0xa1, 0x3e, 0xa4, 0x5f, 0xf6, 0xad,
		0x4b, 0xe3, 0xef, 0x46, 0x5f, 0x55, 0x40, 0x3d, 0x54, 0x18, 0x31, 0x4e, 0x62, 0x41, 0x05, 0xcb,
		0x5f, 0x07, 0x35, 0x33, 0x06, 0xa7, 0x7b, 0xe2, 0xb0, 0xc2, 0x0d, 0x6b, 0x3f, 0xa3, 0x3a, 0x24,
		0xb7, 0xd4, 0x58, 0x65, 0x3a, 0xe8, 0x33, 0x4c, 0x84, 0xc2, 0x29, 0x69, 0x73, 0xa3, 0x50, 0x23,
		0x88, 0x1a, 0xc1, 0xe5, 0x0b, 0x51, 0x23, 0x08, 0xff, 0x0e, 0x21, 0x96, 0x3d, 0x86, 0x58, 0x50,
		0x23, 0x08, 0x05, 0x44, 0x80, 0xc5, 0x6c, 0x80, 0x05, 0x3d, 0x66, 0x8a, 0x5d, 0x34, 0x04, 0x58,
		0x8a, 0x5f, 0x4b, 0xd4, 0x08, 0xa2, 0x46, 0x10, 0xa8, 0x08, 0x5a, 0x8a, 0x1a, 0x41, 0x28, 0x21,
		0x94, 0x10, 0xd4, 0x14, 0xd4, 0x14, 0xd4, 0x14, 0xd4, 0x74, 0xcf, 0xd4, 0x14, 0x35, 0x82, 0x40,
		0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x44, 0x8d, 0x20, 0x6a, 0x04, 0x81, 0x87, 0x08,
		0xcb, 0xa0, 0x46, 0x10, 0xea, 0x07, 0xf5, 0x03, 0x1d, 0x05, 0x1d, 0x05, 0x1d, 0x05, 0x1d, 0x45,
		0x8d, 0x20, 0x30, 0x11, 0x98, 0x78, 0x6a, 0x94, 0x14, 0x35, 0x82, 0x50, 0x41, 0xd0, 0x52, 0xd0,
		0x52, 0xd0, 0x52, 0xd0, 0x52, 0xd4, 0x08, 0x6e, 0xb4, 0x8d, 0x3b, 0xab, 0x11, 0x94, 0x28, 0xfe,
		0xb1, 0x34, 0xaa, 0x03, 0x7f, 0xce, 0xbe, 0xa6, 0xb0, 0x83, 0xd2, 0x62, 0xc6, 0x5d, 0xea, 0x91,
		0x20, 0xf1, 0xbb, 0x32, 0x95, 0x4f, 0xf3, 0xc3, 0x50, 0x1e, 0x88, 0xf2, 0xc0, 0x4d, 0x6b, 0x2f,
		0xb8, 0x1b, 0xf4, 0x65, 0xca, 0x01, 0x6f, 0x0a, 0x90, 0x74, 0xc1, 0xfc, 0x88, 0x71, 0x2a, 0x12,
		0x2e, 0x51, 0x03, 0x3b, 0x3b, 0x08, 0x05, 0x7e, 0x28, 0xf0, 0x5b, 0xbe, 0x10, 0x05, 0x7e, 0x70,
		0xce, 0x10, 0x1f, 0xd9, 0x63, 0x7c, 0x04, 0x05, 0x7e, 0x50, 0xc0, 0xe3, 0x54, 0xc0, 0xfc, 0xe4,
		0x63, 0x95, 0x38, 0xca, 0x44, 0x38, 0xfe, 0x5f, 0x30, 0x74, 0x4a, 0x2b, 0x36, 0xf3, 0x62, 0x37,
		0x89, 0x2b, 0x47, 0x1b, 0x1d, 0xb9, 0x6c, 0x5e, 0xb7, 0x8d, 0xc5, 0x43, 0xea, 0xa7, 0x16, 0x0f,
		0x49, 0x57, 0xef, 0xba, 0x44, 0xab, 0x87, 0x22, 0x3e, 0x14, 0xf1, 0x01, 0xf9, 0x40, 0x3d, 0x51,
		0xc4, 0x07, 0x25, 0x84, 0x12, 0x82, 0x7e, 0x82, 0x7e, 0x82, 0x7e, 0x82, 0x7e, 0xee, 0x00, 0xf9,
		0x50, 0xa8, 0x07, 0x94, 0x03, 0xca, 0x01, 0xe5, 0x80, 0x72, 0x40, 0xb9, 0x23, 0x46, 0x39, 0x14,
		0xe3, 0x01, 0xf3, 0x10, 0x5e, 0x41, 0x31, 0x1e, 0xd4, 0x0f, 0xea, 0x07, 0xca, 0x09, 0xca, 0x09,
		0xca, 0x09, 0xca, 0x59, 0x3c, 0xe6, 0xa1, 0xe0, 0x0e, 0xb8, 0x07, 0xda, 0x69, 0xa1, 0xe0, 0x0e,
		0x2a, 0x08, 0x15, 0x04, 0xf5, 0x04, 0xf5, 0x04, 0xf5, 0x04, 0xf5, 0xd4, 0xc4, 0xbd, 0x03, 0x29,
		0xaa, 0x93, 0xb3, 0x4f, 0xaa, 0x35, 0x75, 0xbf, 0xcf, 0x7c, 0x4b, 0x11, 0x95, 0x46, 0xcf, 0x24,
		0x3b, 0x40, 0x50, 0xa2, 0xcc, 0x68, 0x3c, 0xc2, 0x70, 0x25, 0x5d, 0x1d, 0x35, 0x46, 0x85, 0xc2,
		0xfb, 0xae, 0x2b, 0xe9, 0xf2, 0x33, 0xe8, 0x9c, 0xcc, 0x79, 0xdb, 0x2d, 0xb2, 0x67, 0xc1, 0x29,
		0x49, 0x82, 0x58, 0xd0, 0xae, 0x97, 0xf3, 0x66, 0xfd, 0x24, 0x16, 0xb9, 0xc1, 0x5b, 0x81, 0xc3,
		0x04, 0xa1, 0xa8, 0x9e, 0x9f, 0x5f, 0x9c, 0x9f, 0x5f, 0x74, 0x39, 0xa3, 0x7f, 0x84, 0x89, 0x20,
		0x7e, 0xe8, 0xb0, 0x9a, 0x0c, 0xc3, 0x78, 0xcf, 0x79, 0xc8, 0x3f, 0xb2, 0x38, 0xa6, 0x7d, 0x05,
		0x46, 0xba, 0xa8, 0xb6, 0x56, 0x10, 0x0a, 0xcb, 0xce, 0x94, 0x2e, 0xe1, 0xe9, 0x42, 0x59, 0x4f,
		0x03, 0x16, 0x58, 0x73, 0xb7, 0x67, 0xb9, 0xb1, 0xc5, 0x82, 0xf4, 0x43, 0x47, 0x96, 0xbf, 0x2a,
		0x12, 0xe7, 0x45, 0x6d, 0x62, 0xe9, 0x33, 0x13, 0x7f, 0xf4, 0xd0, 0x0a, 0x78, 0xaf, 0xcb, 0xa3,
		0x97, 0x94, 0x4d, 0x75, 0xfd, 0x0a, 0x02, 0xdb, 0x57, 0x43, 0x60, 0xdb, 0x29, 0x00, 0x53, 0x1e,
		0x59, 0xe0, 0x84, 0x12, 0x88, 0x32, 0xba, 0x1e, 0x95, 0xd9, 0xc0, 0x93, 0x4d, 0x6b, 0x5f, 0x8a,
		0xca, 0xec, 0xa1, 0xac, 0x92, 0x88, 0x72, 0x21, 0xdd, 0x88, 0x60, 0xc5, 0x58, 0xc8, 0x3c, 0x64,
		0xfe, 0x50, 0x64, 0x9e, 0xb3, 0x47, 0x37, 0xce, 0xe3, 0x57, 0x2d, 0x0a, 0xfc, 0x64, 0x20, 0xa4,
		0x1d, 0xd2, 0x5e, 0x7e, 0x69, 0x0f, 0x3d, 0x91, 0x87, 0x69, 0x4f, 0xa5, 0x7c, 0x34, 0x00, 0x3d,
		0x37, 0xd0, 0x73, 0x63, 0xf9, 0x42, 0xf4, 0xdc, 0x30, 0x28, 0x90, 0xba, 0x6e, 0x26, 0xf6, 0x67,
		0xd4, 0xcd, 0xb4, 0x46, 0x80, 0x47, 0x32, 0xd0, 0x23, 0x11, 0x2a, 0x46, 0xcf, 0x0d, 0x28, 0x20,
		0x3a, 0x92, 0xee, 0xbc, 0x23, 0x69, 0x0b, 0x1d, 0x49, 0x0b, 0x5d, 0xb4, 0xf9, 0xd7, 0x8d, 0x8e,
		0xa4, 0x45, 0xac, 0x25, 0xfa, 0x71, 0xa0, 0x1f, 0x07, 0x50, 0x11, 0xb4, 0x14, 0xfd, 0x38, 0xa0,
		0x84, 0x50, 0x42, 0x50, 0x53, 0x50, 0x53, 0x50, 0x53, 0x50, 0xd3, 0x3d, 0x53, 0x53, 0xf4, 0xea,
		0x00, 0x02, 0x02, 0x01, 0x81, 0x80, 0x40, 0x40, 0x20, 0x20, 0xfa, 0x78, 0xa0, 0x8f, 0x07, 0xf0,
		0x10, 0x61, 0x19, 0xf4, 0xf1, 0x80, 0xfa, 0x41, 0xfd, 0x40, 0x47, 0x41, 0x47, 0x41, 0x47, 0x41,
		0x47, 0xd1, 0xe3, 0x03, 0x98, 0x08, 0x4c, 0x3c, 0x35, 0x4a, 0x8a, 0x1e, 0x1f, 0x50, 0x41, 0xd0,
		0x52, 0xd0, 0x52, 0xd0, 0x52, 0xd0, 0x52, 0xf4, 0xff, 0xd8, 0x68, 0x1b, 0x77, 0xd6, 0xff, 0x23,
		0x5f, 0xdd, 0x8f, 0xa5, 0xd1, 0xfb, 0xe3, 0x3f, 0x47, 0xdf, 0x50, 0x40, 0x95, 0xd3, 0x13, 0x7d,
		0x64, 0x1e, 0x0b, 0xfa, 0xd9, 0x63, 0xe7, 0x2c, 0x74, 0x9a, 0x19, 0x83, 0x4a, 0x3e, 0x54, 0xf2,
		0x19, 0x82, 0x75, 0x19, 0x38, 0x5f, 0xb6, 0xa2, 0x79, 0x06, 0xc9, 0xc1, 0xb7, 0x04, 0x8b, 0x51,
		0x81, 0x6b, 0x73, 0x30, 0xad, 0xb4, 0x18, 0x46, 0x60, 0x59, 0x02, 0x8e, 0x95, 0x60, 0xd8, 0x1c,
		0xfc, 0x1a, 0x5d, 0x23, 0x39, 0xb8, 0xdd, 0x7b, 0x87, 0x8e, 0xaf, 0x24, 0x5e, 0x5d, 0x5e, 0xd8,
		0x54, 0x87, 0xcb, 0x0d, 0x96, 0x40, 0x11, 0x1e, 0x57, 0x9b, 0xbd, 0xe5, 0xc7, 0x9e, 0xff, 0xcb,
		0xc2, 0x02, 0xa4, 0x66, 0x3c, 0x6b, 0xd4, 0x93, 0x7e, 0xf9, 0xc2, 0x47, 0x1f, 0xdc, 0x58, 0xbc,
		0x13, 0x62, 0x75, 0xa1, 0x67, 0xaa, 0xfc, 0xef, 0x3d, 0x96, 0xda, 0xe3, 0x35, 0xdd, 0xdc, 0x52,
		0xd1, 0x9f, 0xb9, 0xa2, 0x71, 0xd3, 0x6a, 0xb5, 0xaf, 0x5b, 0xad, 0xfa, 0xf5, 0xe5, 0x75, 0xfd,
		0xf6, 0xea, 0xaa, 0xd1, 0x6e, 0x5c, 0xad, 0x18, 0xf4, 0x33, 0x77, 0x18, 0x67, 0xce, 0xb7, 0xe9,
		0x5d, 0x05, 0x89, 0xe7, 0x6d, 0xbc, 0xf9, 0x2d, 0x6f, 0x4d, 0xee, 0x6d, 0xad, 0x78, 0x43, 0x12,
		0x6f, 0x66, 0xfe, 0x6d, 0x4c, 0xd7, 0x7c, 0xe6, 0x96, 0x2b, 0x01, 0x13, 0x4f, 0x21, 0xff, 0x83,
		0xb8, 0x41, 0x2c, 0x68, 0xb0, 0x02, 0x6c, 0xa7, 0x7d, 0x93, 0x16, 0xaf, 0x5c, 0x7c, 0x6b, 0x2b,
		0x8b, 0xa9, 0xd7, 0xc6, 0x1d, 0x36, 0x11, 0x88, 0x15, 0x84, 0x21, 0x60, 0x22, 0xfd, 0xe2, 0x55,
		0x0b, 0xb2, 0x85, 0x25, 0xe4, 0x66, 0x05, 0xb9, 0x59, 0xc0, 0x1a, 0xd4, 0x1f, 0xdf, 0xa2, 0xa4,
		0xb4, 0xaf, 0x2b, 0x5b, 0xae, 0x50, 0xc7, 0x77, 0x03, 0x12, 0x0b, 0x2a, 0x36, 0x3c, 0xdc, 0x78,
		0xa5, 0x66, 0x2f, 0x5e, 0x73, 0xd7, 0xdf, 0xb3, 0x1e, 0x4d, 0xbc, 0xcd, 0xbd, 0xb5, 0x2a, 0xc3,
		0x1e, 0x49, 0xab, 0xf5, 0xb8, 0xb3, 0x66, 0xe2, 0xcd, 0xd4, 0x72, 0x6b, 0xe4, 0x29, 0x0f, 0x95,
		0x94, 0x92, 0x08, 0x59, 0xfe, 0x28, 0xcd, 0x1b, 0xa5, 0xf9, 0xa2, 0xac, 0xc4, 0xa8, 0x01, 0xc6,
		0x56, 0x52, 0x28, 0x21, 0x2d, 0x73, 0x2a, 0xbd, 0xc1, 0x2f, 0xae, 0xbc, 0x0f, 0x12, 0x3f, 0xfd,
		0xd2, 0xd7, 0xbc, 0xa6, 0x7f, 0x85, 0x06, 0x77, 0xb9, 0xeb, 0xf4, 0x19, 0xd9, 0xdc, 0x24, 0x6e,
		0x1a, 0x23, 0x9e, 0xbd, 0x7a, 0xb3, 0x48, 0x36, 0x20, 0x92, 0xfb, 0x15, 0xc9, 0x6d, 0x3d, 0x19,
		0x2a, 0x8e, 0x1b, 0xdb, 0x94, 0x3b, 0x24, 0x09, 0xfe, 0x08, 0xc2, 0xa7, 0x80, 0x38, 0x2c, 0x16,
		0xc4, 0xa7, 0x76, 0x7e, 0x17, 0x78, 0xed, 0x0c, 0xdb, 0xda, 0x45, 0xe4, 0x30, 0x87, 0x93, 0x8b,
		0x33, 0x9e, 0xb9, 0xd9, 0xa9, 0xeb, 0x1c, 0x54, 0xf3, 0xcd, 0x1c, 0x4a, 0x74, 0x14, 0xae, 0xf8,
		0xdc, 0x73, 0x9e, 0x40, 0x43, 0x4e, 0xa5, 0xc8, 0x93, 0x4f, 0x6d, 0xe2, 0x24, 0x91, 0xe7, 0xda,
		0xf9, 0xa2, 0x74, 0x93, 0xfb, 0x5f, 0x1c, 0x68, 0xb8, 0xdf, 0xce, 0xee, 0x54, 0x80, 0xc8, 0x3d,
		0xc9, 0xd1, 0xa8, 0xc4, 0xd2, 0x73, 0x97, 0xa5, 0x47, 0xcf, 0x30, 0x44, 0x20, 0xbf, 0xa5, 0x3a,
		0x1a, 0x97, 0x73, 0x81, 0x64, 0x30, 0x60, 0xc6, 0x01, 0x0b, 0x23, 0xe2, 0xb1, 0xe1, 0xbe, 0x6d,
		0xbe, 0xfd, 0xbd, 0xce, 0x51, 0xed, 0xe9, 0x6a, 0x2a, 0x8e, 0xaa, 0x02, 0x69, 0x2b, 0x92, 0xb6,
		0x42, 0x15, 0xaa, 0x58, 0x92, 0x41, 0xaa, 0xc2, 0xf7, 0x81, 0x59, 0x90, 0xf8, 0x8c, 0x4b, 0xbf,
		0xd4, 0x1c, 0x3e, 0x83, 0xa4, 0x0f, 0xa1, 0xb0, 0x5d, 0x95, 0xc3, 0x7a, 0xe7, 0xf1, 0xae, 0x35,
		0xfd, 0x27, 0x7d, 0x53, 0xb3, 0xc9, 0x1b, 0x87, 0x8d, 0x81, 0x8d, 0x39, 0x74, 0x1b, 0x23, 0xaf,
		0x47, 0x07, 0x65, 0x63, 0x06, 0xa1, 0xe7, 0x10, 0x27, 0x75, 0x4a, 0x85, 0xeb, 0x2b, 0x98, 0x99,
		0x85, 0xf1, 0x45, 0x5a, 0x9a, 0x5b, 0x18, 0x19, 0x18, 0x99, 0xe3, 0x34, 0x32, 0x49, 0xa0, 0x48,
		0x61, 0x6e, 0x25, 0xc6, 0x8c, 0x6e, 0xaf, 0xf0, 0x74, 0xb4, 0xc9, 0x43, 0xb9, 0x81, 0xb8, 0x6c,
		0xaa, 0x1c, 0xc3, 0x30, 0x7a, 0x3a, 0x85, 0xa4, 0x29, 0xc5, 0xa4, 0x3b, 0xf5, 0xa7, 0x9d, 0x7c,
		0xb1, 0x4e, 0x12, 0xde, 0x64, 0x92, 0xf1, 0x0e, 0x76, 0xf3, 0x8d, 0xde, 0x3c, 0xa6, 0x8e, 0x8d,
		0x9a, 0xbe, 0x53, 0xdd, 0xf4, 0x31, 0x49, 0x5d, 0x5a, 0xbd, 0xc4, 0x1a, 0xb9, 0x79, 0x4b, 0x4b,
		0xdc, 0xae, 0x1f, 0xef, 0x1a, 0x7f, 0xb5, 0x9b, 0x51, 0x9d, 0x23, 0xa8, 0x54, 0xf1, 0xc3, 0xc0,
		0x15, 0x21, 0x77, 0x83, 0x3e, 0x79, 0x72, 0x03, 0x27, 0x7c, 0x92, 0xa7, 0x40, 0xcb, 0x53, 0x14,
		0xc9, 0x82, 0x2e, 0xc1, 0x82, 0xc0, 0x82, 0x8e, 0x94, 0x05, 0xc9, 0x12, 0x06, 0x05, 0xa2, 0x70,
		0x60, 0x59, 0xf9, 0x8d, 0xc3, 0x3f, 0x37, 0x72, 0x5f, 0x49, 0xf8, 0xab, 0xf2, 0xa4, 0x0e, 0x6d,
		0xed, 0x8e, 0x00, 0x60, 0x83, 0xc4, 0x27, 0x7e, 0xf8, 0xc8, 0x62, 0x79, 0x60, 0x9d, 0x0e, 0x2d,
		0x12, 0x50, 0xaf, 0x00, 0xa8, 0x00, 0x54, 0x00, 0xea, 0x89, 0x00, 0xea, 0x25, 0x00, 0x55, 0x19,
		0x50, 0xeb, 0x00, 0xd4, 0xa2, 0x01, 0xb5, 0x1c, 0x45, 0x6c, 0x8b, 0x79, 0xd4, 0x17, 0x4b, 0x7f,
		0x98, 0xb5, 0x93, 0x17, 0x0a, 0x89, 0x29, 0xab, 0x33, 0xc4, 0x7f, 0x1a, 0x7e, 0xcd, 0x8f, 0xa3,
		0x6f, 0xf9, 0xb4, 0xf8, 0xef, 0x6f, 0xb3, 0x6f, 0xfd, 0x3d, 0xfd, 0xd2, 0x4f, 0x1f, 0xa9, 0xfd,
		0x7d, 0x5e, 0xdb, 0xac, 0x9e, 0x72, 0x34, 0xc9, 0xa1, 0x90, 0xca, 0x37, 0x9a, 0x8c, 0x3a, 0xec,
		0x64, 0xa3, 0x9c, 0x8f, 0x61, 0x1d, 0x55, 0xa6, 0x51, 0xfe, 0xac, 0x99, 0x5d, 0xa5, 0x19, 0x21,
		0x0b, 0xe0, 0xa0, 0x98, 0xb4, 0x84, 0xd6, 0x9c, 0x0e, 0x8d, 0x96, 0xcb, 0x45, 0xb3, 0xb0, 0xff,
		0xbf, 0x2b, 0xf7, 0x9c, 0xf6, 0xf3, 0xa0, 0xdb, 0xf2, 0xaa, 0xf4, 0xf3, 0x4b, 0x78, 0x4e, 0x98,
		0x83, 0x22, 0x43, 0x91, 0x73, 0xa0, 0x53, 0x4e, 0xd8, 0xd4, 0x82, 0x4f, 0x43, 0x46, 0x40, 0x19,
		0x4e, 0x95, 0x60, 0x55, 0x12, 0x5e, 0x15, 0x61, 0x56, 0x59, 0x4b, 0x75, 0xb4, 0xb5, 0x60, 0xad,
		0xd5, 0xd5, 0x5e, 0x63, 0x5a, 0x6c, 0x4c, 0x9b, 0x8b, 0xd7, 0x6a, 0x45, 0x8f, 0x5a, 0x52, 0x56,
		0xa4, 0x61, 0xdb, 0xa0, 0xe6, 0xaa, 0xc2, 0xb8, 0x22, 0x9c, 0xcb, 0x2f, 0xa8, 0x4c, 0x3f, 0x05,
		0x9a, 0xbe, 0x6e, 0x99, 0x04, 0xbf, 0x15, 0x88, 0xcf, 0x64, 0x52, 0xfc, 0xcc, 0xd8, 0xbf, 0xcb,
		0x7a, 0x1d, 0xc6, 0x0f, 0xc6, 0x0f, 0xc6, 0x4f, 0x4d, 0x52, 0x74, 0x13, 0xf0, 0x2e, 0x4f, 0x36,
		0x01, 0xef, 0x98, 0xb3, 0xc3, 0xca, 0x92, 0x81, 0x77, 0xd3, 0x6e, 0xd5, 0x91, 0x84, 0xa7, 0x3b,
		0xaa, 0xa8, 0x24, 0x3c, 0xb3, 0x6e, 0x9b, 0xe4, 0xd6, 0xc4, 0x64, 0x9c, 0xc9, 0x2d, 0x8a, 0xb1,
		0x9d, 0xbf, 0x90, 0x09, 0x5e, 0x58, 0xc6, 0x76, 0x2b, 0x3e, 0x8c, 0xbe, 0xfe, 0xd3, 0xbb, 0x7e,
		0x6e, 0xb0, 0x31, 0x94, 0xe3, 0x48, 0x6d, 0xc2, 0x59, 0xf6, 0xf8, 0x24, 0x0c, 0xbc, 0x17, 0x85,
		0x14, 0xc7, 0xc5, 0x19, 0x8a, 0x8c, 0x25, 0xa7, 0x88, 0x5f, 0x8e, 0x48, 0x72, 0x13, 0x01, 0x28,
		0x04, 0xa0, 0x8c, 0x45, 0x92, 0x0f, 0xa4, 0x71, 0x78, 0x18, 0x31, 0x4e, 0xa4, 0xf6, 0x3e, 0x97,
		0x9e, 0x74, 0x79, 0x0a, 0x28, 0x2a, 0x14, 0xf5, 0x60, 0x14, 0x35, 0x13, 0xdf, 0xa3, 0xdd, 0xf1,
		0x59, 0x52, 0x4e, 0xe2, 0xb8, 0x71, 0xfa, 0xd6, 0x1c, 0xc2, 0x19, 0x8d, 0x55, 0x3a, 0x5a, 0x6c,
		0x9f, 0x12, 0xfa, 0x0f, 0xfd, 0x3f, 0x18, 0xfd, 0x3f, 0xe4, 0xb6, 0x12, 0x07, 0x9b, 0x40, 0x26,
		0x93, 0x6c, 0x64, 0xd4, 0x1f, 0x2b, 0x2c, 0x75, 0xcc, 0xf5, 0x5d, 0x21, 0x99, 0x37, 0x96, 0x0d,
		0x39, 0xf0, 0xa4, 0xb1, 0x1c, 0xcf, 0x60, 0x1d, 0x57, 0xc6, 0x58, 0xf6, 0xc4, 0x65, 0x49, 0x17,
		0xf3, 0xe9, 0xb3, 0xeb, 0x27, 0x3e, 0x61, 0x81, 0xe0, 0xae, 0x4a, 0xd5, 0xc5, 0xe2, 0x04, 0x45,
		0xba, 0xfa, 0xcd, 0xab, 0x3a, 0x72, 0xc6, 0x24, 0x94, 0xe6, 0x84, 0xd8, 0x43, 0x3e, 0xa5, 0x2a,
		0x1b, 0x75, 0x50, 0x2d, 0xb8, 0xb8, 0x44, 0x05, 0x63, 0x41, 0x91, 0xfd, 0x03, 0x2e, 0xb8, 0xb8,
		0x69, 0xdc, 0x36, 0x51, 0x72, 0xa1, 0xb5, 0xef, 0x61, 0xc6, 0x65, 0x5e, 0x3a, 0x00, 0x8f, 0x44,
		0xb6, 0x90, 0x47, 0xd6, 0xd5, 0xd3, 0x14, 0xda, 0x32, 0x09, 0xc5, 0x8d, 0x80, 0x57, 0xc0, 0xeb,
		0x11, 0xc3, 0x6b, 0x1b, 0xf0, 0xaa, 0xcc, 0x4c, 0xea, 0x28, 0x68, 0x2c, 0x1c, 0x5d, 0x0f, 0x37,
		0x1e, 0x95, 0x37, 0x8e, 0x61, 0x26, 0x18, 0xb5, 0xdd, 0x1e, 0xab, 0x45, 0xa2, 0x22, 0x1e, 0x0a,
		0x66, 0x0b, 0x42, 0x83, 0x17, 0x9b, 0xc6, 0x82, 0xf4, 0x9f, 0xe4, 0x8e, 0x2e, 0x58, 0x33, 0x1e,
		0x07, 0x17, 0xe4, 0xe4, 0x1f, 0x38, 0xb8, 0xc0, 0x8c, 0x29, 0x28, 0xf7, 0xc1, 0x05, 0x52, 0x07,
		0x8e, 0xb0, 0x67, 0xc1, 0x29, 0x49, 0x52, 0x4b, 0xb0, 0xe9, 0x30, 0x99, 0xec, 0x5a, 0xb7, 0x47,
		0x7a, 0x8c, 0x8a, 0x84, 0x6f, 0x67, 0x24, 0x72, 0xa2, 0x9a, 0x4d, 0x7b, 0x37, 0x7c, 0x83, 0x4e,
		0xc1, 0x42, 0x3a, 0xf3, 0x10, 0x3b, 0x16, 0xd4, 0xf9, 0xa7, 0xd4, 0x15, 0xd1, 0xaf, 0x14, 0xcc,
		0x53, 0xc5, 0x4f, 0x62, 0x61, 0xf2, 0xdd, 0x9d, 0x9f, 0x5f, 0x88, 0x97, 0x88, 0x59, 0x6f, 0xad,
		0xb3, 0xa5, 0x23, 0x71, 0xee, 0x52, 0xe0, 0x7a, 0xe4, 0xbd, 0xb3, 0x3c, 0x2f, 0xf4, 0x3d, 0xe7,
		0x21, 0xff, 0xc8, 0xe2, 0x98, 0xf6, 0x15, 0x0a, 0x8b, 0xbf, 0x9d, 0xd1, 0x7d, 0xcb, 0xce, 0xec,
		0x6a, 0x32, 0xdc, 0x32, 0xb3, 0xdc, 0xd8, 0x0a, 0x03, 0xef, 0xc5, 0x8a, 0xc2, 0x38, 0x76, 0xd3,
		0x8f, 0xc3, 0xc0, 0x5a, 0xc4, 0x5b, 0x2b, 0xec, 0x59, 0xd9, 0x63, 0x8c, 0xee, 0x38, 0xaf, 0x60,
		0x28, 0x38, 0x66, 0xb3, 0x92, 0xc8, 0xd2, 0x67, 0x26, 0xfe, 0xe8, 0xa1, 0x25, 0x9c, 0x02, 0x1d,
		0xbf, 0x6c, 0x4e, 0x28, 0x4d, 0xaf, 0xdb, 0x6e, 0x78, 0x9a, 0x92, 0xe4, 0x47, 0x9c, 0xc5, 0x6c,
		0x78, 0x5e, 0x9f, 0x31, 0xe9, 0xff, 0x6e, 0xb4, 0x62, 0xcc, 0xda, 0x2d, 0xc8, 0x0e, 0x1f, 0x64,
		0x97, 0xd6, 0x6b, 0xcd, 0x93, 0x16, 0xf7, 0x26, 0x77, 0x7b, 0xf0, 0xa7, 0x1c, 0x23, 0x97, 0x3f,
		0x06, 0x54, 0x82, 0x7f, 0x57, 0x34, 0x8e, 0x85, 0x73, 0x58, 0x6c, 0x73, 0x37, 0xda, 0xb8, 0x10,
		0x33, 0xe7, 0x1b, 0x4f, 0x2f, 0xc6, 0x39, 0x85, 0x8a, 0xca, 0x52, 0xb6, 0x73, 0x0a, 0xb7, 0xbf,
		0xd4, 0x39, 0x8a, 0xb9, 0xe1, 0xb4, 0xe6, 0xca, 0x87, 0xf1, 0xc9, 0xea, 0xda, 0xe6, 0x52, 0x26,
		0xb4, 0x24, 0xbb, 0x53, 0xa3, 0x1c, 0xfd, 0x90, 0x8f, 0x76, 0xe4, 0x89, 0xcd, 0xcb, 0x84, 0x82,
		0xa6, 0xfd, 0xb5, 0xaf, 0xae, 0xca, 0xf7, 0xb0, 0x05, 0x40, 0xf0, 0x2f, 0x54, 0x08, 0xc6, 0x83,
		0xad, 0x22, 0x55, 0xb9, 0x7f, 0x47, 0xfe, 0x49, 0xc9, 0x9f, 0x75, 0x72, 0x6b, 0xfd, 0xe5, 0xdf,
		0xff, 0xe5, 0x5f, 0xff, 0xfa, 0x5f, 0x0f, 0x49, 0xbd, 0xde, 0x6c, 0x57, 0x6b, 0x5f, 0xbe, 0x7e,
		0xfb, 0xdf, 0xff, 0x77, 0xfe, 0xe6, 0xec, 0xe2, 0xd3, 0xdd, 0xbf, 0x7d, 0x43, 0x3a, 0x7f, 0xab,
		0xc8, 0x02, 0x48, 0x2e, 0x33, 0xea, 0xda, 0x7e, 0xb4, 0xdd, 0x7e, 0x66, 0x57, 0x69, 0x9e, 0xa6,
		0xd9, 0x34, 0x6a, 0x38, 0x37, 0xdc, 0xd1, 0x41, 0x58, 0xcd, 0xec, 0xfe, 0x77, 0x75, 0x8e, 0x66,
		0x9c, 0x12, 0x86, 0x58, 0xb8, 0x76, 0x9c, 0x3f, 0xfc, 0x34, 0x33, 0xc6, 0x70, 0x5a, 0x54, 0xb3,
		0xd0, 0x10, 0xd0, 0x16, 0xc1, 0x38, 0xf8, 0xd0, 0xcf, 0x66, 0xc1, 0x31, 0x13, 0xf2, 0xc9, 0x9d,
		0xf2, 0xe4, 0xd1, 0x58, 0x10, 0xdb, 0x63, 0x94, 0xcb, 0xfb, 0xb1, 0x33, 0x63, 0x8f, 0x6a, 0x0f,
		0x34, 0xa7, 0x00, 0xea, 0x38, 0xd6, 0x56, 0x99, 0x77, 0x3c, 0xf3, 0x09, 0xa8, 0xdc, 0xc6, 0x48,
		0xf1, 0xfb, 0x9b, 0x0e, 0x15, 0x8c, 0xd0, 0xc0, 0xc9, 0x3a, 0x2d, 0x10, 0x87, 0x79, 0x82, 0xaa,
		0x64, 0x20, 0xdf, 0x48, 0x8c, 0xc9, 0x49, 0x3a, 0xe5, 0x49, 0xa8, 0x16, 0x29, 0x5d, 0xcf, 0xdc,
		0xea, 0xd8, 0xf0, 0x54, 0x5d, 0xbb, 0x4b, 0x64, 0x13, 0x29, 0x6e, 0x30, 0x29, 0x91, 0xea, 0xa5,
		0x81, 0x0f, 0x0f, 0xce, 0xe7, 0xd6, 0x2b, 0x49, 0x7f, 0x34, 0xc7, 0x3f, 0x7e, 0x1f, 0xfe, 0xb8,
		0x9b, 0xfb, 0x51, 0x7d, 0x78, 0x38, 0x7f, 0x78, 0x70, 0xbe, 0xae, 0x7d, 0x53, 0xfd, 0xe7, 0x97,
		0xfb, 0x87, 0x87, 0xaf, 0x1f, 0x1e, 0x48, 0x67, 0xee, 0x8a, 0x5a, 0xa5, 0x94, 0x89, 0x52, 0x22,
		0x14, 0xd4, 0x93, 0x07, 0xe1, 0xe1, 0xb0, 0xa3, 0xea, 0x26, 0x07, 0xfc, 0xdd, 0x1f, 0xfe, 0x4a,
		0xf7, 0x88, 0x73, 0x03, 0x32, 0xdc, 0x19, 0x88, 0xa8, 0xfd, 0x07, 0x13, 0xb1, 0x7a, 0x97, 0xa4,
		0xa5, 0x99, 0x4e, 0xaa, 0x1f, 0x91, 0xa4, 0xd0, 0xeb, 0x0a, 0xbf, 0x31, 0x25, 0x30, 0xa6, 0x0c,
		0x46, 0x95, 0x42, 0x11, 0xf3, 0x76, 0xde, 0x65, 0xe8, 0x4f, 0xc6, 0x43, 0xd2, 0xa5, 0x31, 0x73,
		0x88, 0x1d, 0x26, 0x81, 0x60, 0xbc, 0xdd, 0xd2, 0x68, 0x3a, 0x74, 0xa3, 0x30, 0x74, 0x9a, 0x6f,
		0x52, 0xa9, 0xab, 0x7c, 0xf5, 0xdf, 0x69, 0x3c, 0x9d, 0x42, 0xed, 0xb5, 0x1f, 0x49, 0xe3, 0x23,
		0xf4, 0x3d, 0x32, 0x4d, 0xbf, 0x97, 0xe3, 0xec, 0x37, 0xad, 0x56, 0xfb, 0xba, 0xd5, 0xaa, 0x5f,
		0x5f, 0x5e, 0xd7, 0x6f, 0xaf, 0xae, 0x1a, 0x6d, 0xd5, 0xa3, 0x8a, 0x0e, 0x61, 0xd5, 0x0f, 0xbd,
		0x0d, 0xd2, 0x1b, 0x29, 0x1a, 0x61, 0x82, 0x40, 0x80, 0x3a, 0x80, 0x3a, 0x80, 0x3a, 0x80, 0x3a,
		0x80, 0x3a, 0x80, 0x3a, 0x80, 0x3a, 0x9c, 0x06, 0x75, 0x08, 0x13, 0x61, 0x2a, 0x04, 0xb1, 0x3c,
		0x15, 0x88, 0x04, 0x88, 0x04, 0x88, 0x04, 0x88, 0x04, 0x88, 0x04, 0x88, 0x04, 0x88, 0xc4, 0xf1,
		0x13, 0x09, 0x23, 0x14, 0x02, 0xe4, 0x01, 0xe4, 0x01, 0xe4, 0x01, 0xe4, 0x01, 0xe4, 0x01, 0xe4,
		0x01, 0xe4, 0xe1, 0x80, 0xc9, 0xc3, 0xa1, 0x9f, 0xe3, 0x90, 0x62, 0xce, 0xc5, 0x34, 0x0f, 0xfc,
		0x42, 0x26, 0x59, 0xc8, 0x52, 0x2f, 0x10, 0xfb, 0xd1, 0xf6, 0xa3, 0x4f, 0xbf, 0x4d, 0xbe, 0xf6,
		0xd3, 0xef, 0xd9, 0xd7, 0xee, 0x32, 0x97, 0x4a, 0x06, 0xd7, 0xa6, 0xa9, 0x54, 0xe9, 0x28, 0x64,
		0x52, 0x21, 0x93, 0xca, 0x88, 0xba, 0xab, 0x64, 0x52, 0x61, 0x0b, 0x14, 0xce, 0x07, 0x9c, 0x0f,
		0x38, 0x1f, 0x70, 0x3e, 0xe0, 0x7c, 0xc0, 0xf9, 0x40, 0xe4, 0x32, 0xef, 0xa2, 0x8d, 0x08, 0xba,
		0x22, 0x69, 0xc8, 0x46, 0x83, 0x2e, 0x80, 0x2e, 0x1c, 0x39, 0x5d, 0x50, 0x3b, 0x9b, 0x64, 0xc9,
		0xe5, 0x3b, 0xf4, 0xf3, 0xac, 0xb1, 0xcd, 0x01, 0xd3, 0x01, 0xd3, 0x01, 0x4f, 0x03, 0x9e, 0x06,
		0x3c, 0x0d, 0x78, 0x1a, 0xf0, 0x34, 0x0c, 0xc7, 0x3d, 0xff, 0xc1, 0x5e, 0x24, 0x9d, 0x8a, 0xca,
		0x07, 0x37, 0x16, 0xef, 0x84, 0x90, 0x8c, 0x97, 0x7e, 0x74, 0x83, 0xf7, 0x1e, 0x4b, 0x11, 0x48,
		0x52, 0x1a, 0x52, 0x51, 0x9f, 0x19, 0xa9, 0x27, 0xab, 0x95, 0x9f, 0xb9, 0xc3, 0x38, 0x73, 0xbe,
		0x4d, 0x9f, 0x3a, 0x48, 0x3c, 0xef, 0xe8, 0xf6, 0x8c, 0xf2, 0xef, 0x8a, 0x58, 0x06, 0xb7, 0x8c,
		0xd2, 0x6f, 0x3d, 0xb5, 0x46, 0xea, 0x0b, 0x4b, 0x5f, 0x5c, 0x07, 0xf5, 0x85, 0xd5, 0xae, 0xec,
		0xa4, 0x77, 0xf3, 0x0e, 0xfa, 0x5e, 0x6e, 0xeb, 0x29, 0xa6, 0xbe, 0x5a, 0x15, 0xcd, 0x0e, 0x6d,
		0xed, 0x7c, 0x2d, 0xda, 0xda, 0xe8, 0xd1, 0x66, 0xa1, 0x47, 0x9b, 0xbc, 0x00, 0xe4, 0x16, 0x04,
		0x15, 0xaf, 0x18, 0x3d, 0xda, 0x0a, 0x01, 0x16, 0xf4, 0x68, 0xdb, 0x5d, 0x18, 0x06, 0x99, 0x0d,
		0x06, 0x49, 0x29, 0x7a, 0xb4, 0x19, 0x8f, 0x51, 0xa0, 0x47, 0x1b, 0x7a, 0xb4, 0x59, 0xe8, 0xd1,
		0x86, 0x1e, 0x6d, 0xc8, 0x2c, 0x04, 0xfe, 0x6e, 0xdd, 0x09, 0x40, 0x8f, 0xb6, 0xdc, 0xb6, 0x0c,
		0x7b, 0x7f, 0x26, 0x95, 0xc1, 0xa8, 0x52, 0x28, 0x62, 0x1e, 0xf6, 0xfe, 0xb0, 0xf7, 0xa7, 0xce,
		0x11, 0xb1, 0xf7, 0x67, 0x9a, 0x7e, 0x2f, 0x2d, 0x31, 0xf6, 0xfe, 0x0a, 0x18, 0x85, 0x1e, 0x6d,
		0xa0, 0x0e, 0xa0, 0x0e, 0xa0, 0x0e, 0xa0, 0x0e, 0xa0, 0x0e, 0xa0, 0x0e, 0xa0, 0x0e, 0x07, 0x46,
		0x1d, 0xd0, 0xa3, 0x0d, 0x44, 0x02, 0x44, 0x02, 0x44, 0x02, 0x44, 0x02, 0x44, 0x02, 0x44, 0x02,
		0x44, 0x42, 0x8b, 0x48, 0xa0, 0x78, 0x09, 0xe4, 0x01, 0xe4, 0x01, 0xe4, 0x01, 0xe4, 0x01, 0xe4,
		0x01, 0xe4, 0x01, 0xc5, 0x4b, 0xe6, 0x64, 0x6b, 0x5f, 0xf5, 0x36, 0xed, 0x3d, 0x35, 0x69, 0x6b,
		0xa3, 0x4b, 0x9b, 0x0e, 0x4b, 0x43, 0x2e, 0x15, 0xba, 0xb4, 0xa9, 0x10, 0x32, 0x6c, 0x82, 0xc2,
		0xfd, 0x80, 0xfb, 0x01, 0xf7, 0x03, 0xee, 0x07, 0xdc, 0x0f, 0xb8, 0x1f, 0x27, 0x13, 0xbb, 0x44,
		0x97, 0x36, 0xd0, 0x05, 0xd0, 0x85, 0x6d, 0xef, 0x1f, 0x5d, 0xda, 0x2c, 0x6c, 0x74, 0xc0, 0x74,
		0xc0, 0x74, 0xc0, 0xd3, 0x80, 0xa7, 0x01, 0x4f, 0x03, 0x9e, 0x06, 0x3c, 0x8d, 0x02, 0xe2, 0x9e,
		0xe8, 0xd2, 0x66, 0x70, 0x31, 0x4b, 0xb1, 0x6b, 0xb4, 0xb3, 0x36, 0x6d, 0x6d, 0xf4, 0x69, 0x5b,
		0x58, 0xfc, 0x62, 0x1b, 0xb5, 0xb5, 0x8f, 0xb5, 0x53, 0x5b, 0xbb, 0x98, 0x56, 0x6d, 0x6d, 0xad,
		0x5e, 0x6d, 0x29, 0x6b, 0xec, 0xd1, 0x0d, 0x3e, 0xc0, 0xcc, 0x2e, 0xce, 0xf8, 0x52, 0xcd, 0x9e,
		0x6d, 0x75, 0xa3, 0x3d, 0xdb, 0x02, 0x26, 0xd2, 0x55, 0x3e, 0xe4, 0xb6, 0x6d, 0xe3, 0x47, 0xd8,
		0x55, 0xe7, 0x36, 0x37, 0x70, 0xd8, 0x73, 0xfe, 0xa6, 0x6d, 0xc3, 0xcb, 0xb7, 0x75, 0xf7, 0x9a,
		0xb0, 0xf8, 0xed, 0x34, 0xbc, 0x52, 0xdf, 0xac, 0xd7, 0x9d, 0x7c, 0xbd, 0xe1, 0xea, 0xe5, 0xe8,
		0x0d, 0xb7, 0x5d, 0x00, 0x55, 0xdd, 0xed, 0xd2, 0xb4, 0x87, 0xdb, 0x2a, 0xa0, 0x66, 0x20, 0x2d,
		0xb7, 0x47, 0x3c, 0x79, 0x0b, 0x89, 0x1b, 0x88, 0x5c, 0x3e, 0xaf, 0x84, 0x8f, 0x2b, 0xe9, 0x4f,
		0xca, 0x71, 0x43, 0xf9, 0xd8, 0x96, 0xa2, 0x7f, 0xa8, 0xed, 0x99, 0xa8, 0x7b, 0x22, 0xaf, 0x72,
		0xa4, 0x57, 0x7d, 0x49, 0xf4, 0xfd, 0xb9, 0x7d, 0xae, 0x92, 0x21, 0x16, 0xd9, 0x51, 0xa5, 0x48,
		0x1b, 0x00, 0xd3, 0xa7, 0x36, 0xe1, 0xcc, 0x63, 0x94, 0x07, 0x24, 0x0c, 0xbc, 0x97, 0xfc, 0x58,
		0xb1, 0x34, 0xd2, 0x24, 0x6c, 0xa4, 0x76, 0x0c, 0xc8, 0x01, 0xe4, 0x30, 0x81, 0x1c, 0xdd, 0x30,
		0xf4, 0x18, 0x0d, 0x24, 0xa0, 0xa3, 0xd1, 0x28, 0x42, 0xd3, 0x12, 0x4f, 0xb8, 0x36, 0x8d, 0x05,
		0xe9, 0x85, 0xfc, 0x89, 0x72, 0xc7, 0x0d, 0xfa, 0x12, 0xda, 0xb6, 0x6a, 0x34, 0x54, 0x00, 0x2a,
		0x20, 0x29, 0x3d, 0x39, 0x83, 0x29, 0x32, 0x9b, 0x8d, 0x39, 0x37, 0x17, 0xb7, 0x3d, 0xd5, 0xfb,
		0xe7, 0x0c, 0x95, 0xb7, 0x83, 0x83, 0xbc, 0x50, 0x4c, 0xdf, 0x10, 0x7b, 0x16, 0x77, 0xf1, 0x20,
		0x7c, 0x22, 0xae, 0x1f, 0x85, 0x3c, 0xf3, 0xac, 0x77, 0x2a, 0x2b, 0x03, 0xb7, 0x3f, 0xd0, 0x15,
		0x8f, 0x8e, 0x92, 0xf9, 0xc9, 0x95, 0xa2, 0x21, 0x93, 0x92, 0x21, 0x6d, 0x5e, 0xea, 0x30, 0x2f,
		0x47, 0x6a, 0x5e, 0x16, 0x63, 0x60, 0x24, 0x4e, 0xba, 0x6e, 0x20, 0x7a, 0x84, 0xb3, 0x9e, 0x8c,
		0xb1, 0xc9, 0xe3, 0xb2, 0x49, 0x76, 0x3d, 0xde, 0x95, 0xcf, 0x76, 0x05, 0x9f, 0x6d, 0x71, 0x49,
		0x9a, 0x27, 0xe8, 0xa1, 0xe5, 0x10, 0x60, 0xd9, 0x26, 0xc4, 0x95, 0xaa, 0xdf, 0xf7, 0x45, 0xfd,
		0xe1, 0xe1, 0xbc, 0xfe, 0x25, 0x7e, 0x89, 0x05, 0xf3, 0x87, 0xbf, 0x7b, 0x61, 0xb5, 0xfe, 0xa5,
		0x71, 0x5f, 0x27, 0xb7, 0x9d, 0xec, 0x3f, 0x5f, 0x9a, 0xd5, 0xfb, 0x3a, 0x69, 0x8d, 0xfe, 0x71,
		0x75, 0x5f, 0x27, 0x57, 0x9d, 0xda, 0x97, 0xfb, 0xc6, 0xe4, 0xf3, 0xec, 0xd7, 0xda, 0xc3, 0xc3,
		0x79, 0xb5, 0x3e, 0xfc, 0xbd, 0xfa, 0xf0, 0xe0, 0xd4, 0x3e, 0xd7, 0xdf, 0x5c, 0xbe, 0xd6, 0xbe,
		0x30, 0x31, 0x60, 0x3c, 0x60, 0x82, 0x54, 0xe7, 0x3e, 0x6a, 0xbc, 0x56, 0x2f, 0xee, 0x69, 0xd7,
		0x76, 0x3a, 0xb5, 0x6f, 0xaa, 0x17, 0x0b, 0x1f, 0xd5, 0xbe, 0xb9, 0xa8, 0x2e, 0x5e, 0x5e, 0xfb,
		0x52, 0x4d, 0xef, 0xa9, 0xd1, 0x49, 0xff, 0xf2, 0xa5, 0xda, 0x68, 0xde, 0xd7, 0xc9, 0x4d, 0xa7,
		0x56, 0xcb, 0xbe, 0xf7, 0xbe, 0xde, 0x59, 0xfe, 0x66, 0x97, 0x77, 0x4d, 0x3e, 0x88, 0x47, 0xfb,
		0xb9, 0x6f, 0x6a, 0xf5, 0x14, 0x39, 0x3a, 0x34, 0x77, 0xb4, 0x0c, 0x2c, 0x7b, 0x16, 0x9c, 0x92,
		0x24, 0x35, 0x96, 0x5d, 0x2f, 0xa7, 0xa9, 0xf5, 0x93, 0x58, 0x14, 0x61, 0xf4, 0x26, 0x26, 0x3c,
		0x14, 0xd5, 0x58, 0x50, 0x2e, 0x62, 0xf2, 0xe4, 0x8a, 0x41, 0xf5, 0xfc, 0xcd, 0x99, 0x17, 0x9e,
		0xd5, 0x2c, 0x1a, 0x38, 0xd6, 0xf9, 0xf9, 0xc5, 0xf9, 0x79, 0xb6, 0x0d, 0x67, 0xbd, 0xb5, 0xce,
		0x96, 0xf0, 0xe8, 0xce, 0xa7, 0x36, 0x79, 0xe4, 0xbd, 0xb3, 0x9a, 0xcc, 0x2e, 0xdd, 0x7b, 0xce,
		0x43, 0xfe, 0x91, 0xc5, 0x31, 0xed, 0x6b, 0xa4, 0x8e, 0x7e, 0x08, 0xc3, 0xa8, 0x4b, 0xed, 0x3f,
		0xac, 0xc9, 0x96, 0x45, 0x6c, 0xd9, 0x34, 0x08, 0x42, 0x61, 0x75, 0x99, 0x65, 0x67, 0xd4, 0x23,
		0xe1, 0xcc, 0xb1, 0xc2, 0xc0, 0x5a, 0x44, 0x29, 0x2b, 0xec, 0x59, 0xd9, 0x43, 0x8d, 0xee, 0x5f,
		0x36, 0x8f, 0x4c, 0x23, 0xa3, 0x6a, 0x96, 0x52, 0x0c, 0x3b, 0xfe, 0xf8, 0xa3, 0x95, 0x50, 0x4b,
		0xac, 0xd1, 0x4e, 0xa8, 0x9a, 0x63, 0x1c, 0x46, 0x17, 0xf5, 0x10, 0x72, 0x06, 0xcc, 0xe8, 0xcb,
		0xd0, 0x38, 0x2f, 0xeb, 0xcc, 0x5f, 0x56, 0x2a, 0x8d, 0x33, 0x0c, 0x87, 0xed, 0x43, 0x69, 0x7e,
		0xcb, 0x6e, 0x74, 0xe1, 0xed, 0x5a, 0x61, 0xe0, 0xbd, 0x48, 0xbc, 0xdf, 0xd1, 0xfd, 0x43, 0x69,
		0x46, 0x4a, 0x63, 0x74, 0x51, 0x8f, 0x54, 0x69, 0xb6, 0x2a, 0xc5, 0x20, 0x8c, 0xc5, 0xd9, 0xee,
		0x15, 0xe2, 0xc7, 0x55, 0x76, 0x8e, 0x3a, 0x0e, 0x73, 0x2c, 0x11, 0x5a, 0x74, 0xfc, 0xbe, 0xac,
		0xa5, 0xf7, 0x95, 0xde, 0x2f, 0x34, 0x60, 0xa4, 0x01, 0x7a, 0xab, 0x78, 0xa4, 0x22, 0x3f, 0x93,
		0x3a, 0xe2, 0xf6, 0xee, 0x26, 0xd6, 0xe1, 0x7e, 0xee, 0xcf, 0x01, 0xf5, 0xd9, 0xdb, 0x38, 0xe9,
		0xc6, 0x82, 0xbb, 0x41, 0x9f, 0x74, 0x59, 0x2f, 0xe4, 0xac, 0x6a, 0x27, 0x9c, 0xb3, 0x40, 0x54,
		0x6b, 0x6f, 0xac, 0xb3, 0xf3, 0xb3, 0x5a, 0x67, 0x7e, 0xaa, 0xa1, 0x8b, 0xbd, 0x6a, 0xb6, 0x6c,
		0x13, 0x7f, 0x66, 0x3a, 0xda, 0x13, 0x8c, 0x6f, 0x99, 0x6d, 0xa2, 0x93, 0x5e, 0x68, 0x53, 0x8f,
		0xf8, 0x6e, 0x26, 0x5d, 0x0e, 0xdb, 0x8b, 0x3a, 0xce, 0x3e, 0x9a, 0x95, 0xa2, 0xeb, 0x50, 0x4c,
		0x96, 0x6e, 0x2d, 0x37, 0x29, 0x81, 0x8a, 0x8e, 0x63, 0x49, 0xc6, 0x57, 0x76, 0xbf, 0x6a, 0xbb,
		0x97, 0x2d, 0xd3, 0x30, 0x62, 0x9c, 0x38, 0xe1, 0x53, 0x40, 0x38, 0xa3, 0x71, 0x8e, 0xa4, 0xbc,
		0x69, 0xd1, 0xca, 0xe2, 0x48, 0x6c, 0xe0, 0x20, 0xc2, 0x9a, 0xeb, 0x2d, 0xc8, 0x95, 0x8e, 0x15,
		0xb1, 0x7b, 0xa3, 0xae, 0x2a, 0xa9, 0x27, 0x98, 0xa5, 0x09, 0x48, 0x6d, 0x78, 0x2e, 0x0f, 0x85,
		0xb2, 0x40, 0x59, 0xf2, 0x8b, 0x4e, 0x2c, 0xa8, 0x60, 0x07, 0xad, 0x2b, 0xc4, 0x71, 0x63, 0xda,
		0xf5, 0x98, 0xa3, 0x86, 0x33, 0x1b, 0xa7, 0x82, 0x2e, 0x41, 0x97, 0x8e, 0x1e, 0x78, 0x86, 0x26,
		0x40, 0x4e, 0x6b, 0xf2, 0x98, 0x0d, 0xa8, 0x07, 0xd4, 0xa3, 0xfc, 0x50, 0x23, 0x55, 0x48, 0xb0,
		0xbd, 0x68, 0x2e, 0x5f, 0x91, 0x5c, 0xfe, 0xa2, 0x38, 0xad, 0x22, 0xb8, 0x7c, 0x45, 0x6f, 0xfb,
		0x2c, 0x02, 0xda, 0x52, 0x41, 0x63, 0x69, 0x14, 0x02, 0x4d, 0xa6, 0xd6, 0x29, 0x06, 0x8a, 0xf2,
		0x64, 0x21, 0x4e, 0xeb, 0x42, 0xa2, 0xed, 0x69, 0x87, 0x28, 0x0a, 0x3a, 0x94, 0xa2, 0x20, 0xce,
		0x6c, 0xe6, 0x3e, 0x32, 0xe2, 0x46, 0x8f, 0x2d, 0x62, 0x0f, 0x98, 0xfd, 0x47, 0x7e, 0x90, 0x5c,
		0x31, 0x16, 0x69, 0x62, 0x00, 0xcb, 0x5c, 0x6f, 0xa1, 0x24, 0x89, 0xd8, 0x33, 0x22, 0xdc, 0xd6,
		0x10, 0xff, 0x36, 0xc4, 0x1f, 0xe2, 0x5f, 0x56, 0xf1, 0x97, 0x02, 0x0c, 0x89, 0x7c, 0xa4, 0x7c,
		0x79, 0x48, 0x12, 0x8b, 0x52, 0xdd, 0x98, 0x59, 0xe4, 0x46, 0x59, 0x62, 0x91, 0x15, 0x72, 0x6b,
		0xe3, 0x75, 0x32, 0xc9, 0x14, 0x6a, 0x9b, 0x54, 0xd3, 0xbd, 0xe2, 0x59, 0x2a, 0x34, 0xd9, 0x1d,
		0xc9, 0xd8, 0xa4, 0xe5, 0xc6, 0x56, 0x10, 0x0a, 0x2b, 0x0a, 0xe3, 0xd8, 0xed, 0x7a, 0x6c, 0xd3,
		0x56, 0x7f, 0x6c, 0x85, 0x62, 0xc0, 0xb8, 0x25, 0x06, 0x34, 0xb0, 0x86, 0x8f, 0x99, 0x3e, 0xa5,
		0x5c, 0x56, 0x85, 0xca, 0x46, 0x95, 0x89, 0x0d, 0x2a, 0xad, 0x8d, 0xa9, 0xf9, 0x3d, 0xe3, 0x9d,
		0xac, 0xe6, 0x6e, 0xba, 0x38, 0xac, 0xfd, 0x74, 0x43, 0x56, 0x68, 0x6a, 0x2a, 0x63, 0x16, 0xd8,
		0xcc, 0xa4, 0x4e, 0xfd, 0x30, 0x5d, 0xd1, 0x30, 0x4a, 0x97, 0x32, 0x2e, 0xde, 0xde, 0x0f, 0x1f,
		0x62, 0x97, 0x16, 0x7f, 0xc5, 0x53, 0x16, 0xf7, 0x06, 0x4b, 0xe7, 0x5f, 0x46, 0xf9, 0xea, 0xc0,
		0x54, 0x7d, 0xcc, 0x68, 0xba, 0xba, 0x9a, 0x6e, 0xa6, 0x17, 0x52, 0x87, 0x74, 0xa9, 0x47, 0x03,
		0x3b, 0xaf, 0xab, 0xb9, 0x30, 0x04, 0xee, 0xe6, 0xa1, 0xbb, 0x9b, 0xb1, 0xeb, 0xb9, 0x2c, 0x10,
		0x64, 0x40, 0xe3, 0x01, 0x89, 0xf2, 0x11, 0xd8, 0x19, 0xca, 0xbd, 0x6a, 0x78, 0x3e, 0xd6, 0xdd,
		0x00, 0xeb, 0x3e, 0x2e, 0xd6, 0x9d, 0xf7, 0x50, 0x83, 0x4a, 0x26, 0x2b, 0xdd, 0x24, 0x6b, 0x10,
		0x4a, 0x22, 0xc6, 0xc9, 0xc8, 0xcc, 0x4a, 0xb2, 0xbd, 0xd5, 0xd3, 0xe4, 0x3d, 0x81, 0x41, 0xa2,
		0xe2, 0x7d, 0x32, 0xa8, 0x91, 0x8f, 0xad, 0x74, 0xe4, 0xce, 0x09, 0xa9, 0x97, 0xfb, 0x9c, 0x90,
		0xfc, 0x0a, 0xa2, 0x43, 0x7d, 0xad, 0x32, 0x1f, 0x15, 0x92, 0x5b, 0x81, 0xf2, 0xf3, 0x55, 0x4b,
		0xa2, 0xd1, 0x9b, 0x74, 0x8b, 0xd2, 0xb9, 0xc6, 0x2c, 0x37, 0x32, 0x6f, 0x6e, 0x24, 0x92, 0x32,
		0x3d, 0xee, 0xd4, 0xfa, 0x7e, 0x2a, 0x64, 0xef, 0xe9, 0xf4, 0xf9, 0x9c, 0x36, 0x2b, 0x51, 0x6c,
		0x68, 0x6b, 0xaa, 0xc3, 0xa4, 0x7e, 0x67, 0x49, 0x85, 0x3e, 0x9e, 0x5a, 0xfd, 0x3b, 0x27, 0x4b,
		0x77, 0xd9, 0x3c, 0xfc, 0xb5, 0x2b, 0x28, 0x25, 0xb2, 0xb3, 0xc3, 0xf3, 0xab, 0xdc, 0x28, 0x2f,
		0x4d, 0x5b, 0xc5, 0xdf, 0xe5, 0x88, 0x08, 0x10, 0x0a, 0x08, 0x55, 0x2c, 0x42, 0xc9, 0x8a, 0xe4,
		0x9c, 0x07, 0x71, 0x2b, 0x31, 0x66, 0x74, 0x8b, 0x85, 0xa3, 0xd4, 0xf4, 0xc1, 0x1e, 0x5b, 0x44,
		0xb9, 0x1b, 0xbb, 0x4c, 0xd9, 0xfd, 0xb2, 0x56, 0x49, 0x56, 0x31, 0x2f, 0x4d, 0x50, 0xad, 0xce,
		0x14, 0xf3, 0x0e, 0x7f, 0x9d, 0xab, 0x01, 0x9e, 0x29, 0x01, 0x6e, 0x8e, 0x6a, 0x80, 0x1f, 0x1e,
		0xce, 0x6b, 0x9f, 0x2f, 0x5f, 0xe5, 0x07, 0x5e, 0x8c, 0xbe, 0xac, 0xf6, 0xa5, 0x7a, 0xdf, 0x20,
		0xcd, 0xce, 0xf8, 0x1f, 0x97, 0xf7, 0x75, 0xd2, 0xec, 0xe4, 0x29, 0xf8, 0x55, 0x33, 0xc6, 0x8a,
		0x70, 0xaa, 0x27, 0x11, 0xed, 0xc3, 0x95, 0x88, 0xbb, 0x2f, 0xe9, 0x9b, 0xa1, 0xa4, 0xf7, 0x8e,
		0xfc, 0xd0, 0xf9, 0x5c, 0x7f, 0xd3, 0x7a, 0xad, 0xdd, 0xd5, 0xaa, 0x8b, 0x7f, 0xbb, 0xab, 0x7d,
		0xae, 0xbf, 0xb9, 0x7a, 0xad, 0x56, 0x57, 0x7c, 0xf2, 0xcd, 0xaa, 0x39, 0x6a, 0x5f, 0xaa, 0xd5,
		0xea, 0x48, 0x16, 0xe6, 0xe4, 0xe3, 0xbe, 0xde, 0xe8, 0x7c, 0x93, 0xfd, 0x3a, 0xfc, 0xef, 0x44,
		0xc2, 0x72, 0x5d, 0x5c, 0xab, 0x55, 0x67, 0x05, 0x2b, 0xfd, 0xf9, 0xb9, 0x39, 0xad, 0x35, 0x1f,
		0x7f, 0x30, 0x2d, 0x81, 0xaf, 0x94, 0xa6, 0xe3, 0xf6, 0x2e, 0xb9, 0x84, 0x4f, 0x9f, 0x33, 0xaf,
		0x39, 0x96, 0xe7, 0x12, 0xd3, 0xa1, 0xf0, 0xb8, 0xc1, 0x67, 0xc0, 0x67, 0xe0, 0x71, 0xc3, 0xe3,
		0x36, 0xed, 0x71, 0xb7, 0x5b, 0xf0, 0xb8, 0x8b, 0x46, 0x49, 0xad, 0x90, 0xf7, 0x28, 0x35, 0x37,
		0xaf, 0x13, 0x23, 0x77, 0x98, 0x85, 0xfc, 0x21, 0x16, 0x46, 0x0e, 0xaf, 0x90, 0x3b, 0xb4, 0xa2,
		0x4c, 0xe7, 0x23, 0x2c, 0xee, 0x4e, 0x5e, 0xa8, 0x6c, 0x4f, 0x59, 0x3a, 0x3b, 0xb3, 0x1f, 0x42,
		0xea, 0x7c, 0x3b, 0xfe, 0xfa, 0x4f, 0xbf, 0x8e, 0xbf, 0xfe, 0xef, 0x34, 0x1e, 0x8c, 0xa8, 0x41,
		0xe9, 0x92, 0x86, 0xdc, 0x1e, 0xe9, 0x31, 0x2a, 0x12, 0x6e, 0x34, 0xcd, 0x21, 0xe6, 0x5e, 0x36,
		0xed, 0xdd, 0xff, 0x30, 0xee, 0xda, 0x83, 0xb0, 0x59, 0xf0, 0xfe, 0xda, 0xcc, 0x53, 0xec, 0x78,
		0x8f, 0x6d, 0xe1, 0x31, 0x4f, 0x2a, 0xcd, 0x21, 0x57, 0x32, 0x80, 0x39, 0x85, 0xd2, 0xc9, 0x76,
		0xd8, 0xd8, 0x62, 0x33, 0x4f, 0x6b, 0xcd, 0x2d, 0xbe, 0x03, 0x72, 0x1a, 0x76, 0x95, 0xd3, 0xb0,
		0x95, 0x9b, 0xe7, 0x6d, 0x94, 0x9a, 0x27, 0xa2, 0x92, 0xb7, 0xa5, 0x65, 0x3e, 0x34, 0xcf, 0x6f,
		0xda, 0x24, 0xc9, 0xb3, 0x32, 0xe1, 0x93, 0x27, 0x78, 0xaf, 0xf9, 0x68, 0x88, 0xfc, 0xa3, 0x36,
		0xaf, 0xae, 0xca, 0xf7, 0xb0, 0x05, 0x64, 0x15, 0xe6, 0x8d, 0xc5, 0x55, 0xee, 0xdf, 0x91, 0x7f,
		0x52, 0xf2, 0x67, 0x9d, 0xdc, 0x5a, 0x7f, 0xf9, 0xf7, 0x7f, 0xf9, 0xd7, 0xbf, 0xfe, 0xd7, 0x43,
		0x52, 0xaf, 0x37, 0xdb, 0xd5, 0xda, 0x97, 0xaf, 0xdf, 0xfe, 0xf7, 0xff, 0x9d, 0xbf, 0x39, 0xbb,
		0xf8, 0x74, 0xf7, 0x6f, 0xdf, 0x90, 0xce, 0xdf, 0x2a, 0xb2, 0xa0, 0x91, 0xcb, 0x62, 0x4e, 0x0a,
		0x95, 0x1f, 0x79, 0x8f, 0xf8, 0x22, 0xd9, 0x6e, 0x3d, 0x97, 0x46, 0x68, 0x5a, 0xd2, 0x26, 0x2c,
		0x69, 0x49, 0x2c, 0x69, 0xe2, 0x06, 0xa2, 0xd1, 0xce, 0x61, 0x4b, 0xdb, 0x1b, 0x2e, 0xc9, 0x17,
		0xb6, 0x28, 0xcc, 0x92, 0xb6, 0x6e, 0x9b, 0xa7, 0x63, 0x4c, 0x6f, 0xaf, 0xea, 0xf5, 0xe3, 0xb1,
		0xa6, 0xba, 0x56, 0x6c, 0x73, 0xb1, 0x79, 0xfe, 0x82, 0x61, 0x58, 0xae, 0x83, 0xb3, 0x5c, 0xb9,
		0x8a, 0xc0, 0xf3, 0x14, 0x7f, 0x6f, 0x29, 0xfa, 0xce, 0x27, 0x8d, 0x11, 0x0f, 0x45, 0x68, 0x87,
		0x5e, 0xbc, 0x5d, 0x18, 0xa7, 0x97, 0x22, 0xc7, 0xba, 0xd4, 0xb2, 0xb8, 0x35, 0xc7, 0xba, 0xdb,
		0x8f, 0xf2, 0x67, 0x54, 0xa7, 0x17, 0x1f, 0x54, 0xfe, 0xf4, 0xf6, 0x1b, 0xb6, 0x0e, 0x39, 0x77,
		0x3a, 0x7d, 0xbc, 0xb2, 0xe4, 0x4d, 0x53, 0xc7, 0x77, 0x83, 0x9c, 0x9d, 0x53, 0x96, 0xde, 0xd8,
		0xec, 0xe0, 0x22, 0x77, 0x6c, 0x59, 0x90, 0xc5, 0x1c, 0x4f, 0x70, 0xdb, 0x36, 0x9f, 0x26, 0xa8,
		0x6a, 0x84, 0xb6, 0x66, 0x68, 0x6b, 0x88, 0x09, 0x4d, 0x91, 0xdb, 0xe8, 0x29, 0x7e, 0xbb, 0x56,
		0x5e, 0x2b, 0x2c, 0xc9, 0x66, 0x31, 0x39, 0xf9, 0x83, 0xea, 0xa3, 0x2b, 0x9c, 0x57, 0x30, 0x19,
		0x2b, 0x75, 0x6e, 0x41, 0x7e, 0xff, 0x6c, 0xed, 0x62, 0x9f, 0x5b, 0x6f, 0xad, 0xb3, 0x51, 0xb7,
		0xb3, 0xac, 0x6e, 0xb8, 0x7a, 0x7e, 0x7e, 0x91, 0xe5, 0xc9, 0x25, 0x41, 0x76, 0x02, 0xd6, 0xc5,
		0xcc, 0xeb, 0x48, 0xaf, 0x1d, 0xda, 0x92, 0x71, 0x89, 0x71, 0x96, 0x3f, 0x95, 0xeb, 0x4a, 0xf6,
		0x18, 0x05, 0x6b, 0xae, 0xa8, 0xa9, 0xa4, 0x5e, 0x69, 0xb5, 0xce, 0x5d, 0x5a, 0x86, 0x9f, 0x83,
		0x61, 0x6d, 0xec, 0x20, 0xeb, 0xc0, 0xcc, 0x59, 0x1c, 0x5b, 0x3d, 0xea, 0xbb, 0x9e, 0xcb, 0x62,
		0x2b, 0x7d, 0x25, 0x56, 0x97, 0x59, 0xc3, 0xbb, 0x75, 0xce, 0x2b, 0x8a, 0xfb, 0xb6, 0x1a, 0x5d,
		0x72, 0x57, 0x19, 0x1a, 0xdd, 0x6e, 0xb9, 0xc6, 0x6c, 0xcf, 0x5a, 0x3b, 0x24, 0xb5, 0xa8, 0x4a,
		0x5f, 0xf9, 0x7a, 0x92, 0xd9, 0xe6, 0x34, 0xce, 0xb2, 0xbc, 0xc8, 0xb8, 0x8c, 0x57, 0x9e, 0x77,
		0x2c, 0x4c, 0x20, 0x07, 0xf9, 0x0d, 0x40, 0x3e, 0x20, 0x5f, 0x87, 0x34, 0x4f, 0x05, 0xd9, 0xf3,
		0xc2, 0x27, 0x12, 0x3e, 0x05, 0x84, 0xc6, 0xea, 0xed, 0xcf, 0xe7, 0x66, 0x91, 0x5c, 0x43, 0x15,
		0x3a, 0x3d, 0x19, 0x5c, 0x97, 0x33, 0x5a, 0x1d, 0xc9, 0x7b, 0x93, 0x63, 0xd8, 0xca, 0x6a, 0xa7,
		0xa3, 0x7e, 0xc6, 0xd4, 0xd0, 0x14, 0x48, 0x6a, 0xab, 0xa5, 0x71, 0x54, 0x34, 0xa1, 0xa6, 0x8a,
		0xe0, 0x25, 0xf9, 0xfe, 0xa5, 0x19, 0xfb, 0xca, 0x2d, 0x89, 0x1b, 0x8d, 0x3c, 0xfa, 0x2b, 0x85,
		0xa1, 0x6a, 0x89, 0x97, 0xea, 0xcc, 0x79, 0xba, 0x07, 0xa0, 0x91, 0x88, 0xb9, 0xb4, 0x37, 0x50,
		0x7f, 0xa3, 0x37, 0x8f, 0xa9, 0xe4, 0x42, 0xf5, 0x8d, 0x04, 0x43, 0x52, 0x38, 0xbf, 0xc4, 0x1a,
		0x09, 0x9b, 0x4b, 0x4b, 0x9c, 0x7b, 0x2f, 0xfb, 0x10, 0x17, 0x79, 0x47, 0xec, 0xb9, 0xa8, 0xfa,
		0x0a, 0x99, 0x33, 0x36, 0x39, 0xf3, 0xc3, 0x47, 0x46, 0x22, 0xee, 0x3e, 0x52, 0xc1, 0xb4, 0x98,
		0xc3, 0xf2, 0x54, 0x6a, 0x10, 0xdd, 0x00, 0x44, 0x03, 0xa2, 0x77, 0x01, 0xd1, 0xb2, 0x0c, 0x7b,
		0x32, 0xd0, 0xed, 0x07, 0x21, 0x67, 0x24, 0x62, 0x8c, 0xab, 0x68, 0xcc, 0x92, 0x10, 0x2d, 0xcc,
		0xa7, 0xb8, 0xee, 0x3a, 0xec, 0x7b, 0x32, 0x49, 0x66, 0x39, 0xd5, 0xc2, 0x07, 0x1d, 0xc5, 0xfb,
		0x56, 0x63, 0xe6, 0xda, 0xea, 0x6f, 0xc2, 0x0c, 0x18, 0x37, 0x07, 0x26, 0xc3, 0x5b, 0x46, 0xcd,
		0x43, 0x21, 0xf1, 0x2d, 0xd3, 0xe6, 0x42, 0x13, 0xc0, 0x15, 0xe5, 0x47, 0x99, 0xe9, 0x2f, 0x49,
		0x4f, 0xfe, 0x1e, 0x9d, 0x5b, 0x31, 0xb4, 0xb1, 0xd3, 0x25, 0xd0, 0x88, 0xd1, 0x2f, 0xcd, 0xa5,
		0x14, 0xb3, 0x37, 0xe7, 0x89, 0x2c, 0xbd, 0x94, 0x20, 0x14, 0xd5, 0xf3, 0xf3, 0x0b, 0x3f, 0x74,
		0xd8, 0x4c, 0x74, 0xdf, 0x39, 0x1b, 0x1e, 0xb4, 0x6a, 0xbd, 0xcd, 0x74, 0xa0, 0x5a, 0xab, 0x69,
		0x2a, 0x96, 0x65, 0x2c, 0x0c, 0xbf, 0xf6, 0x49, 0xb2, 0x47, 0x88, 0x07, 0x61, 0xe2, 0x39, 0xd6,
		0xe8, 0x7c, 0xb5, 0xf1, 0xd3, 0x58, 0x6e, 0xcf, 0x9a, 0x47, 0x21, 0x6b, 0x40, 0x63, 0x4b, 0x84,
		0xe9, 0x45, 0xe9, 0x03, 0x9e, 0x1b, 0x78, 0x3c, 0x93, 0x86, 0x6d, 0x9d, 0x91, 0x33, 0x15, 0xc7,
		0x2f, 0xdc, 0xee, 0xad, 0xb5, 0x81, 0x7a, 0x6f, 0xc9, 0xc8, 0x3d, 0xbd, 0x7e, 0xb5, 0xdf, 0x19,
		0xd4, 0x47, 0x77, 0x76, 0xb5, 0xf1, 0xa1, 0xc0, 0xf4, 0x3d, 0x46, 0x1d, 0x37, 0xe8, 0x93, 0x30,
		0xf0, 0x5e, 0xf4, 0x39, 0xe3, 0xdc, 0x6c, 0x60, 0x8c, 0x60, 0x8c, 0x60, 0x8c, 0x60, 0x8c, 0x60,
		0x8c, 0x60, 0x8c, 0xbb, 0x62, 0x8c, 0x22, 0xb4, 0x62, 0x26, 0xac, 0x59, 0x1c, 0x4a, 0xff, 0x06,
		0xb2, 0x58, 0x16, 0xb2, 0xb8, 0xf1, 0x05, 0x81, 0x27, 0x96, 0x96, 0x27, 0xa6, 0xef, 0x54, 0x9f,
		0x1f, 0x66, 0xb3, 0xec, 0x93, 0x17, 0x8e, 0xe5, 0x10, 0xd4, 0x10, 0xd4, 0x10, 0xd4, 0x70, 0xf7,
		0xd4, 0x50, 0xee, 0xec, 0xd4, 0xad, 0xf4, 0xb0, 0xa5, 0x31, 0x87, 0x5c, 0x62, 0xb0, 0x01, 0xab,
		0x5b, 0xe8, 0xb6, 0x91, 0x64, 0xc3, 0x97, 0xa5, 0xf1, 0x1a, 0x1d, 0x29, 0x26, 0x25, 0x53, 0x17,
		0xdd, 0x7e, 0x74, 0xb1, 0x90, 0x78, 0x78, 0xa1, 0xbb, 0x01, 0x6b, 0xa9, 0xf7, 0xb1, 0xf8, 0x65,
		0x7c, 0x63, 0x9f, 0xbe, 0xed, 0x47, 0x9f, 0xde, 0xc5, 0xbf, 0x50, 0x31, 0xf8, 0x79, 0x78, 0x5b,
		0x9f, 0x7e, 0xcd, 0x6e, 0xeb, 0x97, 0xe1, 0x5d, 0xbd, 0x8b, 0x2b, 0x45, 0xed, 0x7a, 0x1b, 0xcd,
		0xbe, 0x53, 0x7c, 0xc9, 0x85, 0xbd, 0x5c, 0x99, 0x24, 0x4c, 0xe3, 0xaf, 0xb0, 0xb2, 0xcb, 0x74,
		0xdc, 0x44, 0x0c, 0x58, 0x20, 0x5c, 0x5b, 0x6e, 0xf1, 0xa7, 0xf9, 0x8b, 0xf3, 0xe3, 0x91, 0x8c,
		0x8b, 0x64, 0x5c, 0x03, 0xe6, 0x40, 0x3a, 0x19, 0xf7, 0x0f, 0xf6, 0x62, 0x0f, 0xa8, 0x42, 0x52,
		0xdb, 0xe4, 0xb5, 0x4f, 0x66, 0x40, 0xa2, 0x6b, 0xe1, 0x0c, 0x17, 0x59, 0x34, 0xea, 0x74, 0x48,
		0x3f, 0xd1, 0xd5, 0x63, 0xb4, 0xc7, 0x59, 0x4f, 0xa7, 0x65, 0xf4, 0xb5, 0x5a, 0xcb, 0xe8, 0x45,
		0x90, 0x8e, 0x5f, 0x62, 0xc1, 0xfc, 0xbb, 0xe1, 0x8f, 0xf4, 0xef, 0x64, 0xac, 0x85, 0x77, 0xf3,
		0xb8, 0x32, 0xff, 0xd9, 0xf8, 0x97, 0xf9, 0xbf, 0x66, 0x00, 0x5c, 0xe8, 0xd2, 0x1b, 0x08, 0xa2,
		0xea, 0x05, 0x4f, 0x0d, 0xb8, 0x29, 0xe6, 0x56, 0xff, 0x7e, 0x69, 0xf5, 0xad, 0xb7, 0x96, 0x9d,
		0x70, 0xce, 0x02, 0x51, 0xad, 0x75, 0xe6, 0x07, 0x8d, 0x4e, 0xf3, 0x7c, 0xa8, 0x08, 0x3b, 0x22,
		0xbe, 0x73, 0xf5, 0x50, 0xd1, 0x71, 0x92, 0x8c, 0x46, 0x61, 0x67, 0xca, 0xe8, 0xbc, 0x17, 0x6b,
		0x7c, 0xc7, 0xe3, 0xc3, 0x26, 0xad, 0xd1, 0x0d, 0x5b, 0x36, 0x0d, 0xac, 0x2e, 0xb3, 0x68, 0x1c,
		0xbb, 0xfd, 0x80, 0x39, 0xba, 0xae, 0xb8, 0xc1, 0x50, 0x6b, 0x91, 0x21, 0xd6, 0x42, 0x42, 0xab,
		0x0b, 0x75, 0x76, 0x32, 0xab, 0xbe, 0xa7, 0xf8, 0xe5, 0xc1, 0xa7, 0x28, 0x1f, 0x99, 0xb3, 0xa6,
		0xe2, 0x74, 0x98, 0xf3, 0xd5, 0xe6, 0xbf, 0x7d, 0xb7, 0xce, 0x5a, 0x18, 0x84, 0x7e, 0x98, 0xc4,
		0x23, 0xe3, 0xad, 0xe4, 0xaf, 0x2d, 0x4c, 0x81, 0x96, 0x09, 0x70, 0xd9, 0x0c, 0x18, 0x85, 0x8f,
		0x34, 0x70, 0xa8, 0x08, 0xf9, 0x8b, 0x84, 0x5f, 0xaf, 0xd1, 0x66, 0x61, 0x51, 0x8c, 0x49, 0x90,
		0xf8, 0x5d, 0xc6, 0x15, 0x7a, 0x2e, 0x5c, 0xa3, 0x51, 0xfe, 0xc2, 0x78, 0x34, 0xca, 0xb7, 0x5a,
		0xcd, 0xdb, 0xd6, 0x6d, 0xfb, 0xba, 0x79, 0x7b, 0x85, 0x86, 0xf9, 0x5a, 0x5c, 0xc5, 0x0c, 0xf0,
		0xd9, 0x61, 0xf0, 0xc8, 0x78, 0x7f, 0x74, 0x76, 0xba, 0x24, 0xe4, 0xcd, 0x0e, 0x46, 0x7c, 0x12,
		0x60, 0xb7, 0x8f, 0xf8, 0xa4, 0xef, 0x06, 0xe4, 0x89, 0xba, 0x82, 0x88, 0x90, 0x50, 0xe7, 0x91,
		0x71, 0xe1, 0xc6, 0x4c, 0x3d, 0x58, 0xb9, 0x7a, 0x3a, 0xb4, 0x0f, 0x40, 0x54, 0x15, 0x51, 0xd5,
		0x3d, 0x45, 0x55, 0xb7, 0x76, 0x34, 0xde, 0x26, 0xeb, 0x6d, 0xf4, 0x0f, 0x50, 0x9c, 0x07, 0xfd,
		0x03, 0xb6, 0x2e, 0xf1, 0x65, 0xbb, 0x5e, 0x47, 0x03, 0x01, 0x44, 0xe7, 0x76, 0x11, 0x9d, 0x93,
		0xe7, 0xdb, 0xc6, 0x42, 0x73, 0xdf, 0xcd, 0x7c, 0xf5, 0x0e, 0xdd, 0x13, 0xe7, 0x25, 0xa0, 0xbe,
		0x6b, 0x93, 0x80, 0xb9, 0xfd, 0x41, 0x37, 0xe4, 0x0a, 0x5d, 0xcd, 0x96, 0xa7, 0x80, 0xab, 0x02,
		0x57, 0x65, 0x1f, 0xae, 0x0a, 0xb5, 0x6d, 0x16, 0x09, 0x8d, 0x8e, 0x66, 0xc3, 0xf1, 0x68, 0x46,
		0x02, 0xc2, 0x7f, 0x8c, 0xcd, 0x48, 0x7c, 0x2a, 0xec, 0x81, 0x81, 0x7a, 0x81, 0x6c, 0x1a, 0xbd,
		0xac, 0xfb, 0x06, 0xb2, 0xee, 0xcd, 0x29, 0x93, 0x71, 0xa5, 0x32, 0xae, 0x5c, 0x45, 0x28, 0x99,
		0x26, 0x85, 0x56, 0x2d, 0x78, 0x51, 0x54, 0xbe, 0x29, 0x46, 0x79, 0x5e, 0xf8, 0xc4, 0x1c, 0xed,
		0x96, 0x40, 0xcb, 0xe0, 0xb5, 0x30, 0xb1, 0xe6, 0x9b, 0xd2, 0x2b, 0x8f, 0x31, 0xa6, 0xb0, 0x26,
		0x15, 0xb7, 0x30, 0x05, 0x36, 0xad, 0xc8, 0x85, 0x29, 0x74, 0x61, 0x8a, 0x5d, 0xa4, 0x82, 0xeb,
		0x29, 0xba, 0x81, 0x78, 0x86, 0x65, 0xa4, 0xdc, 0x66, 0x59, 0xfa, 0x04, 0xdf, 0x7c, 0x52, 0xa8,
		0x34, 0xa8, 0xde, 0x18, 0x98, 0x2b, 0xef, 0x91, 0x7c, 0xb9, 0x27, 0xac, 0xde, 0x37, 0xc8, 0x6d,
		0xe7, 0xbe, 0x4e, 0x6e, 0x3b, 0x7f, 0xab, 0x7d, 0x99, 0xfb, 0xd7, 0xc3, 0xc3, 0xf9, 0xc3, 0xc3,
		0xf9, 0xdc, 0x9f, 0xf4, 0xc5, 0xa4, 0xb3, 0x57, 0x31, 0x91, 0x3a, 0xd5, 0x3a, 0x4f, 0xac, 0x52,
		0xee, 0xd4, 0xeb, 0x3c, 0xa1, 0xb9, 0x99, 0x19, 0x2f, 0x9b, 0x06, 0xa6, 0x9c, 0x3d, 0x23, 0xdb,
		0x70, 0x55, 0x79, 0x12, 0x4b, 0xe5, 0x45, 0xec, 0xd2, 0x36, 0x2f, 0xda, 0xe7, 0x70, 0xb8, 0x0a,
		0xa4, 0xfb, 0x72, 0x90, 0xe5, 0xe1, 0xd9, 0x4a, 0x9f, 0x78, 0xa9, 0xb7, 0x4e, 0xc8, 0x3b, 0x63,
		0x5d, 0x7d, 0x1e, 0x26, 0x91, 0x39, 0x46, 0x37, 0x33, 0x27, 0xc8, 0x1c, 0xc8, 0x1c, 0xc8, 0x9c,
		0x31, 0x94, 0x56, 0xc8, 0xf8, 0xdb, 0x21, 0x31, 0x54, 0xaf, 0x72, 0x59, 0xcb, 0x0c, 0xaf, 0xcd,
		0x30, 0xc3, 0x6c, 0x7f, 0xe5, 0xfc, 0xfc, 0x62, 0xf2, 0x7f, 0x99, 0x75, 0x1a, 0xfe, 0x97, 0xc8,
		0x57, 0xb1, 0x94, 0xc4, 0x74, 0x9b, 0x31, 0x46, 0x33, 0xa7, 0x55, 0x9a, 0x08, 0xbd, 0xc0, 0x64,
		0xc3, 0x64, 0xc3, 0x64, 0x17, 0x69, 0x66, 0xdd, 0x88, 0x18, 0x7b, 0xa9, 0x13, 0x43, 0x7b, 0x6b,
		0x60, 0xae, 0xd1, 0xa3, 0x9a, 0xf1, 0xbf, 0x0d, 0x7a, 0x3b, 0xd3, 0x85, 0x7b, 0x6c, 0x11, 0xa3,
		0xfa, 0x60, 0x3a, 0x8a, 0x51, 0x58, 0x34, 0x63, 0x1a, 0xd5, 0xa8, 0x66, 0x01, 0x8b, 0x2f, 0xd3,
		0xd8, 0xc5, 0x97, 0x46, 0xf6, 0x63, 0xf8, 0x7b, 0xf3, 0xbe, 0x4e, 0x5a, 0xe3, 0xdf, 0xaf, 0xee,
		0xeb, 0xe4, 0xaa, 0x53, 0x7b, 0x78, 0x38, 0xaf, 0x7d, 0xbe, 0x7c, 0x95, 0x1f, 0x78, 0x31, 0xfa,
		0xb2, 0x61, 0xf4, 0xa4, 0xd9, 0x19, 0xff, 0xe3, 0xf2, 0xbe, 0x4e, 0x9a, 0x9d, 0x5a, 0xad, 0x62,
		0xec, 0xd1, 0x3a, 0x66, 0x3c, 0xc0, 0x37, 0x25, 0x96, 0xdc, 0x36, 0x24, 0xf7, 0xee, 0x4b, 0x2a,
		0x41, 0x94, 0xf4, 0xde, 0x91, 0x1f, 0x3a, 0x9f, 0xeb, 0x6f, 0x5a, 0xaf, 0xb5, 0xbb, 0x5a, 0x75,
		0xf1, 0x6f, 0x77, 0xb5, 0xcf, 0xf5, 0x37, 0x57, 0xaf, 0xd5, 0xea, 0x8a, 0x4f, 0xbe, 0x59, 0x35,
		0x47, 0xed, 0x4b, 0xb5, 0x5a, 0x1d, 0xc9, 0xec, 0x9c, 0x1c, 0xdf, 0xd7, 0x1b, 0x9d, 0x6f, 0xb2,
		0x5f, 0x87, 0xff, 0x9d, 0x68, 0x42, 0xae, 0x8b, 0x6b, 0xb5, 0xea, 0xac, 0x02, 0xa4, 0x3f, 0x3f,
		0x37, 0x5f, 0x6b, 0x5f, 0xaa, 0xa9, 0xda, 0x34, 0x26, 0xca, 0xd0, 0x48, 0x27, 0xb9, 0x49, 0x2f,
		0x2f, 0x9d, 0x3a, 0xec, 0x3b, 0xa4, 0x79, 0x20, 0x5b, 0x6b, 0xff, 0x60, 0x2f, 0xfa, 0xe9, 0x00,
		0x46, 0xe2, 0xaf, 0xe6, 0xe2, 0xae, 0x0b, 0xf1, 0xd6, 0xc6, 0x4d, 0xab, 0xd5, 0xbe, 0x6e, 0xb5,
		0xea, 0xd7, 0x97, 0xd7, 0xf5, 0xdb, 0xab, 0xab, 0x46, 0xbb, 0xa1, 0x71, 0x38, 0xd2, 0x5c, 0xe4,
		0x35, 0x48, 0x3c, 0x6f, 0xa7, 0xaf, 0x4b, 0xb3, 0xb9, 0xd5, 0x64, 0x1e, 0x63, 0xc9, 0x7b, 0x4b,
		0x79, 0x68, 0x17, 0xc3, 0x7c, 0x9e, 0x0b, 0x9d, 0x84, 0x05, 0xcb, 0x54, 0x7e, 0xdf, 0xf7, 0xc3,
		0xbb, 0xfb, 0x69, 0x7c, 0x73, 0x9f, 0xde, 0x65, 0x37, 0xf7, 0xe9, 0x63, 0x76, 0x73, 0x65, 0x6e,
		0x32, 0x49, 0x9f, 0x49, 0xcc, 0xe2, 0x58, 0xea, 0xc8, 0xd3, 0xb5, 0x08, 0x3c, 0x37, 0xdb, 0x3e,
		0x9b, 0x4e, 0xd6, 0xd1, 0x6d, 0x72, 0xdf, 0x6e, 0x3b, 0xf2, 0x5e, 0x4e, 0xb1, 0xdb, 0xa4, 0x72,
		0xb5, 0xc9, 0xa2, 0x2e, 0xb5, 0x35, 0xa6, 0xd0, 0xab, 0x3e, 0x31, 0xe7, 0xa1, 0x18, 0xa9, 0x46,
		0x99, 0x4c, 0x66, 0xa8, 0x2a, 0x65, 0x32, 0x9f, 0xe9, 0xba, 0x89, 0xa9, 0x2c, 0x98, 0xaa, 0x9f,
		0x30, 0xe8, 0x72, 0x1a, 0xa9, 0x5a, 0x59, 0x7a, 0x15, 0xed, 0xab, 0xab, 0xcb, 0xab, 0xd3, 0x7b,
		0x1d, 0xc7, 0xde, 0xac, 0xfb, 0x34, 0xda, 0xc6, 0xae, 0x63, 0xd4, 0xfb, 0xea, 0x16, 0xbb, 0x86,
		0x43, 0xa3, 0x4f, 0xac, 0xda, 0xdb, 0xdc, 0x75, 0x89, 0xd3, 0xe2, 0xeb, 0xdb, 0x65, 0x9d, 0x13,
		0xeb, 0xf6, 0x23, 0xe2, 0x0c, 0x1d, 0x07, 0x12, 0x85, 0x9e, 0x6b, 0xbf, 0xc8, 0x57, 0x3a, 0xad,
		0x9a, 0x04, 0xb5, 0x4e, 0xa8, 0x75, 0x32, 0x60, 0x1d, 0xa4, 0x6b, 0x9d, 0xd8, 0x73, 0x14, 0x72,
		0x41, 0x38, 0xfb, 0x1f, 0x66, 0x0b, 0x42, 0x3d, 0x4f, 0xbd, 0xec, 0x69, 0x79, 0xaa, 0x5d, 0xb6,
		0x63, 0x48, 0xdf, 0x1e, 0x3a, 0x32, 0x98, 0xf6, 0xb1, 0x51, 0xa0, 0xb5, 0x3f, 0xfe, 0xa6, 0xdf,
		0x91, 0x41, 0xfd, 0xb0, 0x2e, 0xc5, 0x43, 0xba, 0x8a, 0x39, 0x32, 0xde, 0xf5, 0x8d, 0xd9, 0xa8,
		0xe5, 0xa9, 0x60, 0xa3, 0x60, 0xa3, 0x60, 0xa3, 0x60, 0xa3, 0x8e, 0xdf, 0x71, 0x53, 0x77, 0x3b,
		0x8c, 0xb9, 0x6e, 0xef, 0xbb, 0xfd, 0x68, 0x64, 0x41, 0x7f, 0x19, 0xde, 0xc0, 0x2e, 0x7d, 0xb7,
		0xc7, 0x48, 0xe1, 0x78, 0x8f, 0x6c, 0x14, 0xbc, 0x33, 0x78, 0x67, 0xfb, 0xf0, 0xce, 0xa8, 0x2d,
		0xdc, 0x47, 0x46, 0x78, 0x98, 0x08, 0x16, 0xeb, 0x34, 0xa4, 0x98, 0x9d, 0x66, 0xc7, 0x94, 0xa2,
		0x09, 0x4a, 0x01, 0x4a, 0xb1, 0x53, 0x4a, 0xf1, 0x27, 0xe3, 0x21, 0xe9, 0xd2, 0x98, 0x39, 0xc4,
		0x0e, 0x93, 0x40, 0x30, 0xde, 0x6e, 0x69, 0xf0, 0x0b, 0x85, 0x74, 0xbc, 0x19, 0x37, 0xa1, 0x52,
		0x57, 0xf9, 0xea, 0xbf, 0xd3, 0x78, 0x3a, 0x85, 0xda, 0x5b, 0x47, 0x6b, 0x3c, 0x0b, 0xad, 0xf1,
		0x72, 0x2d, 0xb1, 0xd9, 0x74, 0x32, 0x0b, 0xad, 0xf2, 0xac, 0x22, 0x5b, 0xe5, 0x49, 0x50, 0x37,
		0xea, 0xf8, 0x6e, 0x40, 0x62, 0x41, 0x85, 0x46, 0xa7, 0xdd, 0xd9, 0x49, 0x76, 0x19, 0x2c, 0x19,
		0x1d, 0xe7, 0x8b, 0x78, 0x09, 0xc8, 0x0d, 0xc8, 0x8d, 0x09, 0x75, 0xb4, 0x34, 0x4f, 0xd7, 0x55,
		0x3c, 0x55, 0xf7, 0x14, 0xcf, 0x18, 0x3b, 0xb7, 0xde, 0x5a, 0x67, 0x23, 0x03, 0x76, 0x66, 0x85,
		0xdc, 0xaa, 0xce, 0xc7, 0x6d, 0xdc, 0x20, 0x16, 0x77, 0x8b, 0xe1, 0x9a, 0xfb, 0x15, 0x97, 0x2c,
		0x9c, 0x29, 0x76, 0x31, 0x5b, 0x34, 0xbb, 0xfa, 0xf2, 0xce, 0x8a, 0xbf, 0x8f, 0xce, 0x1e, 0x3b,
		0x5b, 0xfe, 0x64, 0x14, 0x0e, 0x3a, 0xab, 0x95, 0xef, 0x30, 0xb2, 0xf7, 0xff, 0xf9, 0xcb, 0x4f,
		0x96, 0x1b, 0x5b, 0x41, 0x28, 0xac, 0x38, 0x89, 0xa2, 0x90, 0x0b, 0xe6, 0x58, 0x6e, 0x60, 0x8d,
		0xd6, 0xcd, 0x1a, 0xaf, 0x5b, 0x6c, 0x85, 0x62, 0xc0, 0xb8, 0x25, 0x06, 0x34, 0xb0, 0x46, 0x0f,
		0x84, 0xc3, 0xc9, 0x34, 0x26, 0x9d, 0xb5, 0xa6, 0x7a, 0x6f, 0x01, 0x87, 0x95, 0xed, 0x80, 0xe3,
		0x8d, 0x0e, 0x3f, 0x20, 0x59, 0x55, 0x5a, 0xc0, 0x9e, 0x05, 0x19, 0x84, 0x91, 0x4e, 0xb4, 0x68,
		0xdd, 0x8c, 0xbb, 0x64, 0x7f, 0x19, 0xc9, 0x07, 0xf7, 0x03, 0xf7, 0x03, 0xf7, 0xdb, 0xe7, 0x5e,
		0xd9, 0x89, 0x72, 0xb7, 0xcc, 0xfa, 0x54, 0x6b, 0x60, 0x6e, 0x60, 0x6e, 0x60, 0x6e, 0x60, 0x6e,
		0xc5, 0x30, 0xb7, 0x3f, 0x18, 0x8b, 0x08, 0xf5, 0x3c, 0xed, 0xed, 0xbd, 0xc5, 0x89, 0xc0, 0x83,
		0xc0, 0x83, 0xc0, 0x83, 0xc0, 0x83, 0xf4, 0x50, 0xbc, 0xe4, 0xbc, 0x07, 0xb4, 0x07, 0xb4, 0x07,
		0xb4, 0xe7, 0x00, 0x69, 0x0f, 0xa7, 0x91, 0xeb, 0x90, 0x24, 0x72, 0xb4, 0x76, 0x25, 0xe7, 0x66,
		0x41, 0x60, 0x0a, 0x84, 0x0c, 0x84, 0x0c, 0x84, 0x0c, 0x81, 0x29, 0x04, 0xa6, 0xc0, 0xd0, 0xc0,
		0xd0, 0xc0, 0xd0, 0xf4, 0x18, 0x1a, 0xb3, 0x99, 0xfb, 0xc8, 0x1c, 0xed, 0xc0, 0xd4, 0xe2, 0x44,
		0xc8, 0x3c, 0x07, 0x0f, 0x42, 0xe6, 0x79, 0x7e, 0xc9, 0x47, 0xe6, 0xb9, 0xe4, 0x17, 0x23, 0xf3,
		0xbc, 0x08, 0xc5, 0x98, 0x5f, 0x62, 0x64, 0x9e, 0x9f, 0x2a, 0x85, 0x38, 0xb2, 0x72, 0xd8, 0xfc,
		0x85, 0x9d, 0x96, 0xb1, 0xfa, 0xd7, 0xf4, 0x3b, 0x77, 0x59, 0xf2, 0x3a, 0x6c, 0xc9, 0xa2, 0xdc,
		0xa8, 0x68, 0x6e, 0xb8, 0x5c, 0x11, 0x6c, 0x1d, 0x45, 0xb0, 0x28, 0x82, 0x35, 0xc2, 0xb2, 0x34,
		0x0e, 0x34, 0x52, 0x39, 0xb8, 0x68, 0x72, 0x40, 0x51, 0x6a, 0x5b, 0x08, 0x8f, 0x42, 0xef, 0x2e,
		0x75, 0x5f, 0xdc, 0xa0, 0x3f, 0x52, 0x84, 0xe9, 0xdf, 0x17, 0xff, 0x9d, 0xff, 0xe8, 0x22, 0x33,
		0xea, 0xdd, 0xa3, 0xae, 0x97, 0x70, 0x46, 0x1c, 0x26, 0x98, 0x2d, 0x65, 0x4a, 0x27, 0x6b, 0xba,
		0x3c, 0x05, 0x6a, 0xdd, 0xa1, 0xe6, 0x06, 0xd4, 0x5c, 0xbe, 0x13, 0x59, 0x40, 0xbb, 0x1e, 0x23,
		0xdd, 0x9e, 0xa3, 0xd1, 0x82, 0x6c, 0x3a, 0x07, 0xf6, 0x84, 0xb0, 0x27, 0x84, 0x58, 0xc8, 0x1e,
		0x63, 0x21, 0x47, 0xd2, 0x7c, 0xac, 0x47, 0x63, 0x41, 0x52, 0x94, 0x0c, 0x1f, 0x19, 0x57, 0xb7,
		0x4c, 0xf3, 0xd3, 0xa0, 0xe9, 0x18, 0x6c, 0x13, 0x6c, 0x13, 0x6c, 0xd3, 0xf1, 0x47, 0x59, 0x54,
		0xfd, 0x0b, 0x63, 0x21, 0x97, 0x1f, 0x86, 0x37, 0xf0, 0xfd, 0xe4, 0xfb, 0x77, 0xe8, 0x9f, 0xf5,
		0x39, 0xb5, 0x59, 0x2f, 0xf1, 0x08, 0x67, 0xb1, 0xa0, 0x5c, 0xc8, 0xbb, 0x67, 0x4b, 0x33, 0xc0,
		0x3b, 0x83, 0x77, 0xb6, 0x0f, 0xef, 0x0c, 0xad, 0x44, 0xc0, 0x82, 0xc0, 0x82, 0x8e, 0x8b, 0x05,
		0x1d, 0x5e, 0x2b, 0x91, 0x42, 0x3c, 0xbc, 0x58, 0x50, 0x6f, 0xdc, 0x1c, 0x91, 0x08, 0xd7, 0xd7,
		0x30, 0x70, 0xcb, 0x53, 0xed, 0xd2, 0xcc, 0x5d, 0xb6, 0xeb, 0x30, 0x71, 0x30, 0x71, 0x30, 0x71,
		0x06, 0x4e, 0x89, 0xd3, 0x38, 0x1d, 0xee, 0x48, 0xd2, 0x5f, 0x1a, 0x48, 0x7f, 0x59, 0xb5, 0xc4,
		0x26, 0xd3, 0x5f, 0x2e, 0xdb, 0xf5, 0x3a, 0xd2, 0x5d, 0x34, 0x47, 0x21, 0xdd, 0x25, 0x57, 0x20,
		0x46, 0x31, 0x92, 0x60, 0x2c, 0x0e, 0xf3, 0x1f, 0xa3, 0xef, 0xff, 0x75, 0xf4, 0xf5, 0x3b, 0x0d,
		0xc3, 0x84, 0x49, 0xa4, 0x12, 0x7b, 0x49, 0x87, 0x21, 0xe0, 0x82, 0x80, 0x0b, 0x02, 0x2e, 0x92,
		0x20, 0x32, 0xdc, 0x87, 0x87, 0x33, 0x02, 0x67, 0x04, 0xce, 0x08, 0x5a, 0xb7, 0x4a, 0xcd, 0x51,
		0xb6, 0xd6, 0xad, 0x0f, 0x41, 0xb5, 0x5a, 0x0d, 0x42, 0x51, 0x3d, 0x3f, 0xbf, 0x70, 0xa3, 0xc7,
		0x16, 0x49, 0x02, 0xd7, 0xa6, 0xb1, 0xb8, 0x98, 0x79, 0x9b, 0x35, 0x8b, 0x06, 0x8e, 0x35, 0x2c,
		0xa1, 0x5c, 0x77, 0x4d, 0x3a, 0xed, 0xd0, 0x2c, 0x9e, 0x0d, 0xcb, 0x37, 0x73, 0x5e, 0x5b, 0x1b,
		0xdd, 0xc3, 0xf4, 0x16, 0xda, 0x39, 0x6e, 0xa1, 0x2d, 0x71, 0x0b, 0x6d, 0xc9, 0x5b, 0x60, 0x8f,
		0x51, 0xb0, 0xee, 0xab, 0x17, 0x3f, 0x5b, 0xf5, 0x95, 0x9b, 0xae, 0xa9, 0x95, 0xb0, 0x6a, 0xf4,
		0xe7, 0x80, 0x59, 0x61, 0xcf, 0x12, 0x03, 0x66, 0x51, 0xc7, 0xe1, 0x2c, 0x8e, 0xad, 0x1e, 0xf5,
		0x5d, 0xcf, 0x65, 0xb1, 0x95, 0x4a, 0xab, 0xd5, 0x65, 0xd6, 0xf0, 0xfe, 0x9d, 0x73, 0x14, 0x89,
		0x6a, 0x4c, 0x3a, 0x0b, 0x05, 0x52, 0x8b, 0x8e, 0x9a, 0xd0, 0xc2, 0x83, 0xe4, 0x34, 0x26, 0xa9,
		0x13, 0x4a, 0xc2, 0x28, 0xf5, 0x61, 0x75, 0xba, 0xcb, 0x2e, 0x4c, 0xa4, 0xc6, 0xfa, 0x1a, 0x60,
		0x7d, 0x60, 0x7d, 0xbb, 0x60, 0x7d, 0xb2, 0x7e, 0xdb, 0x54, 0x61, 0x3c, 0x2f, 0x7c, 0x22, 0xe1,
		0x53, 0x40, 0x68, 0xac, 0xfe, 0xe6, 0x26, 0x5a, 0x33, 0x3b, 0x9b, 0xe2, 0x9a, 0xab, 0x39, 0x4c,
		0xda, 0x2a, 0x64, 0x42, 0x95, 0x8c, 0xab, 0x94, 0x69, 0xc0, 0x35, 0xa6, 0x62, 0x85, 0x21, 0xac,
		0x49, 0x95, 0xd3, 0x04, 0x40, 0x45, 0xf9, 0x51, 0x76, 0xc0, 0x96, 0xa4, 0x27, 0x71, 0x03, 0x71,
		0xa3, 0x23, 0x35, 0x23, 0x55, 0xd2, 0xa8, 0x55, 0xd5, 0xdc, 0x24, 0xd2, 0x77, 0x78, 0x26, 0x37,
		0x62, 0x62, 0xd3, 0x68, 0x32, 0x99, 0xa1, 0xda, 0xe9, 0xc9, 0x7c, 0xa6, 0xb7, 0x37, 0xa6, 0xa2,
		0x60, 0x6a, 0x9b, 0x43, 0x53, 0xaa, 0xe7, 0x5f, 0x85, 0x81, 0xcd, 0xa5, 0xa5, 0x57, 0xd1, 0xbc,
		0xba, 0x3a, 0xbd, 0x97, 0xb1, 0x27, 0x8f, 0xa0, 0xb3, 0x23, 0x8f, 0x40, 0x41, 0xd8, 0x2a, 0x9c,
		0xf9, 0xe1, 0x23, 0x23, 0x11, 0x77, 0x1f, 0xa9, 0x60, 0x46, 0x58, 0xc9, 0xf2, 0x94, 0x7a, 0xd4,
		0xa4, 0x01, 0x6a, 0x02, 0x6a, 0x72, 0x88, 0xd4, 0x44, 0xd5, 0x4b, 0x98, 0x4c, 0xe0, 0xf6, 0x83,
		0x90, 0x33, 0x12, 0x31, 0xc6, 0x75, 0x34, 0x73, 0x49, 0x18, 0x17, 0xe6, 0xd5, 0x7c, 0x4f, 0x3a,
		0x7b, 0x42, 0x4b, 0x93, 0x29, 0x14, 0x4d, 0x2e, 0x99, 0x5b, 0xcd, 0xe7, 0xd1, 0xf3, 0x88, 0x8c,
		0x99, 0x1f, 0x93, 0x66, 0xa8, 0x30, 0x73, 0x54, 0x44, 0x88, 0xb2, 0x10, 0xf3, 0x54, 0x68, 0x8c,
		0xb2, 0x28, 0x73, 0x65, 0x88, 0xb8, 0x68, 0xca, 0x9f, 0xb6, 0x87, 0xb5, 0x24, 0x7d, 0xea, 0x85,
		0x56, 0x6b, 0x39, 0x42, 0x63, 0xaf, 0x4b, 0x64, 0x60, 0x8b, 0x6b, 0x69, 0x4e, 0xad, 0x2d, 0x2f,
		0xf3, 0x1e, 0xe1, 0xd2, 0x4b, 0x1c, 0xed, 0xfb, 0xf8, 0xa1, 0xc3, 0x66, 0x36, 0xc7, 0x9c, 0xb3,
		0xe1, 0xbe, 0x8f, 0xf5, 0x36, 0xd3, 0xad, 0xaa, 0xd6, 0xd6, 0xcd, 0xd2, 0x77, 0x1b, 0xdd, 0xca,
		0x59, 0xfb, 0x64, 0xd9, 0x23, 0xc5, 0x83, 0x30, 0xf1, 0x9c, 0xac, 0x1d, 0x65, 0x97, 0x59, 0xe3,
		0xa7, 0xb3, 0x44, 0x68, 0xc5, 0x4c, 0x58, 0xf3, 0x08, 0x9a, 0xfe, 0x35, 0x7d, 0xda, 0x73, 0x83,
		0xcf, 0x5a, 0x84, 0x55, 0x5d, 0x67, 0x61, 0x4d, 0x6f, 0x04, 0xed, 0xcc, 0xe8, 0xae, 0x35, 0xc0,
		0x1a, 0xaf, 0xd0, 0xe8, 0x8d, 0xbd, 0x7e, 0x55, 0xae, 0x99, 0xf4, 0x67, 0xe9, 0xec, 0x6b, 0x5b,
		0x4d, 0xc3, 0x67, 0xf2, 0x18, 0x75, 0xdc, 0xa0, 0x4f, 0xc2, 0xc0, 0x7b, 0x31, 0xc7, 0xa2, 0xe7,
		0x66, 0x05, 0x87, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0x06, 0x87, 0xce,
		0x45, 0xc0, 0x66, 0xf1, 0x13, 0x0c, 0xfa, 0x00, 0x19, 0xf4, 0xea, 0x17, 0x08, 0xfe, 0x7c, 0x74,
		0xfc, 0x39, 0x95, 0x05, 0x73, 0xbc, 0x39, 0x9b, 0x0d, 0xfc, 0x12, 0xfc, 0x12, 0xfc, 0xd2, 0x18,
		0x79, 0xfa, 0x48, 0x03, 0x87, 0x8a, 0x90, 0xbf, 0x18, 0x28, 0xd1, 0x35, 0xcf, 0x55, 0x59, 0x90,
		0xf8, 0x8c, 0x53, 0xc9, 0x46, 0x4f, 0x5b, 0xf9, 0x6a, 0xcb, 0xc0, 0x5c, 0x6a, 0x25, 0x10, 0x06,
		0xcd, 0xf2, 0x4e, 0x77, 0x24, 0x0d, 0x72, 0xec, 0x54, 0xe5, 0x63, 0x16, 0xd8, 0xa5, 0xc8, 0x56,
		0x1a, 0x0b, 0xda, 0xd0, 0x9e, 0x27, 0x9c, 0x59, 0xa6, 0x92, 0x10, 0x76, 0x68, 0x40, 0x87, 0xab,
		0x79, 0x48, 0x26, 0x74, 0xd3, 0x72, 0x9f, 0x5a, 0xb6, 0x8e, 0x6a, 0xca, 0xb3, 0x5a, 0x05, 0xf8,
		0xd2, 0x3c, 0x06, 0x2b, 0xc2, 0xc3, 0x24, 0xba, 0x58, 0xc8, 0xc7, 0xbf, 0x30, 0xa9, 0x4e, 0x86,
		0x0a, 0xc7, 0xc3, 0x24, 0xfa, 0xf4, 0x2e, 0xfe, 0x85, 0x8a, 0xc1, 0xcf, 0xc3, 0x9b, 0xfc, 0xf4,
		0x6b, 0x76, 0x93, 0xbf, 0x0c, 0xef, 0xf1, 0x9d, 0xa2, 0x08, 0xee, 0x2a, 0xed, 0x2a, 0xf2, 0xa8,
		0xad, 0x9f, 0xda, 0x31, 0x93, 0x74, 0x35, 0x3f, 0x21, 0xb2, 0xc1, 0x91, 0x72, 0x55, 0x0a, 0x7e,
		0x7c, 0xa8, 0xd9, 0xe0, 0xfa, 0xf1, 0x55, 0xcd, 0xb8, 0xea, 0x6b, 0xc9, 0x6a, 0x5e, 0x34, 0x91,
		0xaa, 0x60, 0x84, 0x52, 0x29, 0xa0, 0x2a, 0x08, 0x87, 0x2a, 0x65, 0x28, 0xcc, 0x4b, 0xc4, 0x80,
		0x05, 0xc2, 0xb5, 0xd5, 0x5e, 0xd8, 0xb4, 0xc2, 0x68, 0x7e, 0x1e, 0x94, 0xe5, 0x15, 0x8e, 0x16,
		0x28, 0xcb, 0x53, 0x37, 0x51, 0xca, 0x65, 0x79, 0x7f, 0xb0, 0x17, 0x7b, 0x40, 0x35, 0x4a, 0x5e,
		0x26, 0xe2, 0x33, 0x99, 0x09, 0x04, 0x0c, 0x04, 0x0c, 0x04, 0x4c, 0x43, 0x7a, 0xe4, 0xcf, 0xf5,
		0x5a, 0x8b, 0x3f, 0xd7, 0x1a, 0x73, 0xfc, 0xb2, 0x4c, 0x58, 0xe2, 0x97, 0x58, 0x30, 0xff, 0x6e,
		0xf8, 0x23, 0x3b, 0xe7, 0x6b, 0xac, 0xf5, 0x77, 0xf3, 0x78, 0x39, 0xff, 0xd9, 0xf8, 0x97, 0xf9,
		0xbf, 0xe6, 0x3f, 0x1d, 0xac, 0x8c, 0x41, 0x40, 0x23, 0x1b, 0xec, 0x06, 0x03, 0x80, 0xe6, 0xde,
		0xd2, 0xfd, 0xd2, 0x5b, 0x9a, 0x3d, 0x1f, 0xbf, 0x33, 0x3f, 0x68, 0x74, 0xee, 0xfd, 0x43, 0x45,
		0xd8, 0x11, 0xf1, 0x9d, 0xab, 0x87, 0x8a, 0x89, 0x70, 0x63, 0x21, 0x3b, 0xf5, 0x33, 0x0d, 0x4c,
		0xbc, 0x17, 0x6b, 0xfc, 0x04, 0x59, 0x57, 0x8d, 0xf4, 0x21, 0x46, 0x0f, 0x60, 0xd9, 0x34, 0xb0,
		0xba, 0xcc, 0xa2, 0x71, 0xec, 0xf6, 0x03, 0xe6, 0x98, 0x0a, 0x4b, 0x16, 0xb0, 0x1d, 0xbf, 0x8b,
		0x6d, 0xf8, 0x42, 0xb7, 0xdf, 0x17, 0x3a, 0x9c, 0xc8, 0xbc, 0x95, 0x92, 0xec, 0x69, 0x1f, 0x7d,
		0x61, 0xe5, 0x49, 0x39, 0xd6, 0x3a, 0x2e, 0x9f, 0x69, 0xbf, 0x7a, 0xfe, 0x5e, 0x4a, 0xe0, 0x58,
		0x3b, 0x2c, 0xb6, 0xb9, 0x1b, 0xe9, 0x79, 0xd5, 0xb3, 0x93, 0xa0, 0xbf, 0x21, 0x5c, 0xea, 0xa3,
		0xee, 0x6f, 0xa8, 0x2e, 0xec, 0x73, 0x1c, 0xfe, 0x46, 0x61, 0xec, 0x07, 0x16, 0xf4, 0x33, 0xab,
		0x88, 0x9e, 0xeb, 0xe8, 0xb9, 0xbe, 0x71, 0x89, 0xb5, 0xdb, 0x61, 0xa0, 0xe5, 0xba, 0x4a, 0xcd,
		0x48, 0xea, 0x5d, 0x0b, 0xc6, 0x03, 0x65, 0x15, 0xad, 0xdc, 0xbf, 0x23, 0xff, 0xa4, 0xe4, 0xcf,
		0x3a, 0xb9, 0xb5, 0xfe, 0xf2, 0xef, 0xff, 0xf2, 0xaf, 0x7f, 0xfd, 0xaf, 0x87, 0xa4, 0x5e, 0x6f,
		0xb6, 0xab, 0xb5, 0x2f, 0x5f, 0xbf, 0xfd, 0xef, 0xff, 0x3b, 0x7f, 0x73, 0x76, 0xf1, 0xe9, 0xee,
		0xdf, 0xbe, 0x21, 0x9d, 0xbf, 0x55, 0x0e, 0xb2, 0xc1, 0x1e, 0x7b, 0x8c, 0x34, 0x78, 0x46, 0x36,
		0x1a, 0x31, 0x7b, 0x10, 0x8c, 0xa3, 0x6c, 0xa5, 0xa7, 0xd1, 0x0a, 0x7d, 0x49, 0x82, 0xf4, 0x9a,
		0x30, 0x5b, 0x88, 0xdc, 0x17, 0x1b, 0xef, 0x41, 0xe4, 0xbe, 0xf8, 0xb0, 0xb0, 0xb9, 0xc8, 0xbd,
		0xbe, 0x32, 0x59, 0x86, 0xd2, 0x7c, 0x35, 0xd3, 0x7b, 0x11, 0x61, 0x5f, 0x7e, 0xb9, 0x8b, 0x9d,
		0xd0, 0xad, 0xea, 0x7c, 0xc4, 0xc9, 0x0d, 0x62, 0x71, 0xb7, 0x18, 0x68, 0xba, 0x5f, 0x71, 0xc9,
		0x42, 0x44, 0xfd, 0x62, 0xd8, 0x2a, 0x7c, 0xf2, 0x7f, 0xab, 0x47, 0x74, 0x56, 0xfc, 0x7d, 0x14,
		0x7c, 0x3f, 0x5b, 0xfe, 0xc4, 0x19, 0x56, 0x55, 0x9f, 0xd5, 0xca, 0x1f, 0x8d, 0x7f, 0xff, 0x9f,
		0xbf, 0xfc, 0x64, 0xb9, 0x71, 0x56, 0x6a, 0x15, 0x27, 0x51, 0x14, 0x72, 0xc1, 0x1c, 0xcb, 0x0d,
		0xac, 0xd1, 0x52, 0x5a, 0xe3, 0xa5, 0x8c, 0xad, 0x50, 0x0c, 0x18, 0xb7, 0xc4, 0x80, 0x06, 0xd6,
		0xe8, 0x01, 0x11, 0x9d, 0xdf, 0x51, 0x74, 0x5e, 0xef, 0x2d, 0x21, 0x5a, 0xbf, 0x93, 0xef, 0x53,
		0xc9, 0xc7, 0xa5, 0xce, 0x23, 0xe3, 0xc2, 0x8d, 0x19, 0xc9, 0x8e, 0x3e, 0x08, 0xd8, 0xb3, 0x20,
		0x83, 0x30, 0x32, 0xd1, 0xa3, 0x79, 0xdd, 0xcc, 0xa0, 0x99, 0xa0, 0x99, 0xa0, 0x99, 0x1a, 0xd2,
		0xb3, 0xff, 0x0c, 0x5d, 0xd0, 0xc3, 0xa5, 0x97, 0x52, 0x7e, 0x32, 0x08, 0x2e, 0x08, 0x2e, 0x08,
		0x2e, 0x08, 0x2e, 0xb8, 0xf6, 0x25, 0x0f, 0x91, 0x9f, 0x78, 0xae, 0xef, 0x0a, 0x7d, 0xfe, 0x37,
		0x37, 0x1b, 0x1a, 0x61, 0x83, 0xf3, 0x9d, 0x20, 0xe7, 0xd3, 0x6e, 0x84, 0xed, 0xd3, 0x67, 0xc2,
		0x99, 0xcd, 0xdc, 0x47, 0xe6, 0x10, 0x1e, 0x26, 0x82, 0x19, 0xec, 0x86, 0xbd, 0x6a, 0xf2, 0x32,
		0xb5, 0xf3, 0x6b, 0x35, 0x6f, 0x5b, 0xb7, 0xed, 0xeb, 0xe6, 0xed, 0x15, 0x7a, 0xfa, 0x19, 0xb6,
		0x4a, 0x85, 0x59, 0xa7, 0xa2, 0x68, 0x14, 0x7a, 0xae, 0x18, 0x64, 0x2f, 0xa5, 0xeb, 0x93, 0x92,
		0xb8, 0x81, 0xb8, 0x6c, 0x1a, 0x6c, 0x91, 0x72, 0x6d, 0x60, 0x2a, 0x33, 0x47, 0x12, 0x99, 0x73,
		0x35, 0x27, 0x37, 0x66, 0xf2, 0x88, 0xa2, 0xc9, 0xa4, 0x86, 0x72, 0xae, 0x96, 0xe6, 0x2d, 0xea,
		0x94, 0x9c, 0xa9, 0x0c, 0x99, 0x3e, 0x2d, 0xc7, 0x90, 0x9a, 0xcc, 0xbf, 0x32, 0x83, 0x47, 0x19,
		0x2d, 0xbd, 0xb2, 0x29, 0x4e, 0xe2, 0xdd, 0x19, 0x73, 0x10, 0xad, 0x32, 0x34, 0xbd, 0x43, 0x67,
		0x51, 0x69, 0x28, 0x39, 0xb7, 0xde, 0xce, 0x28, 0x44, 0x81, 0xfb, 0xb4, 0x25, 0xdc, 0xaa, 0x2d,
		0x36, 0x4c, 0x57, 0xca, 0x70, 0x5d, 0x91, 0x61, 0xbb, 0x5d, 0x86, 0xef, 0x76, 0x12, 0xc6, 0x2b,
		0x6b, 0x38, 0xcf, 0xac, 0xd5, 0xb6, 0xd0, 0xf4, 0x54, 0x2b, 0xbf, 0xfc, 0x89, 0xf2, 0xc0, 0x0d,
		0xfa, 0x44, 0x0c, 0x38, 0x8b, 0x07, 0xa1, 0xe7, 0x90, 0xc8, 0x16, 0xe6, 0xa2, 0x0e, 0xab, 0xa7,
		0x2f, 0x53, 0xdc, 0xe1, 0xb6, 0x8e, 0x78, 0x03, 0xe2, 0x0d, 0x88, 0x37, 0x1c, 0x6f, 0xbc, 0x21,
		0x62, 0xdc, 0x66, 0x81, 0x30, 0x03, 0xe1, 0x06, 0x8e, 0x3f, 0x3e, 0xf1, 0x98, 0x43, 0x1d, 0x7e,
		0xeb, 0xa1, 0xc5, 0x1c, 0x1a, 0x75, 0xbc, 0x34, 0x04, 0x1b, 0x10, 0x6c, 0x78, 0x6b, 0xdd, 0xd6,
		0x11, 0x64, 0x40, 0x90, 0x01, 0x41, 0x06, 0x04, 0x19, 0x4e, 0x2e, 0xc8, 0x80, 0x86, 0xe1, 0xd1,
		0x05, 0x7b, 0x8c, 0x82, 0x0b, 0x03, 0xb9, 0x4e, 0x96, 0xd9, 0x06, 0x32, 0xef, 0x1f, 0xa3, 0xe0,
		0xd3, 0xd0, 0x71, 0xff, 0x90, 0xdd, 0x15, 0x3a, 0x06, 0x15, 0xf3, 0xee, 0xf7, 0xdb, 0x27, 0x28,
		0x7d, 0xcd, 0x65, 0xe8, 0x0e, 0xc4, 0x9e, 0x53, 0x93, 0x4e, 0xa2, 0xd0, 0x73, 0xed, 0x17, 0x8d,
		0xba, 0xfd, 0xb9, 0x69, 0xd0, 0x21, 0xa8, 0x70, 0x46, 0x82, 0x02, 0x7e, 0x75, 0x63, 0xa4, 0xdf,
		0x21, 0x48, 0xbd, 0xd3, 0xa7, 0x4e, 0x87, 0xcf, 0xb9, 0xce, 0x9e, 0x84, 0x47, 0xa1, 0x77, 0xc7,
		0xc3, 0x44, 0xb8, 0x41, 0x7f, 0xa4, 0x78, 0xd3, 0xbf, 0x2f, 0xfe, 0x5b, 0xbe, 0x67, 0x67, 0x31,
		0xe6, 0xa6, 0x47, 0x5d, 0x2f, 0xe1, 0x8c, 0x38, 0x4c, 0x30, 0x5b, 0xaf, 0x25, 0xd9, 0xf2, 0x54,
		0xe8, 0x1b, 0x02, 0xb3, 0x73, 0x8c, 0x7d, 0x43, 0x58, 0x40, 0xbb, 0x1e, 0x23, 0xdd, 0x9e, 0xa3,
		0x9f, 0xdc, 0x3f, 0x33, 0x17, 0xca, 0x39, 0x91, 0xda, 0xbf, 0x57, 0x75, 0xdb, 0x8f, 0x3b, 0x7a,
		0xda, 0x07, 0xae, 0x28, 0x40, 0x46, 0x8f, 0xc6, 0x82, 0xa4, 0x68, 0x1b, 0x3e, 0x32, 0xae, 0x6f,
		0x81, 0xe6, 0xa7, 0x83, 0x11, 0x82, 0x11, 0x82, 0x11, 0x3a, 0x31, 0x23, 0x74, 0x4a, 0xa1, 0x26,
		0x5d, 0x37, 0xc5, 0x70, 0xdc, 0xe9, 0x87, 0xe1, 0xed, 0x7c, 0x3f, 0xb9, 0x9b, 0x12, 0x38, 0x85,
		0x7d, 0x4e, 0x6d, 0xd6, 0x4b, 0x3c, 0xc2, 0x59, 0x2c, 0x28, 0x17, 0xea, 0x3e, 0xe1, 0xd2, 0x4c,
		0x70, 0x09, 0xe1, 0x12, 0xa2, 0x95, 0xe4, 0x16, 0x09, 0x42, 0x2b, 0x49, 0xf0, 0x31, 0xf0, 0x31,
		0xb4, 0x92, 0xdc, 0x87, 0x73, 0x19, 0x0b, 0xea, 0xb1, 0x51, 0x0d, 0x3b, 0x11, 0xae, 0x6f, 0xc0,
		0x9c, 0x2d, 0x4f, 0x09, 0xa3, 0x06, 0xa3, 0x06, 0xa3, 0xa6, 0x21, 0x3d, 0x89, 0x1b, 0x88, 0x46,
		0xdb, 0x80, 0x3d, 0x6b, 0x6b, 0x4c, 0x61, 0x26, 0xc5, 0xda, 0x40, 0x72, 0xa3, 0xc9, 0x94, 0x6a,
		0xd3, 0xe5, 0xdb, 0x85, 0x65, 0xe3, 0x9a, 0xcf, 0xc2, 0x35, 0x90, 0x32, 0x6d, 0x34, 0x55, 0x7a,
		0xf2, 0x2a, 0x2e, 0xdb, 0xa6, 0x72, 0xa4, 0x0f, 0xe9, 0x6d, 0xe0, 0x44, 0xb4, 0xe3, 0x09, 0x3a,
		0x69, 0xc6, 0x41, 0x0c, 0xc7, 0x9c, 0xfe, 0x63, 0x74, 0x37, 0xbf, 0x8e, 0x6e, 0xa6, 0x14, 0x21,
		0xa7, 0x30, 0x89, 0xc8, 0xe8, 0xe1, 0x94, 0x83, 0x4d, 0x93, 0x39, 0x90, 0xf0, 0x84, 0x30, 0xd3,
		0x51, 0x27, 0x3c, 0x29, 0x48, 0xb9, 0x85, 0xb3, 0xd0, 0x70, 0x16, 0x5a, 0xa1, 0xc4, 0x6d, 0xb2,
		0xc4, 0xed, 0x16, 0x8e, 0x42, 0xd3, 0x1c, 0x85, 0xa3, 0xd0, 0xcc, 0x93, 0x0c, 0xd7, 0x37, 0x92,
		0x5b, 0x3d, 0x3f, 0x0d, 0xa8, 0x06, 0xa8, 0x06, 0x72, 0xab, 0x37, 0xb3, 0x8d, 0xd3, 0xcc, 0xad,
		0x76, 0xa3, 0xc7, 0x16, 0x49, 0x02, 0xd7, 0xa6, 0xb1, 0xc6, 0x16, 0xfa, 0xdc, 0x2c, 0xd8, 0x3e,
		0x87, 0xb1, 0xc1, 0xf6, 0xf9, 0x16, 0x09, 0xc2, 0xf6, 0xb9, 0x85, 0x9d, 0x26, 0xad, 0x09, 0xb1,
		0xd3, 0x84, 0xed, 0x73, 0x9c, 0x02, 0x06, 0x13, 0x07, 0x13, 0x77, 0x0a, 0x26, 0xee, 0x44, 0xca,
		0x46, 0x70, 0x28, 0x0d, 0x4c, 0x10, 0x4c, 0x90, 0x49, 0x13, 0x84, 0x43, 0x69, 0x74, 0x26, 0xc3,
		0xa1, 0x34, 0x85, 0x59, 0xa5, 0xc2, 0xac, 0x93, 0x69, 0x2b, 0x55, 0x98, 0xb5, 0x2a, 0xcc, 0x6a,
		0x15, 0x69, 0xbd, 0xf4, 0xac, 0x98, 0xa6, 0x35, 0x33, 0x47, 0xac, 0x96, 0xa4, 0x0f, 0x87, 0xd2,
		0xc8, 0xdc, 0x18, 0x0e, 0xa5, 0x99, 0x93, 0x21, 0x1c, 0x4a, 0x83, 0x43, 0x69, 0xcc, 0x1a, 0x48,
		0x73, 0xb3, 0xe0, 0x50, 0x82, 0x25, 0x5b, 0x8f, 0x43, 0x09, 0xc0, 0x37, 0xc1, 0x37, 0xc1, 0x37,
		0xf7, 0xc9, 0x37, 0x71, 0x28, 0x41, 0xa9, 0x38, 0x27, 0xfa, 0xdb, 0x1f, 0x1c, 0xe7, 0xc4, 0xa1,
		0x04, 0x20, 0x9b, 0x7a, 0x23, 0x8f, 0xac, 0x39, 0xf5, 0x6c, 0x16, 0x56, 0x09, 0x9b, 0x54, 0xff,
		0x18, 0x3d, 0xb6, 0xfe, 0xdf, 0xf0, 0xee, 0xf6, 0xd2, 0xab, 0x5a, 0x61, 0x3b, 0x6a, 0x14, 0x9a,
		0x36, 0xbe, 0x4f, 0xbe, 0x66, 0x5e, 0xec, 0x92, 0x63, 0x8b, 0xaa, 0x14, 0xa4, 0x1b, 0xbb, 0xe4,
		0xe8, 0x6b, 0x56, 0x34, 0x42, 0xed, 0xb7, 0xbc, 0x74, 0x06, 0x8c, 0x4a, 0x92, 0x86, 0xdd, 0x36,
		0x92, 0x86, 0xdd, 0x46, 0x1a, 0xf6, 0xee, 0x40, 0x02, 0x69, 0xd8, 0xea, 0x96, 0x09, 0x69, 0xd8,
		0x60, 0x5f, 0x60, 0x5f, 0x47, 0xc5, 0xbe, 0x90, 0x86, 0x2d, 0x75, 0x8f, 0xc8, 0x75, 0x84, 0x29,
		0x83, 0x29, 0x33, 0x69, 0xca, 0x90, 0xeb, 0xa8, 0x33, 0x19, 0x72, 0x1d, 0x0b, 0xb3, 0x4a, 0x85,
		0x59, 0x27, 0xd3, 0x56, 0xaa, 0x30, 0x6b, 0x55, 0x98, 0xd5, 0x2a, 0xd2, 0x7a, 0xe9, 0x59, 0x31,
		0x4d, 0x6b, 0x66, 0x8e, 0xa0, 0x2d, 0x49, 0x1f, 0x72, 0x1d, 0x65, 0x6e, 0x0c, 0xb9, 0x8e, 0x73,
		0x32, 0x84, 0x5c, 0x47, 0xe4, 0x3a, 0x9a, 0x35, 0x90, 0xe6, 0x66, 0x41, 0xae, 0xe3, 0x92, 0xad,
		0x47, 0xae, 0x23, 0xf8, 0x26, 0xf8, 0x26, 0xf8, 0xe6, 0x3e, 0xf9, 0x26, 0x72, 0x1d, 0x4b, 0xc5,
		0x39, 0x91, 0x36, 0x77, 0x70, 0x9c, 0x13, 0xb9, 0x8e, 0x20, 0x9b, 0x7a, 0x23, 0x8f, 0x2f, 0xd7,
		0xb1, 0x5d, 0xee, 0x5c, 0xc7, 0xf6, 0x3e, 0x73, 0x1d, 0x4f, 0x2c, 0xa9, 0xa8, 0x5d, 0x9a, 0xa4,
		0xa2, 0x76, 0x89, 0x92, 0x8a, 0xbc, 0xd0, 0xa6, 0x1e, 0xa1, 0xb1, 0x7a, 0x42, 0xd1, 0x64, 0x06,
		0x24, 0x13, 0x15, 0xee, 0x12, 0x21, 0x99, 0x48, 0xdd, 0x22, 0xa9, 0x27, 0x13, 0xc5, 0x24, 0x48,
		0xfc, 0xae, 0x89, 0x23, 0xaa, 0xa7, 0x53, 0x21, 0x91, 0x08, 0xbb, 0xef, 0xa5, 0x88, 0x27, 0x1c,
		0x6c, 0x22, 0x51, 0x22, 0xc2, 0x20, 0xf4, 0xc3, 0x24, 0x26, 0xf1, 0x4b, 0x2c, 0x98, 0xaf, 0xa7,
		0x59, 0x96, 0x99, 0x9d, 0x2a, 0x9c, 0x25, 0xb6, 0x57, 0xc7, 0xf2, 0x84, 0xce, 0x12, 0x33, 0xbd,
		0xc3, 0x84, 0x13, 0xc5, 0x0a, 0x72, 0xe6, 0x77, 0x96, 0x28, 0x18, 0xb1, 0xc0, 0x21, 0x7d, 0x2f,
		0xec, 0xaa, 0x11, 0xfa, 0xe5, 0x88, 0xec, 0xd2, 0x94, 0xaa, 0x29, 0x57, 0x06, 0x76, 0x82, 0x2a,
		0x29, 0x7a, 0xaa, 0xa1, 0x5c, 0x07, 0x5c, 0x0b, 0x5c, 0x0b, 0x5c, 0x4b, 0x43, 0x7a, 0x4e, 0xa7,
		0xb1, 0x6c, 0x66, 0xf0, 0x94, 0x63, 0x22, 0x6b, 0x4d, 0xa8, 0x62, 0x8c, 0x04, 0x16, 0x14, 0x16,
		0x14, 0x16, 0x14, 0x16, 0xd4, 0x3a, 0xbe, 0xa2, 0xe3, 0x7f, 0xb0, 0x17, 0x9d, 0x80, 0x58, 0xe5,
		0x83, 0x1b, 0x8b, 0x77, 0x42, 0x28, 0x86, 0xf4, 0x3e, 0xba, 0xc1, 0x7b, 0x8f, 0xa5, 0xb2, 0xa9,
		0xe8, 0xe8, 0xa4, 0x3e, 0xdd, 0xcc, 0x0c, 0x0a, 0x7e, 0x71, 0xe5, 0x67, 0xee, 0x30, 0xce, 0x9c,
		0x6f, 0xd3, 0x75, 0x08, 0x12, 0xcf, 0x3b, 0xa5, 0xed, 0x18, 0x0d, 0x3c, 0x34, 0xb8, 0x15, 0xf3,
		0x21, 0xbd, 0x8b, 0x77, 0x71, 0x79, 0xb6, 0x61, 0x52, 0x3b, 0xce, 0x38, 0x0b, 0x6c, 0xa6, 0xbb,
		0x1d, 0x33, 0x33, 0x13, 0xce, 0xf5, 0x2b, 0x1c, 0x93, 0xb1, 0x2d, 0xa3, 0x6e, 0x99, 0xf4, 0xcf,
		0xf5, 0x53, 0xae, 0x54, 0xd0, 0x88, 0xf7, 0x6a, 0xc6, 0x79, 0xcb, 0x72, 0x84, 0x70, 0x1d, 0x47,
		0x08, 0x17, 0x14, 0xaf, 0x35, 0x1e, 0xa7, 0xc5, 0x51, 0xc2, 0xa5, 0x38, 0x7a, 0xd7, 0xa7, 0x6e,
		0x20, 0x58, 0x90, 0x72, 0x0a, 0x92, 0x71, 0x19, 0x75, 0xa4, 0x5e, 0x9e, 0x6a, 0xc7, 0x50, 0xdd,
		0x04, 0x54, 0x03, 0xaa, 0x77, 0x0a, 0xd5, 0xb1, 0xe0, 0x6e, 0xd0, 0xd7, 0x3a, 0xef, 0xbf, 0x04,
		0x36, 0x60, 0xdc, 0x8c, 0x8f, 0xc4, 0xcc, 0xeb, 0xa9, 0xeb, 0xff, 0xfc, 0x34, 0xb2, 0xd9, 0x2c,
		0x1a, 0x11, 0xc1, 0x4a, 0x66, 0xee, 0xe5, 0xa4, 0xab, 0x03, 0x37, 0x02, 0xb6, 0xe9, 0xa8, 0x6d,
		0x93, 0x7a, 0x88, 0x4e, 0x31, 0x34, 0x57, 0x8c, 0x71, 0x8a, 0x18, 0xe3, 0x5a, 0xf9, 0x9c, 0xe3,
		0x09, 0xa0, 0xf0, 0x50, 0xf8, 0xa3, 0x56, 0x78, 0x83, 0x19, 0x64, 0x88, 0x24, 0x34, 0x10, 0x49,
		0x40, 0x24, 0xe1, 0x58, 0x23, 0x09, 0x92, 0xa6, 0xe9, 0xfd, 0x73, 0xb6, 0xaa, 0xf2, 0x0a, 0xad,
		0x8f, 0x22, 0x53, 0x93, 0xcd, 0x9e, 0xc5, 0x5d, 0x3c, 0x08, 0x9f, 0x88, 0xeb, 0x47, 0x21, 0xcf,
		0x36, 0x41, 0x4a, 0x05, 0x2e, 0x03, 0xb7, 0x3f, 0x28, 0x1a, 0x53, 0x3a, 0x85, 0x30, 0xac, 0xac,
		0x2d, 0x17, 0xe1, 0xac, 0xe7, 0x31, 0x5b, 0x84, 0x5c, 0x9d, 0x69, 0x2d, 0x4e, 0x84, 0x02, 0x1a,
		0x30, 0xae, 0x63, 0x2c, 0xa0, 0xb1, 0x3d, 0x77, 0xf8, 0x7c, 0x9a, 0xd9, 0x54, 0xa3, 0x79, 0x90,
		0x8c, 0x84, 0x64, 0xa4, 0xbd, 0xaa, 0x99, 0x26, 0x5b, 0x41, 0x32, 0xd2, 0x6e, 0xd2, 0x39, 0x6d,
		0x2f, 0x89, 0x05, 0xe3, 0xc4, 0x75, 0x4c, 0x98, 0x9e, 0xc9, 0x5c, 0x30, 0x3f, 0x30, 0x3f, 0x30,
		0x3f, 0x1a, 0xd2, 0xe3, 0x84, 0x42, 0x30, 0x87, 0xfc, 0x6f, 0x42, 0x1d, 0x13, 0x26, 0xe8, 0x46,
		0x63, 0x8e, 0x5f, 0xa8, 0x10, 0x8c, 0x07, 0xda, 0xf5, 0x7a, 0x95, 0x6a, 0xf5, 0xbe, 0x4e, 0x6e,
		0x3b, 0x5f, 0xee, 0x1b, 0xe4, 0xb6, 0x33, 0xfc, 0xb5, 0x91, 0xfd, 0x18, 0xfe, 0xde, 0xbc, 0xaf,
		0x93, 0xd6, 0xf8, 0xf7, 0xab, 0xfb, 0x3a, 0xb9, 0xea, 0xd4, 0x1e, 0x1e, 0xce, 0x6b, 0x9f, 0x2f,
		0x5f, 0xe5, 0x07, 0x56, 0xca, 0x5f, 0xc0, 0x74, 0x4a, 0xb9, 0x8c, 0x7a, 0x5e, 0x9c, 0x65, 0x36,
		0xa5, 0xf1, 0xd7, 0xf4, 0x66, 0x7e, 0x9d, 0xdc, 0x4b, 0x09, 0xf6, 0x23, 0x62, 0x16, 0x38, 0xc4,
		0x0e, 0x7d, 0x3f, 0x09, 0x5c, 0xf1, 0xa2, 0xee, 0x2c, 0x2f, 0xcc, 0x03, 0x5f, 0x19, 0xbe, 0xf2,
		0x31, 0xfa, 0xca, 0x1e, 0xe5, 0x7d, 0x03, 0x67, 0xd6, 0x0c, 0xa7, 0x01, 0x55, 0x05, 0x55, 0x05,
		0x55, 0x85, 0xa7, 0xbc, 0x9d, 0x7f, 0xd0, 0xc0, 0xa1, 0xdc, 0x80, 0x9f, 0x3c, 0x99, 0x09, 0xa6,
		0x07, 0xa6, 0x07, 0xa6, 0xe7, 0xc4, 0x4c, 0xcf, 0x29, 0xb9, 0x7d, 0x5a, 0xfe, 0x88, 0x61, 0xaf,
		0xef, 0x37, 0x16, 0x38, 0xdf, 0x4d, 0x6e, 0xa5, 0x2c, 0x4e, 0x9f, 0x33, 0x4c, 0x51, 0x1d, 0x1e,
		0x63, 0xa4, 0xe9, 0xf8, 0xcd, 0xcf, 0x05, 0xe7, 0x0f, 0xce, 0xdf, 0x31, 0x3a, 0x7f, 0xec, 0x39,
		0x0a, 0xb9, 0x20, 0x51, 0xe8, 0xb9, 0xf6, 0x8b, 0x3e, 0x19, 0x9b, 0x9f, 0x0e, 0x8c, 0x0c, 0x8c,
		0x0c, 0x8c, 0x4c, 0x27, 0xa6, 0xc2, 0x68, 0x8f, 0xb3, 0x9e, 0x09, 0x46, 0x76, 0xad, 0xb7, 0x67,
		0x31, 0x61, 0x30, 0x84, 0x47, 0xa1, 0x77, 0x97, 0x82, 0xa2, 0x1b, 0xf4, 0x47, 0x8a, 0x3e, 0xfd,
		0xfb, 0xe2, 0xbf, 0x33, 0xaa, 0x51, 0x62, 0x37, 0x74, 0xee, 0xe4, 0x77, 0x6d, 0xeb, 0xa7, 0x79,
		0x8e, 0xbc, 0x65, 0xac, 0xef, 0x8e, 0x42, 0xb5, 0xcd, 0xf8, 0x7f, 0x68, 0xbc, 0x03, 0xa3, 0x0d,
		0xa3, 0x8d, 0x08, 0x5e, 0x1e, 0xd3, 0xd9, 0x36, 0x6a, 0x3a, 0xdb, 0x30, 0x9d, 0x30, 0x9d, 0x30,
		0x9d, 0x30, 0x9d, 0x88, 0x40, 0x96, 0x3a, 0x02, 0xa9, 0x13, 0x18, 0x2b, 0x20, 0x0a, 0x39, 0xb2,
		0xfa, 0x59, 0x1a, 0x4a, 0x29, 0x02, 0x91, 0xe9, 0xfb, 0x8a, 0x85, 0x6b, 0x6b, 0x14, 0xc4, 0xce,
		0xcc, 0xb1, 0xe3, 0xc0, 0x23, 0x1a, 0x74, 0x20, 0xf0, 0xb8, 0x93, 0xc0, 0xa3, 0xe3, 0xc6, 0xb4,
		0xeb, 0x31, 0x87, 0x44, 0x8c, 0x71, 0x03, 0x7d, 0x6f, 0x17, 0xe6, 0x03, 0x15, 0x03, 0x15, 0x03,
		0x15, 0xd3, 0x90, 0x9e, 0xc4, 0x0d, 0x44, 0xa3, 0x6d, 0x80, 0x89, 0xb5, 0x71, 0xb4, 0xc9, 0xc2,
		0x64, 0x86, 0x0f, 0x3c, 0xc5, 0xd1, 0x26, 0xfa, 0xaf, 0xa2, 0x7d, 0x75, 0x75, 0x89, 0x53, 0x4d,
		0x76, 0x35, 0xba, 0xcc, 0xa7, 0x9a, 0x38, 0x2f, 0x01, 0xf5, 0x5d, 0xdb, 0x18, 0x2d, 0x99, 0x9b,
		0x0e, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac,
		0x24, 0xf7, 0x22, 0x47, 0x54, 0x0c, 0x88, 0xcf, 0xfc, 0x90, 0x1b, 0x48, 0xd2, 0x9a, 0x9d, 0x0c,
		0x8c, 0x04, 0x8c, 0x04, 0x8c, 0x44, 0x43, 0x7a, 0xfe, 0x64, 0x3c, 0x24, 0x5d, 0x1a, 0x33, 0x87,
		0xd8, 0x61, 0x12, 0x08, 0xc6, 0xdb, 0x2d, 0x03, 0xfc, 0x44, 0xa7, 0xc4, 0x7c, 0xba, 0x0f, 0x5e,
		0xa9, 0xeb, 0xdc, 0xca, 0xdf, 0x69, 0x3c, 0x9d, 0x4a, 0x4f, 0x6a, 0xc0, 0x99, 0xc0, 0x99, 0x76,
		0xc3, 0x99, 0x1a, 0x37, 0xad, 0x56, 0xfb, 0xba, 0xd5, 0xaa, 0x5f, 0x5f, 0x5e, 0xd7, 0x6f, 0xaf,
		0xae, 0x1a, 0xed, 0x06, 0x28, 0x14, 0x28, 0x94, 0x55, 0x11, 0xa1, 0xa0, 0x1e, 0x49, 0xdf, 0xe0,
		0x23, 0x1b, 0xee, 0x5d, 0x1b, 0x08, 0xef, 0xac, 0x9a, 0x14, 0x94, 0x0a, 0x94, 0x0a, 0x94, 0x0a,
		0x94, 0x0a, 0x94, 0x0a, 0x94, 0x0a, 0x94, 0x0a, 0x94, 0xea, 0xd8, 0x29, 0x55, 0x44, 0xc5, 0xc0,
		0x18, 0x95, 0x1a, 0x4e, 0x06, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x0a,
		0x05, 0x0a, 0x05, 0x0a, 0x75, 0xf4, 0x14, 0xca, 0x4c, 0xb2, 0xd1, 0xec, 0x64, 0xa0, 0x50, 0xa0,
		0x50, 0xa0, 0x50, 0x1a, 0xd2, 0x83, 0x54, 0x23, 0x10, 0x14, 0xa4, 0x1a, 0x81, 0x91, 0x9c, 0x28,
		0x23, 0xc9, 0xf0, 0xc9, 0xdc, 0x16, 0xd9, 0x64, 0xbe, 0x3d, 0xf3, 0x92, 0x26, 0x78, 0x09, 0x78,
		0xc9, 0xc1, 0xf3, 0x92, 0xbd, 0x07, 0x73, 0xc0, 0x4b, 0xc0, 0x4b, 0x10, 0x38, 0x01, 0x4d, 0xd9,
		0x37, 0x4d, 0xe1, 0xcc, 0x66, 0xee, 0x23, 0x73, 0x0c, 0x27, 0xf4, 0x2c, 0x4e, 0x8b, 0x60, 0x0a,
		0x48, 0x0b, 0x48, 0x8b, 0x86, 0xf4, 0x60, 0x3f, 0x0a, 0xb4, 0x0a, 0xb4, 0x0a, 0xb4, 0x0a, 0xb4,
		0xaa, 0xe4, 0xb4, 0x2a, 0x89, 0x4c, 0x6d, 0x46, 0x4d, 0x66, 0x02, 0x79, 0x02, 0x79, 0x02, 0x79,
		0xd2, 0x8c, 0xf8, 0x60, 0x27, 0x0a, 0xd4, 0x04, 0x3b, 0x51, 0xe0, 0x22, 0x07, 0xcb, 0x45, 0x4e,
		0xaa, 0x4d, 0xaa, 0x6a, 0xfb, 0x4e, 0xcb, 0x70, 0x7b, 0xd4, 0xe9, 0x7d, 0x94, 0xa0, 0x31, 0xaa,
		0x70, 0x7d, 0x15, 0x62, 0x39, 0x0d, 0xcd, 0x0d, 0xc7, 0xe3, 0x24, 0xa6, 0xc2, 0x69, 0x22, 0x1a,
		0xa2, 0xaa, 0x9b, 0x22, 0xe5, 0x86, 0xa8, 0x76, 0x18, 0x04, 0xcc, 0x16, 0x84, 0x33, 0x61, 0xa2,
		0xc9, 0xc7, 0xfc, 0x74, 0xfb, 0xec, 0xa8, 0xdf, 0x68, 0xd6, 0xd1, 0x4f, 0x1f, 0x9e, 0x23, 0x3c,
		0x47, 0x78, 0x8e, 0x47, 0xe8, 0x39, 0x36, 0xe0, 0x39, 0xc2, 0x73, 0x84, 0xe7, 0x58, 0xa0, 0xe7,
		0xa8, 0xc0, 0x7f, 0x07, 0xa1, 0xe7, 0x90, 0xd4, 0x5f, 0xd0, 0xe7, 0x51, 0xd3, 0xa9, 0xf6, 0xc9,
		0xa1, 0x6e, 0x41, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x8e, 0x91, 0x42, 0x21, 0xf8, 0x5e,
		0x1a, 0x0a, 0x55, 0x07, 0x7d, 0xda, 0xe5, 0x8b, 0x2c, 0xab, 0x46, 0x5e, 0x42, 0x23, 0xe1, 0xd4,
		0xc0, 0xa9, 0x29, 0x97, 0x53, 0xf3, 0x07, 0x63, 0x11, 0xf5, 0xdc, 0x47, 0x46, 0xdc, 0x40, 0x30,
		0xfe, 0x48, 0x3d, 0x7d, 0xef, 0x66, 0xc5, 0x9c, 0xf0, 0x18, 0xe0, 0x31, 0xc0, 0x63, 0x80, 0xc7,
		0x00, 0x8f, 0x01, 0xfc, 0x24, 0xc7, 0xab, 0x68, 0x36, 0x6e, 0x5a, 0xe0, 0x27, 0xe0, 0x27, 0x56,
		0xc5, 0x77, 0x03, 0xd7, 0x4f, 0x7c, 0x42, 0x9d, 0x47, 0xc6, 0x85, 0x1b, 0xb3, 0x14, 0x0f, 0x0c,
		0x72, 0x95, 0x2d, 0xf3, 0xef, 0x33, 0x3c, 0x7b, 0x85, 0xe8, 0x2c, 0xb8, 0x16, 0xb8, 0x16, 0xb8,
		0xd6, 0x11, 0x72, 0x2d, 0x6c, 0x70, 0x97, 0x87, 0x6b, 0x5d, 0x81, 0x69, 0x1d, 0x1d, 0xd3, 0x3a,
		0xa5, 0xc4, 0x68, 0xa5, 0x14, 0x5e, 0xcb, 0x6c, 0x52, 0xf4, 0xef, 0xc3, 0x7b, 0x28, 0x43, 0x42,
		0x34, 0xa7, 0x36, 0x23, 0x61, 0x94, 0xbe, 0x1e, 0x9d, 0xbc, 0xe8, 0xb9, 0x69, 0x90, 0x1e, 0x5d,
		0x38, 0x55, 0x44, 0x7a, 0xb4, 0xba, 0x41, 0x52, 0x4e, 0x8f, 0xee, 0x79, 0xb4, 0xaf, 0xef, 0x43,
		0x66, 0xb3, 0xe8, 0x79, 0x5d, 0x0d, 0x78, 0x5d, 0xf0, 0xba, 0x0e, 0xd1, 0xeb, 0x52, 0x55, 0xbd,
		0x69, 0x80, 0x27, 0x74, 0xdc, 0x9e, 0xcb, 0xb8, 0xfe, 0xdb, 0x9e, 0x84, 0x74, 0xc6, 0x33, 0x6a,
		0xbe, 0x1b, 0xbd, 0x80, 0x88, 0x31, 0x15, 0x35, 0xa9, 0xaa, 0x85, 0xa9, 0xac, 0x69, 0xd5, 0x2d,
		0x4c, 0x85, 0x0b, 0x53, 0xe5, 0x22, 0x55, 0xda, 0x90, 0xdb, 0xa2, 0x29, 0x7f, 0xda, 0x01, 0x96,
		0x25, 0xe9, 0x63, 0x41, 0xe2, 0x33, 0x3e, 0xf4, 0x24, 0x0c, 0xc8, 0xde, 0x18, 0x4b, 0x5b, 0x06,
		0xe6, 0x7a, 0x1f, 0x24, 0x7e, 0xfa, 0xb0, 0xfb, 0xf2, 0x14, 0x35, 0x5e, 0x56, 0x65, 0xe4, 0xd0,
		0x18, 0x32, 0xa7, 0xd9, 0x6c, 0x30, 0xa5, 0x30, 0xa5, 0x30, 0xa5, 0x30, 0xa5, 0x07, 0x69, 0x4a,
		0x77, 0x4a, 0x88, 0xff, 0xc1, 0x5e, 0x34, 0xad, 0x66, 0xe5, 0x83, 0x1b, 0x8b, 0x77, 0x42, 0x68,
		0x12, 0xeb, 0x8f, 0x6e, 0xf0, 0xde, 0xcb, 0xb6, 0x33, 0x35, 0x43, 0xb1, 0x95, 0x8f, 0xf4, 0x79,
		0x66, 0x26, 0xb3, 0x5d, 0xbe, 0x2a, 0x3f, 0x73, 0x87, 0x71, 0xe6, 0x7c, 0x9b, 0xae, 0x5a, 0x90,
		0x78, 0xde, 0x4e, 0x5f, 0x96, 0x66, 0x24, 0xb3, 0xb0, 0x88, 0xe6, 0x6c, 0xf0, 0xed, 0x42, 0x23,
		0xbc, 0x60, 0x3a, 0xca, 0x99, 0xde, 0xd7, 0xcf, 0xc3, 0xdb, 0xfa, 0xf4, 0x43, 0x7a, 0x5b, 0x88,
		0x67, 0x17, 0xfc, 0xf6, 0xf7, 0x1c, 0xd6, 0x9e, 0x79, 0xe1, 0x25, 0x09, 0x6e, 0x07, 0x71, 0x14,
		0x72, 0xa1, 0x15, 0xd8, 0x1e, 0x4d, 0x81, 0xa0, 0x76, 0xe1, 0x1c, 0x14, 0x41, 0x6d, 0x75, 0xab,
		0xa4, 0x1c, 0xd4, 0xf6, 0x42, 0x9b, 0x7a, 0x84, 0x3a, 0x0e, 0x67, 0xb1, 0x81, 0x96, 0x8b, 0xf3,
		0xd3, 0x21, 0xb9, 0x08, 0x61, 0xee, 0x52, 0x38, 0x72, 0x87, 0x9a, 0x5c, 0xe4, 0x46, 0x9a, 0xba,
		0x34, 0x07, 0x46, 0xb7, 0x1a, 0x73, 0x8c, 0x9e, 0x69, 0xef, 0x09, 0x46, 0xd3, 0x95, 0x79, 0x6c,
		0x19, 0x58, 0x9b, 0xa5, 0x35, 0xba, 0x31, 0x30, 0xd7, 0x2f, 0x54, 0x08, 0xc6, 0x03, 0xed, 0xe5,
		0x9a, 0x4c, 0x58, 0xad, 0xde, 0xd7, 0xc9, 0x6d, 0xe7, 0xcb, 0x7d, 0x83, 0xdc, 0x76, 0x86, 0xbf,
		0x36, 0xb2, 0x1f, 0xc3, 0xdf, 0x9b, 0xf7, 0x75, 0xd2, 0x1a, 0xff, 0x7e, 0x75, 0x5f, 0x27, 0x57,
		0x9d, 0xda, 0xc3, 0xc3, 0x79, 0xed, 0xf3, 0xe5, 0xab, 0xfc, 0x40, 0xfd, 0x68, 0x49, 0xe7, 0xc0,
		0xeb, 0x19, 0x67, 0x44, 0xac, 0x7d, 0x42, 0x22, 0x76, 0xf7, 0x25, 0x15, 0x04, 0x4a, 0x7a, 0xef,
		0xc8, 0x0f, 0x9d, 0xcf, 0xf5, 0x37, 0xad, 0xd7, 0xda, 0x5d, 0xad, 0xba, 0xf8, 0xb7, 0xbb, 0xda,
		0xe7, 0xfa, 0x9b, 0xab, 0xd7, 0x6a, 0x75, 0xc5, 0x27, 0xdf, 0xac, 0x9a, 0xa3, 0xf6, 0xa5, 0x5a,
		0xad, 0x8e, 0x84, 0x6b, 0x4e, 0xe0, 0xee, 0xeb, 0x8d, 0xce, 0x37, 0xd9, 0xaf, 0xc3, 0xff, 0x4e,
		0x44, 0x36, 0xd7, 0xc5, 0xb5, 0xfd, 0x0b, 0xea, 0x51, 0xa6, 0xd0, 0x47, 0x34, 0x8e, 0xdd, 0x47,
		0x46, 0xfc, 0xd0, 0x31, 0xd0, 0xba, 0x64, 0x6e, 0xb6, 0x7d, 0xa6, 0xc7, 0x67, 0x99, 0x80, 0x48,
		0x91, 0x07, 0x8b, 0x05, 0x8b, 0xdd, 0x3d, 0x8b, 0xed, 0x86, 0xa1, 0xc7, 0x68, 0x60, 0x82, 0xc2,
		0x36, 0xca, 0x7c, 0x1e, 0x94, 0x1d, 0x11, 0xdf, 0x84, 0x13, 0x3d, 0x9e, 0x08, 0x86, 0x07, 0x86,
		0x07, 0x86, 0x47, 0x43, 0x7a, 0x50, 0x9b, 0x33, 0x7b, 0x23, 0x85, 0xd4, 0xe6, 0x5c, 0x5d, 0xb6,
		0x51, 0x9d, 0xa3, 0xf2, 0x32, 0x8a, 0xa8, 0xce, 0xb9, 0x6d, 0xb5, 0xda, 0x28, 0xcf, 0x39, 0x36,
		0x2f, 0xee, 0xc4, 0xb6, 0x33, 0x95, 0x36, 0xdc, 0x2c, 0xe3, 0x5b, 0x99, 0xa3, 0xdb, 0x28, 0xc1,
		0x3e, 0x66, 0x12, 0x38, 0x8c, 0x13, 0x9f, 0xba, 0x81, 0x60, 0x41, 0x7a, 0xcb, 0xea, 0xfb, 0x99,
		0xcb, 0x53, 0xa9, 0xed, 0x6b, 0xd6, 0x55, 0xf7, 0x35, 0x9b, 0xd8, 0xd7, 0xc4, 0xbe, 0xe6, 0x2e,
		0xb8, 0xa0, 0x01, 0xe7, 0x53, 0xd1, 0xe9, 0x94, 0x30, 0x02, 0x5f, 0x19, 0x5c, 0xb2, 0x71, 0x2e,
		0x59, 0x66, 0x47, 0x89, 0x44, 0x46, 0x99, 0x5a, 0x06, 0x99, 0x7a, 0xc6, 0x98, 0xd1, 0x0c, 0x31,
		0xb5, 0x8c, 0xb0, 0xbc, 0x4b, 0xaa, 0x08, 0x8e, 0x86, 0x41, 0x51, 0x42, 0x74, 0xcd, 0x41, 0x60,
		0x3e, 0x43, 0xb0, 0x5d, 0x82, 0x73, 0x2c, 0x75, 0xc5, 0xf5, 0x53, 0xa8, 0x25, 0x51, 0xe8, 0xb9,
		0x76, 0xfe, 0x73, 0x47, 0xa6, 0xfb, 0x34, 0x73, 0xc3, 0xf3, 0x6a, 0x8b, 0x14, 0x90, 0x49, 0x07,
		0x45, 0x54, 0x80, 0x4b, 0x1b, 0xb0, 0x54, 0x81, 0x4a, 0x1b, 0xa0, 0xb4, 0x81, 0xc9, 0x04, 0x20,
		0x99, 0xb5, 0xa6, 0xd2, 0xc0, 0x33, 0x4d, 0x81, 0x61, 0xb4, 0xc7, 0x59, 0x4f, 0xe6, 0xbd, 0x8d,
		0x81, 0xe6, 0x5a, 0x62, 0xcc, 0x2f, 0x33, 0xd6, 0x85, 0xf0, 0x28, 0xf4, 0xee, 0x78, 0x98, 0x08,
		0x37, 0xe8, 0x8f, 0x14, 0x61, 0xfa, 0xf7, 0xc5, 0x7f, 0x67, 0xd6, 0x61, 0x97, 0xea, 0x1d, 0x3d,
		0xb6, 0x48, 0x12, 0xb8, 0x36, 0x8d, 0x85, 0x82, 0x76, 0xcf, 0x8e, 0x96, 0x53, 0xee, 0x06, 0x94,
		0x1b, 0xca, 0xbd, 0xea, 0x86, 0x64, 0xb3, 0xe5, 0x2a, 0xd4, 0x16, 0xee, 0x23, 0x23, 0xa9, 0x86,
		0x31, 0x8d, 0x3e, 0x09, 0xf3, 0xd3, 0xc0, 0xf5, 0x82, 0xeb, 0x75, 0xd4, 0xae, 0xd7, 0x9f, 0x8c,
		0x87, 0xa4, 0x4b, 0x63, 0xe6, 0x10, 0x3b, 0x4c, 0x02, 0xc1, 0x78, 0xbb, 0xa5, 0xe1, 0x87, 0x29,
		0xe4, 0xcd, 0xcc, 0x24, 0x0f, 0x54, 0xea, 0x2a, 0x5f, 0xfd, 0x77, 0x1a, 0x4f, 0xa7, 0x50, 0x7b,
		0xeb, 0x9a, 0x1b, 0x00, 0x7a, 0x45, 0x3d, 0xfa, 0x1b, 0x5e, 0x86, 0x1a, 0x9e, 0x1a, 0x0f, 0x28,
		0x9b, 0x0b, 0x24, 0xbf, 0xea, 0x55, 0x3b, 0x99, 0x5b, 0x62, 0xb3, 0xc5, 0x52, 0x65, 0x5f, 0xf5,
		0x1d, 0x85, 0xcf, 0x3b, 0x25, 0x88, 0xe0, 0x52, 0xc7, 0x77, 0x03, 0x12, 0x0b, 0x2a, 0x34, 0x62,
		0xb7, 0xb3, 0x93, 0xc8, 0x56, 0x07, 0x68, 0xa4, 0x50, 0x55, 0x58, 0x40, 0xbb, 0x9e, 0x64, 0xee,
		0x54, 0x67, 0xc7, 0xdc, 0x06, 0xe5, 0x32, 0xe0, 0x36, 0xbb, 0xe5, 0x36, 0xea, 0xda, 0x68, 0x69,
		0x96, 0x4c, 0x2b, 0x96, 0x48, 0x17, 0x65, 0xd9, 0x46, 0x9d, 0x90, 0x49, 0x96, 0x2d, 0x1d, 0xb0,
		0x67, 0x41, 0x06, 0x61, 0xa4, 0xe3, 0x23, 0xad, 0x9b, 0x71, 0x97, 0x36, 0x4f, 0x21, 0x5d, 0x14,
		0x26, 0x0f, 0x26, 0x0f, 0x3b, 0x69, 0x5b, 0xcc, 0x5d, 0xa3, 0x04, 0x26, 0xcb, 0x0e, 0x83, 0x47,
		0xc6, 0xfb, 0x4c, 0x6b, 0x23, 0x7d, 0x76, 0x12, 0x94, 0x06, 0x43, 0xf1, 0x8f, 0xb1, 0x34, 0x78,
		0x2c, 0xe3, 0x0e, 0x89, 0x18, 0xe3, 0x06, 0xf2, 0x9a, 0x17, 0x27, 0xdc, 0x73, 0x7e, 0x73, 0x13,
		0xf9, 0xcd, 0xc5, 0x29, 0x9a, 0x71, 0x85, 0x2b, 0x42, 0xf1, 0x34, 0x63, 0x11, 0xc8, 0x6f, 0xc6,
		0x39, 0x4f, 0xfb, 0x0a, 0xc4, 0x99, 0x0f, 0xc8, 0x19, 0x08, 0x87, 0x1a, 0x0d, 0x8b, 0x2e, 0xbd,
		0x0a, 0x9c, 0x43, 0xb9, 0xcb, 0xd1, 0x65, 0x2e, 0x52, 0x9d, 0x61, 0xdf, 0x8a, 0x51, 0xd5, 0x4d,
		0x84, 0x5e, 0x39, 0xaa, 0x03, 0x76, 0x02, 0x76, 0x02, 0x76, 0x62, 0xb8, 0xcb, 0xa4, 0x89, 0xee,
		0x92, 0x9a, 0x5d, 0x25, 0x77, 0x6f, 0xd4, 0x84, 0xeb, 0x1b, 0xb6, 0x69, 0xd9, 0x8c, 0x30, 0x69,
		0x30, 0x69, 0x30, 0x69, 0x1a, 0xd2, 0x93, 0x6a, 0x91, 0x70, 0xed, 0x3f, 0x62, 0xa5, 0x44, 0x96,
		0x45, 0x85, 0xba, 0x81, 0xd7, 0x05, 0xaf, 0xab, 0xec, 0x5e, 0x97, 0xf9, 0xa4, 0x14, 0x38, 0x61,
		0x47, 0xe1, 0x84, 0xf5, 0x5c, 0x1e, 0x0b, 0x92, 0x44, 0x59, 0x30, 0xd7, 0x10, 0x63, 0x59, 0x31,
		0x27, 0x38, 0x0b, 0x38, 0x0b, 0x38, 0x0b, 0x38, 0x0b, 0x38, 0x0b, 0x38, 0x0b, 0x38, 0x0b, 0x38,
		0x8b, 0x16, 0x67, 0xf1, 0xa8, 0x71, 0xca, 0xb2, 0x3c, 0x25, 0x18, 0x0b, 0x18, 0x0b, 0x18, 0x0b,
		0x18, 0x0b, 0x18, 0x0b, 0x18, 0x0b, 0x18, 0x0b, 0x18, 0x8b, 0x16, 0x63, 0xf1, 0xe9, 0x33, 0x79,
		0xa2, 0xae, 0x20, 0x22, 0x24, 0x93, 0xd4, 0x78, 0x7d, 0xd6, 0xb2, 0x7a, 0xda, 0x7d, 0x76, 0x68,
		0xae, 0xa3, 0x3b, 0x33, 0xd8, 0x16, 0xd8, 0xd6, 0xee, 0xd9, 0x16, 0x92, 0x08, 0x41, 0xb4, 0x4e,
		0x87, 0x68, 0x5d, 0xb6, 0xeb, 0x75, 0x10, 0x2b, 0x10, 0xab, 0x4a, 0x18, 0x65, 0x9d, 0x30, 0x0b,
		0x61, 0x57, 0x1b, 0xe6, 0x46, 0x70, 0x08, 0x74, 0x05, 0x74, 0x05, 0x74, 0x05, 0x74, 0x05, 0x74,
		0x25, 0x4f, 0x5c, 0xa8, 0x7e, 0x03, 0xbe, 0x02, 0xbe, 0x62, 0x59, 0x95, 0xd1, 0x16, 0x93, 0x81,
		0x32, 0xcc, 0xc9, 0x4c, 0xe0, 0x22, 0xe0, 0x22, 0xe0, 0x22, 0xe0, 0x22, 0xe0, 0x22, 0xe0, 0x22,
		0x39, 0x5e, 0x05, 0xea, 0x2f, 0xc1, 0x45, 0xe6, 0xb9, 0x08, 0x79, 0x1a, 0xb0, 0x80, 0xf8, 0x6e,
		0x40, 0xd8, 0x73, 0xe4, 0x72, 0xe6, 0x98, 0x23, 0x27, 0xcb, 0x53, 0x83, 0xad, 0x80, 0xad, 0x80,
		0xad, 0x80, 0xad, 0x80, 0xad, 0x80, 0xad, 0x80, 0xad, 0x9c, 0x2a, 0x5b, 0x39, 0x8d, 0xc3, 0xf0,
		0x66, 0x0f, 0xbd, 0xb8, 0x50, 0xef, 0x35, 0x67, 0x99, 0x3a, 0x12, 0xe8, 0xc7, 0xe8, 0xb1, 0xf5,
		0xff, 0x86, 0xb7, 0xf3, 0xe9, 0xbb, 0x99, 0xdb, 0x29, 0x41, 0x3b, 0x3f, 0x3f, 0xf1, 0x84, 0x3b,
		0x5a, 0x72, 0xc5, 0x66, 0x7e, 0xd3, 0x29, 0xd0, 0xca, 0xaf, 0x70, 0xee, 0x88, 0x56, 0x7e, 0xea,
		0xf6, 0x49, 0xb9, 0x95, 0x1f, 0xf5, 0xbc, 0xf0, 0x89, 0x0c, 0xe5, 0xdc, 0x63, 0x84, 0x1a, 0x88,
		0x22, 0x2f, 0x4f, 0xb9, 0xcf, 0xec, 0xc1, 0xf4, 0xed, 0x23, 0x81, 0x10, 0x7e, 0x25, 0xfc, 0xca,
		0xdd, 0xfb, 0x95, 0xea, 0x7d, 0x81, 0x97, 0x80, 0xb4, 0x51, 0xf2, 0x4c, 0xec, 0x94, 0x24, 0xc4,
		0xc4, 0x63, 0x8f, 0xcc, 0x23, 0x0d, 0x33, 0x59, 0xd8, 0xf3, 0x53, 0xee, 0xd3, 0x86, 0x36, 0x60,
		0x40, 0x61, 0x40, 0x61, 0x40, 0x77, 0x6f, 0x40, 0xdd, 0x88, 0x30, 0xdb, 0x8f, 0x0c, 0x18, 0xd0,
		0x6b, 0x44, 0xe6, 0xd6, 0x84, 0x83, 0x1a, 0x88, 0xcc, 0x95, 0x26, 0x32, 0xd7, 0x42, 0x58, 0xee,
		0xd8, 0xc2, 0x72, 0x06, 0xf8, 0x54, 0xd3, 0x3c, 0x9f, 0x6a, 0x82, 0x4f, 0x81, 0x4f, 0x81, 0x4f,
		0x81, 0x4f, 0x81, 0x4f, 0x81, 0x4f, 0x81, 0x4f, 0x81, 0x4f, 0x1d, 0x0c, 0x9f, 0x3a, 0xc1, 0x6d,
		0x4e, 0xd5, 0x5d, 0x38, 0xab, 0x88, 0x4d, 0xce, 0x8f, 0x93, 0x9b, 0x29, 0xc1, 0x16, 0xe7, 0xf8,
		0x0c, 0x44, 0xc2, 0x59, 0x1c, 0x7a, 0x89, 0xd2, 0x8b, 0x9b, 0x80, 0xe3, 0xaa, 0xc9, 0xb0, 0xed,
		0x59, 0x38, 0x93, 0xc4, 0xb6, 0xa7, 0xba, 0xbd, 0x52, 0xde, 0xf6, 0xcc, 0xec, 0x8b, 0xfa, 0x99,
		0xa4, 0x2b, 0x88, 0xe5, 0xdc, 0x7c, 0x7a, 0x8e, 0x5a, 0x03, 0x8e, 0x1a, 0x1c, 0xb5, 0x43, 0x74,
		0xd4, 0x54, 0xd5, 0x71, 0x32, 0x81, 0x48, 0x82, 0x80, 0x79, 0x3a, 0x68, 0xb6, 0x56, 0x1e, 0x97,
		0xa7, 0xd6, 0x7c, 0x5b, 0x7a, 0xca, 0x6a, 0x4c, 0x69, 0x4d, 0x2a, 0x6f, 0x61, 0x4a, 0x6c, 0x5a,
		0x99, 0x0b, 0x53, 0xea, 0xc2, 0x94, 0xbb, 0x48, 0x25, 0x37, 0xe4, 0xfb, 0x68, 0xca, 0x9f, 0xae,
		0xf2, 0x4f, 0x26, 0xca, 0xf2, 0x87, 0x98, 0x43, 0x46, 0x1a, 0x2b, 0x5e, 0x22, 0x16, 0x9b, 0x93,
		0x98, 0xb9, 0x2c, 0xa5, 0xc5, 0x6f, 0x31, 0xf4, 0x8e, 0xf5, 0x02, 0xae, 0x85, 0x99, 0x88, 0x22,
		0x4c, 0x45, 0xe1, 0x26, 0xa3, 0x28, 0xd3, 0x51, 0xb8, 0x09, 0x29, 0xdc, 0x94, 0xec, 0xc2, 0xa4,
		0x98, 0x31, 0x2d, 0x06, 0x03, 0x65, 0x96, 0x91, 0x80, 0xf0, 0x7a, 0x1e, 0xef, 0xb0, 0x40, 0xb8,
		0xe2, 0x85, 0xb3, 0x9e, 0x49, 0xd9, 0x1d, 0x73, 0x85, 0x2b, 0x83, 0x73, 0xfe, 0x38, 0xba, 0xd5,
		0x6f, 0x69, 0x5c, 0x80, 0x56, 0x2c, 0xd0, 0xa6, 0xd4, 0x3c, 0x9a, 0xd6, 0x8b, 0x2c, 0x4a, 0x19,
		0x6b, 0xc7, 0xc1, 0x57, 0xfd, 0xef, 0xb3, 0xf1, 0x19, 0xe7, 0x16, 0xc5, 0x73, 0x0c, 0xaa, 0x96,
		0x61, 0xe5, 0xd8, 0xe1, 0x32, 0xc4, 0x9c, 0x84, 0x71, 0xd4, 0x7b, 0x6c, 0x62, 0x31, 0xac, 0xca,
		0xe3, 0xb3, 0x47, 0x03, 0x2c, 0x44, 0x26, 0x15, 0x51, 0xe8, 0xb9, 0xf6, 0x0b, 0xf1, 0x23, 0x2f,
		0xc6, 0x8a, 0x4c, 0xf5, 0xe4, 0x12, 0x8b, 0x91, 0x2d, 0x06, 0xe4, 0x62, 0xb2, 0x14, 0x6e, 0xec,
		0x16, 0xb1, 0x14, 0x46, 0x67, 0xec, 0x1c, 0x29, 0x8b, 0xfc, 0xe0, 0xc6, 0xe2, 0x9d, 0x10, 0xdc,
		0x2c, 0x93, 0xfc, 0xe8, 0x06, 0xef, 0x3d, 0x96, 0xd2, 0x71, 0x83, 0xfb, 0xa4, 0xd6, 0x68, 0x8b,
		0x78, 0x66, 0xe6, 0xe2, 0xfa, 0xc2, 0x67, 0x5f, 0xf6, 0x33, 0x77, 0x18, 0x67, 0xce, 0xb7, 0x2f,
		0x95, 0x3b, 0x2b, 0x48, 0x3c, 0xef, 0xab, 0x72, 0xbc, 0x7f, 0x13, 0x5b, 0xed, 0x7e, 0xe8, 0x30,
		0xf3, 0xf1, 0x84, 0x6c, 0x56, 0x43, 0x92, 0x69, 0x22, 0xc9, 0x6c, 0x69, 0x52, 0xc7, 0x8d, 0x69,
		0xd7, 0x63, 0x8e, 0x19, 0x73, 0xd3, 0x41, 0xa8, 0x04, 0xa1, 0x12, 0x84, 0x4a, 0x4e, 0x38, 0x54,
		0x62, 0xe6, 0x10, 0xf7, 0xb5, 0xa1, 0x92, 0x96, 0xc1, 0x39, 0xf5, 0x0e, 0x79, 0x2f, 0x00, 0xc5,
		0xf6, 0x1a, 0xa8, 0xd7, 0x4c, 0xf2, 0x59, 0x9a, 0xaf, 0x98, 0xa4, 0x9f, 0x15, 0xd9, 0x28, 0x17,
		0xf3, 0xbb, 0xec, 0x17, 0xa6, 0xb7, 0xf4, 0xac, 0x22, 0xf2, 0x85, 0x7e, 0x62, 0xcf, 0xe2, 0xef,
		0x61, 0xf4, 0xeb, 0xe4, 0x26, 0xb3, 0x4f, 0x47, 0x7f, 0x8d, 0x3f, 0xfd, 0x9e, 0x3d, 0xc3, 0xf4,
		0xd3, 0xca, 0x9e, 0xf2, 0xd7, 0x76, 0xbb, 0x51, 0x6c, 0x48, 0x04, 0xf7, 0x26, 0x7a, 0x3a, 0xf9,
		0x0c, 0xbb, 0x15, 0xb0, 0xca, 0x51, 0xe4, 0x25, 0xb2, 0x67, 0xc1, 0x29, 0x49, 0xd2, 0xc5, 0xe8,
		0x7a, 0x4c, 0x31, 0xe5, 0xa7, 0x47, 0x7a, 0x8c, 0x8a, 0x84, 0xab, 0xa7, 0x5e, 0x1b, 0x4d, 0x8b,
		0x49, 0x6f, 0xe6, 0xae, 0x97, 0xa4, 0x37, 0x44, 0x9a, 0x0d, 0xd2, 0x26, 0x97, 0x25, 0xcb, 0x92,
		0x99, 0x59, 0xb0, 0xc3, 0xc8, 0x94, 0x59, 0xb1, 0xa2, 0xbb, 0xb6, 0x87, 0x5f, 0x15, 0x1b, 0x5c,
		0x39, 0x8e, 0x7c, 0x5e, 0xfd, 0x44, 0xd3, 0xdd, 0x18, 0xd2, 0x32, 0x64, 0xf8, 0x72, 0x66, 0x33,
		0xf7, 0x91, 0x11, 0x37, 0x7a, 0x6c, 0x6b, 0x24, 0x2c, 0x4e, 0xec, 0xcf, 0x9a, 0xf9, 0x64, 0xf3,
		0x2e, 0x35, 0x02, 0x14, 0x95, 0x2c, 0xd1, 0x5f, 0x6e, 0x6d, 0x3b, 0x6a, 0x79, 0xc8, 0x75, 0xe4,
		0x21, 0xef, 0xc1, 0xbb, 0x3f, 0xc1, 0x3c, 0x64, 0x65, 0x2f, 0xdb, 0x40, 0xab, 0x14, 0xc5, 0x16,
		0x29, 0x85, 0x9a, 0x2b, 0x87, 0xf0, 0x30, 0x11, 0x4c, 0xdf, 0x4e, 0x4d, 0x26, 0xda, 0xb1, 0x01,
		0x68, 0xc2, 0x00, 0xc0, 0x00, 0xec, 0xd4, 0x00, 0xfc, 0xc9, 0x78, 0x48, 0xba, 0x34, 0x66, 0x0e,
		0xb1, 0xc3, 0x24, 0x10, 0x8c, 0x2b, 0x9d, 0x71, 0xad, 0x71, 0xb6, 0xf5, 0x0c, 0xaa, 0x57, 0xea,
		0x2a, 0x5f, 0xfd, 0x77, 0x1a, 0x4f, 0xa7, 0x50, 0x7b, 0xeb, 0x9a, 0xb5, 0xb1, 0x1a, 0x0e, 0x9a,
		0x89, 0x5a, 0x58, 0x53, 0xdd, 0x7e, 0x8d, 0xd7, 0x5b, 0x9a, 0xab, 0xb3, 0xd4, 0x08, 0x3e, 0x1a,
		0xa9, 0x71, 0x2d, 0xf0, 0x5c, 0xec, 0x32, 0xaf, 0x7a, 0x39, 0xbd, 0xd1, 0xaf, 0xcc, 0x5e, 0x99,
		0x53, 0xb6, 0x54, 0xbd, 0xda, 0x62, 0xbc, 0x59, 0x09, 0x43, 0x69, 0xda, 0x63, 0xcd, 0x07, 0x82,
		0xdb, 0xd7, 0x3e, 0xc7, 0xba, 0x57, 0x32, 0x7f, 0x71, 0xfc, 0xc8, 0x79, 0x57, 0x7d, 0xb6, 0x3c,
		0xae, 0x2d, 0xb9, 0x60, 0x92, 0xf5, 0x35, 0xd2, 0xbe, 0x9b, 0x0a, 0x65, 0xd3, 0xa6, 0x6a, 0xaa,
		0x14, 0x4d, 0x9b, 0x9a, 0x69, 0x53, 0x32, 0x13, 0x54, 0xcc, 0xac, 0x15, 0x90, 0xad, 0x37, 0xa9,
		0xa4, 0xc6, 0xfd, 0x91, 0x69, 0x7b, 0x26, 0xf3, 0xd3, 0xc0, 0x2f, 0x81, 0x5f, 0x02, 0xbf, 0x04,
		0x7e, 0x09, 0xfc, 0x12, 0xf8, 0x25, 0xf0, 0x4b, 0x0e, 0xce, 0x2f, 0x91, 0xa0, 0x6e, 0xd4, 0xf1,
		0xdd, 0x80, 0xc4, 0x82, 0x0a, 0xa6, 0x41, 0x1e, 0x66, 0x26, 0xd9, 0xe5, 0x9e, 0xcb, 0x28, 0xf9,
		0x13, 0xbb, 0x2e, 0x20, 0x37, 0x20, 0x37, 0x26, 0xd4, 0xd1, 0xd2, 0xcc, 0x55, 0x54, 0xcc, 0x49,
		0x2c, 0xc6, 0xb4, 0xcd, 0x9e, 0x23, 0xa4, 0x6c, 0xda, 0xd4, 0x0f, 0x23, 0x42, 0xdb, 0x28, 0x18,
		0x8e, 0x9d, 0x1a, 0x0e, 0xe5, 0xb6, 0x51, 0x63, 0x19, 0x77, 0x4c, 0x9d, 0xb8, 0xbe, 0x38, 0x21,
		0x8e, 0x32, 0x45, 0xe3, 0xa8, 0xbd, 0x2a, 0x9e, 0x26, 0xb3, 0xc7, 0x51, 0xa6, 0x38, 0xca, 0x74,
		0x5f, 0x6e, 0xad, 0x79, 0xf7, 0xd6, 0x40, 0x70, 0xc1, 0x68, 0x90, 0x61, 0xe9, 0x55, 0xe0, 0x28,
		0xd3, 0x5d, 0x8e, 0x2e, 0xf3, 0x99, 0x09, 0x33, 0xec, 0x5b, 0x31, 0x46, 0xb1, 0x89, 0xd0, 0x2b,
		0xbb, 0x48, 0x60, 0x27, 0x60, 0x27, 0x60, 0x27, 0x86, 0x6b, 0x26, 0x4d, 0xd4, 0x48, 0x6a, 0xd6,
		0x44, 0xee, 0xde, 0xa8, 0x09, 0xd7, 0x37, 0x6c, 0xd3, 0xb2, 0x19, 0x61, 0xd2, 0x60, 0xd2, 0x60,
		0xd2, 0x34, 0xa4, 0x27, 0xd5, 0x22, 0xe1, 0xda, 0x7f, 0xc4, 0x4a, 0xdb, 0xc2, 0x8b, 0x0a, 0x75,
		0x03, 0xaf, 0x0b, 0x5e, 0x57, 0xd9, 0xbd, 0xae, 0xe2, 0x5a, 0xef, 0xc0, 0x09, 0x3b, 0x68, 0x27,
		0xac, 0xe7, 0xf2, 0x58, 0x90, 0x24, 0xca, 0x82, 0xb9, 0x86, 0x18, 0xcb, 0x8a, 0x39, 0xc1, 0x59,
		0xc0, 0x59, 0xc0, 0x59, 0xc0, 0x59, 0xc0, 0x59, 0xc0, 0x59, 0xc0, 0x59, 0xc0, 0x59, 0xb4, 0x38,
		0x8b, 0x47, 0x8d, 0x53, 0x96, 0xe5, 0x29, 0xc1, 0x58, 0xc0, 0x58, 0xc0, 0x58, 0xc0, 0x58, 0xc0,
		0x58, 0xc0, 0x58, 0xc0, 0x58, 0xc0, 0x58, 0xb4, 0x18, 0x8b, 0x4f, 0x9f, 0xc9, 0x13, 0x75, 0x05,
		0x11, 0x21, 0xa1, 0xce, 0x23, 0xe3, 0xc2, 0x8d, 0x0d, 0xb0, 0x96, 0xd5, 0xd3, 0xaa, 0x9e, 0x84,
		0x67, 0xa0, 0x83, 0x73, 0xa5, 0xae, 0x86, 0x73, 0x9d, 0x3d, 0xb3, 0x2d, 0x9c, 0x3e, 0x09, 0xb6,
		0x75, 0xd8, 0x6c, 0x0b, 0x49, 0x84, 0x20, 0x5a, 0xa7, 0x43, 0xb4, 0x2e, 0xdb, 0xf5, 0x3a, 0x88,
		0x15, 0x88, 0x55, 0x25, 0x8c, 0x18, 0x27, 0x05, 0xb1, 0xab, 0x0d, 0x73, 0x23, 0x38, 0x04, 0xba,
		0x02, 0xba, 0x02, 0xba, 0x02, 0xba, 0x02, 0xba, 0x92, 0x27, 0x2e, 0x54, 0xbf, 0x01, 0x5f, 0x01,
		0x5f, 0xb1, 0xac, 0xca, 0x68, 0x8b, 0xc9, 0x40, 0x19, 0xe6, 0x64, 0x26, 0x70, 0x11, 0x70, 0x11,
		0x70, 0x11, 0x70, 0x11, 0x70, 0x11, 0x70, 0x91, 0x1c, 0xaf, 0x02, 0xf5, 0x97, 0xe0, 0x22, 0xf3,
		0x5c, 0x84, 0x3c, 0x0d, 0x58, 0x40, 0x7c, 0x37, 0x20, 0xec, 0x39, 0x72, 0x39, 0x73, 0xcc, 0x91,
		0x93, 0xe5, 0xa9, 0xc1, 0x56, 0xc0, 0x56, 0xc0, 0x56, 0xc0, 0x56, 0xc0, 0x56, 0xc0, 0x56, 0xc0,
		0x56, 0x4e, 0x95, 0xad, 0x9c, 0xcc, 0x09, 0x72, 0x93, 0x16, 0xf2, 0x17, 0xea, 0xbd, 0xe6, 0x2c,
		0x83, 0x7d, 0xf8, 0xdb, 0xe3, 0x93, 0xe3, 0xbe, 0x9b, 0xb9, 0x9d, 0x12, 0xb4, 0xf3, 0xf3, 0x13,
		0x4f, 0xb8, 0xa3, 0x25, 0x57, 0x6c, 0xe6, 0x37, 0x9d, 0x02, 0xad, 0xfc, 0x0a, 0xe7, 0x8e, 0x68,
		0xe5, 0xa7, 0x6e, 0x9f, 0x94, 0x5b, 0xf9, 0x51, 0xcf, 0x0b, 0x9f, 0xc8, 0x50, 0xce, 0x3d, 0x46,
		0xa8, 0x81, 0x28, 0xf2, 0xf2, 0x94, 0xfb, 0xcc, 0x1e, 0x4c, 0xdf, 0x3e, 0x12, 0x08, 0xe1, 0x57,
		0xc2, 0xaf, 0xdc, 0xbd, 0x5f, 0xa9, 0x7e, 0x9a, 0xe3, 0x12, 0x90, 0x36, 0x4a, 0x9e, 0x89, 0x9d,
		0x92, 0x84, 0x98, 0x78, 0xec, 0x91, 0x79, 0xa4, 0x61, 0x26, 0x0b, 0x7b, 0x7e, 0xca, 0x7d, 0xda,
		0xd0, 0x06, 0x0c, 0x28, 0x0c, 0x28, 0x0c, 0xe8, 0xee, 0x0d, 0xa8, 0x1b, 0x11, 0x66, 0xfb, 0x91,
		0x01, 0x03, 0x7a, 0x8d, 0xc8, 0xdc, 0x9a, 0x70, 0x50, 0x03, 0x91, 0xb9, 0xd2, 0x44, 0xe6, 0x5a,
		0x08, 0xcb, 0x1d, 0x5b, 0x58, 0xce, 0x00, 0x9f, 0x6a, 0x9a, 0xe7, 0x53, 0x4d, 0xf0, 0x29, 0xf0,
		0x29, 0xf0, 0x29, 0xf0, 0x29, 0xf0, 0x29, 0xf0, 0x29, 0xf0, 0x29, 0xf0, 0xa9, 0x83, 0xe1, 0x53,
		0x27, 0xb8, 0xcd, 0xa9, 0xba, 0x0b, 0x67, 0x15, 0xb1, 0xc9, 0xf9, 0x71, 0x72, 0x33, 0x25, 0xd8,
		0xe2, 0x0c, 0xd8, 0xb3, 0x20, 0x83, 0x30, 0x22, 0x9c, 0xc5, 0xa1, 0x97, 0x28, 0xbd, 0xb8, 0x09,
		0x38, 0xae, 0x9a, 0x0c, 0xdb, 0x9e, 0x85, 0x33, 0x49, 0x6c, 0x7b, 0xaa, 0xdb, 0x2b, 0xe5, 0x6d,
		0x4f, 0x37, 0x7a, 0x6c, 0x91, 0xb1, 0xc0, 0x1b, 0xd8, 0xf3, 0x5c, 0x98, 0x4f, 0xcf, 0x51, 0x6b,
		0xc0, 0x51, 0x83, 0xa3, 0x76, 0x88, 0x8e, 0x9a, 0xaa, 0x3a, 0x4e, 0x26, 0x10, 0x49, 0x10, 0x30,
		0x4f, 0x07, 0xcd, 0xd6, 0xca, 0xe3, 0xf2, 0xd4, 0x9a, 0x6f, 0x4b, 0x4f, 0x59, 0x8d, 0x29, 0xad,
		0x49, 0xe5, 0x2d, 0x4c, 0x89, 0x4d, 0x2b, 0x73, 0x61, 0x4a, 0x5d, 0x98, 0x72, 0x17, 0xa9, 0xe4,
		0x86, 0x7c, 0x1f, 0x4d, 0xf9, 0xd3, 0x55, 0xfe, 0xc9, 0x44, 0x59, 0xfe, 0x10, 0x73, 0xc8, 0x48,
		0x63, 0xc5, 0x4b, 0xc4, 0x62, 0x73, 0x12, 0x33, 0x97, 0xa5, 0xb4, 0xf8, 0x2d, 0x86, 0xde, 0xb1,
		0x5e, 0xc0, 0xb5, 0x30, 0x13, 0x51, 0x84, 0xa9, 0x28, 0xdc, 0x64, 0x14, 0x65, 0x3a, 0x0a, 0x37,
		0x21, 0x85, 0x9b, 0x92, 0x5d, 0x98, 0x14, 0x33, 0xa6, 0xc5, 0x60, 0xa0, 0xcc, 0x32, 0x12, 0x10,
		0x5e, 0xcf, 0xe3, 0x1d, 0x16, 0x08, 0x57, 0xbc, 0x70, 0xd6, 0x33, 0x29, 0xbb, 0x63, 0xae, 0x70,
		0x65, 0x70, 0xce, 0x1f, 0x47, 0xb7, 0xfa, 0x2d, 0x8d, 0x0b, 0xd0, 0x8a, 0x05, 0xda, 0x94, 0x9a,
		0x47, 0xd3, 0x7a, 0x91, 0x45, 0x29, 0x63, 0xed, 0x38, 0xf8, 0xaa, 0xff, 0x7d, 0x36, 0x3e, 0xe3,
		0xdc, 0xa2, 0x78, 0x8e, 0x41, 0xd5, 0x32, 0xac, 0x1c, 0x3b, 0x5c, 0x86, 0x98, 0x93, 0x30, 0x8e,
		0x7a, 0x8f, 0x4d, 0x2c, 0x86, 0x55, 0x79, 0x7c, 0xf6, 0x68, 0x80, 0x85, 0xc8, 0xa4, 0x22, 0x0a,
		0x3d, 0xd7, 0x7e, 0x21, 0x7e, 0xe4, 0xc5, 0x58, 0x91, 0xa9, 0x9e, 0x5c, 0x62, 0x31, 0xb2, 0xc5,
		0x80, 0x5c, 0x4c, 0x96, 0xc2, 0x8d, 0xdd, 0x22, 0x96, 0xc2, 0xe8, 0x8c, 0x9d, 0x23, 0x65, 0x91,
		0x1f, 0xdc, 0x58, 0xbc, 0x13, 0x82, 0x9b, 0x65, 0x92, 0x1f, 0xdd, 0xe0, 0xbd, 0xc7, 0x52, 0x3a,
		0x6e, 0x70, 0x9f, 0xd4, 0x1a, 0x6d, 0x11, 0xcf, 0xcc, 0x5c, 0x5c, 0x5f, 0xf8, 0xec, 0xcb, 0x7e,
		0xe6, 0x0e, 0xe3, 0xcc, 0xf9, 0xf6, 0xa5, 0x72, 0x67, 0x05, 0x89, 0xe7, 0x7d, 0x55, 0x8e, 0xf7,
		0x6f, 0x62, 0xab, 0xdd, 0x0f, 0x1d, 0x66, 0x3e, 0x9e, 0x90, 0xcd, 0x6a, 0x48, 0x32, 0x4d, 0x24,
		0x99, 0x2d, 0x4d, 0xea, 0xb8, 0x31, 0xed, 0x7a, 0xcc, 0x31, 0x63, 0x6e, 0x3a, 0x08, 0x95, 0x20,
		0x54, 0x82, 0x50, 0xc9, 0x09, 0x87, 0x4a, 0xcc, 0x1c, 0xe2, 0xbe, 0x36, 0x54, 0xd2, 0x32, 0x38,
		0xa7, 0xde, 0x21, 0xef, 0x05, 0xa0, 0xd8, 0x5e, 0x03, 0xf5, 0x9a, 0x49, 0x3e, 0x4b, 0xf3, 0x15,
		0x93, 0xf4, 0xb3, 0x22, 0x1b, 0xe5, 0x62, 0x7e, 0x97, 0xfd, 0xc2, 0xf4, 0x96, 0x9e, 0x55, 0x44,
		0xbe, 0xd0, 0x4f, 0xec, 0x59, 0xfc, 0x3d, 0x8c, 0x7e, 0x9d, 0xdc, 0x64, 0xfa, 0x69, 0x6b, 0xf4,
		0xd7, 0xf8, 0xd3, 0xef, 0xd9, 0x33, 0x4c, 0x3f, 0xad, 0xec, 0x29, 0x7f, 0x6d, 0xb7, 0x1b, 0xc5,
		0x86, 0x44, 0x70, 0x6f, 0xa2, 0xa7, 0x93, 0xcf, 0xb0, 0x5b, 0x01, 0xfb, 0xff, 0xec, 0xbd, 0x7b,
		0x73, 0xdb, 0x46, 0x96, 0x3e, 0xfc, 0xbf, 0x3f, 0x05, 0x86, 0xbb, 0x53, 0x26, 0x63, 0xb7, 0x44,
		0x52, 0x14, 0x65, 0x69, 0x2b, 0xe5, 0x75, 0x66, 0x9c, 0x99, 0xd4, 0xd8, 0x89, 0x2b, 0xc9, 0x6f,
		0xdf, 0xaa, 0x88, 0x1c, 0x2f, 0x44, 0x34, 0x29, 0x4c, 0x40, 0x00, 0x03, 0x34, 0x65, 0x29, 0x96,
		0xf6, 0xb3, 0xbf, 0x05, 0x80, 0x77, 0x52, 0x24, 0xba, 0xfb, 0x34, 0x08, 0x92, 0xcf, 0xd4, 0x54,
		0x24, 0xdb, 0xc4, 0x61, 0xa3, 0xfb, 0x5c, 0x9e, 0x73, 0xe9, 0x73, 0x2a, 0x07, 0x51, 0x97, 0xc8,
		0xef, 0x45, 0x64, 0xb3, 0x51, 0xb2, 0x19, 0x37, 0x1e, 0x57, 0x2c, 0xf9, 0xe9, 0xb3, 0x3e, 0xb7,
		0xc5, 0x28, 0x52, 0x2f, 0xbd, 0x26, 0x2d, 0x8b, 0x49, 0x16, 0x73, 0xd5, 0x1f, 0x25, 0x0b, 0x62,
		0xcd, 0x06, 0x6b, 0xb3, 0xb3, 0x92, 0x55, 0xc9, 0xcc, 0x6d, 0xd8, 0x7e, 0x54, 0xca, 0xac, 0xd9,
		0xd1, 0xa2, 0xf5, 0xe1, 0x0b, 0xb3, 0xc1, 0x95, 0xc3, 0xa8, 0xe7, 0xd5, 0x2f, 0x34, 0x2d, 0x46,
		0x91, 0x96, 0xa1, 0xc2, 0x37, 0xe2, 0x3d, 0xee, 0xde, 0x71, 0x87, 0x45, 0xc1, 0x48, 0x28, 0xd4,
		0x41, 0x4c, 0x15, 0xcf, 0x32, 0x21, 0xb5, 0xca, 0xde, 0xba, 0x6a, 0x65, 0x6f, 0x13, 0x95, 0xbd,
		0xa8, 0xec, 0x2d, 0xc2, 0x6f, 0x9d, 0x9e, 0xfe, 0x1f, 0x3c, 0x0a, 0xd8, 0x8d, 0x1d, 0x73, 0x87,
		0xf5, 0x82, 0x91, 0x2f, 0x78, 0xa4, 0x34, 0x34, 0x56, 0x63, 0x58, 0xec, 0x5c, 0x1c, 0xaf, 0x52,
		0x57, 0xf9, 0xea, 0xbf, 0xdb, 0xf1, 0x8c, 0x84, 0xda, 0xa9, 0x6b, 0x5e, 0x36, 0xd3, 0x40, 0x3c,
		0x14, 0x97, 0xcb, 0xa8, 0xda, 0x67, 0x92, 0x5f, 0x60, 0xa2, 0xbb, 0xb8, 0xa4, 0xe1, 0xcd, 0x93,
		0x5c, 0x1a, 0x33, 0x38, 0x68, 0xb6, 0xcc, 0xbb, 0x5e, 0x4e, 0x78, 0xf7, 0x82, 0xf6, 0x93, 0x39,
		0x79, 0x4b, 0x15, 0x26, 0x9a, 0x81, 0x87, 0x12, 0x8a, 0x92, 0x1a, 0x02, 0xe6, 0x33, 0x82, 0xdb,
		0xf7, 0x3e, 0xc7, 0xbe, 0x57, 0xbc, 0xa0, 0x67, 0x7b, 0x2c, 0x81, 0x05, 0x3c, 0x4a, 0x3b, 0x66,
		0xe6, 0xdd, 0xf9, 0x59, 0x15, 0xd2, 0x32, 0x85, 0x9c, 0xa7, 0xad, 0x92, 0x5d, 0xaa, 0x34, 0xea,
		0x39, 0xc7, 0xf0, 0xe6, 0x4c, 0x0c, 0x49, 0x02, 0x4a, 0xe9, 0xc4, 0x8e, 0x0a, 0x80, 0xd4, 0x06,
		0x8e, 0xaa, 0x80, 0x51, 0x1b, 0x28, 0x6a, 0x03, 0x44, 0x0a, 0x60, 0x48, 0xab, 0x93, 0xa4, 0x01,
		0xe0, 0x42, 0x37, 0xf3, 0x33, 0x99, 0x06, 0x1f, 0x0a, 0x77, 0xfa, 0x15, 0x61, 0x95, 0x02, 0x9c,
		0xd5, 0x81, 0x51, 0xba, 0xf0, 0x89, 0xcc, 0x80, 0xeb, 0x1b, 0x6e, 0x95, 0x3e, 0x32, 0x3a, 0xf0,
		0x68, 0xba, 0x75, 0xad, 0xe6, 0x65, 0xeb, 0xb2, 0x7d, 0xd1, 0xbc, 0x3c, 0xdf, 0xff, 0x3d, 0x34,
		0x04, 0x46, 0xba, 0x05, 0x9a, 0xcd, 0xa1, 0xed, 0xfa, 0x82, 0xfb, 0x89, 0x1d, 0x67, 0x83, 0x28,
		0x18, 0x85, 0xf2, 0x76, 0x73, 0x95, 0x84, 0x61, 0x93, 0xd5, 0x84, 0xc9, 0x82, 0xc9, 0xda, 0x7c,
		0x7a, 0x22, 0x72, 0xfd, 0x81, 0x82, 0xc9, 0x6a, 0xbc, 0x29, 0x50, 0xf6, 0x7c, 0xee, 0x0e, 0x6e,
		0x6f, 0x82, 0x48, 0x5e, 0xe4, 0xa6, 0x4f, 0xca, 0x49, 0x5a, 0x03, 0xe0, 0x10, 0x92, 0xb6, 0xd6,
		0x85, 0x91, 0xbc, 0x6b, 0x58, 0xb1, 0x9d, 0xa1, 0xeb, 0xb3, 0x58, 0xd8, 0x82, 0xab, 0x87, 0xd0,
		0xe7, 0x89, 0xc8, 0x36, 0x2a, 0xd0, 0xa8, 0xe8, 0xab, 0x70, 0x3f, 0xcd, 0x7a, 0x4a, 0x3d, 0xd8,
		0x2d, 0x38, 0xbe, 0x8f, 0xce, 0x1d, 0x88, 0xef, 0xcb, 0x2c, 0x54, 0x3f, 0xbe, 0xaf, 0x2e, 0x8d,
		0x96, 0x66, 0x9d, 0x99, 0x62, 0x3d, 0xd9, 0x2e, 0x8a, 0x1e, 0x86, 0xa3, 0x58, 0xec, 0xb2, 0xdc,
		0xe1, 0xc4, 0xfa, 0xd6, 0x7a, 0x39, 0xae, 0x3c, 0x7e, 0x69, 0x05, 0x91, 0x75, 0x72, 0x92, 0x95,
		0xd2, 0x4c, 0x72, 0xc1, 0x73, 0xa7, 0x98, 0x7c, 0x34, 0x53, 0x75, 0x73, 0x9f, 0x6c, 0xe7, 0xfb,
		0x24, 0xbf, 0x0b, 0xfd, 0xe7, 0x3f, 0xd1, 0xf1, 0xab, 0x7e, 0x20, 0xaa, 0x1b, 0xbe, 0xbb, 0x66,
		0xd9, 0xbe, 0x63, 0x25, 0x9f, 0x38, 0x39, 0x39, 0x4d, 0x9d, 0x82, 0xeb, 0xf4, 0xbf, 0xcc, 0xb7,
		0x87, 0x09, 0xb1, 0xde, 0x28, 0x8a, 0xb8, 0x2f, 0xaa, 0xb5, 0xe4, 0xdf, 0x43, 0xce, 0xa3, 0xcc,
		0x73, 0xe8, 0xe6, 0x7d, 0x99, 0xc9, 0xf7, 0x13, 0x51, 0xcf, 0x96, 0x9b, 0xd1, 0xcb, 0xb1, 0x82,
		0x5a, 0xad, 0x66, 0x2d, 0x6f, 0x43, 0x9b, 0x7a, 0x1b, 0xda, 0x46, 0xb7, 0xa1, 0x9d, 0x63, 0x1b,
		0xda, 0x39, 0xb6, 0x61, 0x7e, 0x17, 0x96, 0x99, 0x46, 0xf9, 0xed, 0x37, 0x73, 0x9f, 0xea, 0x5b,
		0xaf, 0x5f, 0x5e, 0x46, 0x67, 0xc3, 0x37, 0xd6, 0x6a, 0x35, 0x9d, 0x42, 0xa2, 0xf7, 0x51, 0x14,
		0x44, 0x1f, 0x79, 0x1c, 0xdb, 0x03, 0x4e, 0xd7, 0x7d, 0xe5, 0x27, 0x9f, 0x5b, 0x41, 0xdf, 0x12,
		0xb7, 0xdc, 0xb2, 0x1d, 0x27, 0xe2, 0x71, 0x6c, 0xf5, 0xed, 0xa1, 0xeb, 0xb9, 0x3c, 0xb6, 0x12,
		0x1d, 0x65, 0xdd, 0x70, 0x2b, 0x5b, 0xbf, 0x73, 0xa2, 0x5b, 0x6d, 0x44, 0x58, 0xfd, 0x3e, 0x6f,
		0xe1, 0x79, 0xb2, 0x31, 0x6c, 0x38, 0xde, 0x19, 0x82, 0x4a, 0x53, 0x13, 0xc5, 0xee, 0x0b, 0x00,
		0x40, 0x6a, 0xd3, 0xf7, 0xab, 0xee, 0xb4, 0x3c, 0x89, 0xb8, 0xd7, 0x32, 0x4e, 0xc8, 0x1d, 0x8f,
		0x84, 0x9b, 0x56, 0x24, 0xd8, 0xa1, 0x7d, 0xe3, 0x7a, 0xae, 0x70, 0x75, 0x6a, 0x7a, 0x9e, 0x23,
		0x88, 0xda, 0x1e, 0x60, 0xff, 0x83, 0xc6, 0xfe, 0x7a, 0x77, 0x4f, 0xf6, 0x00, 0xfb, 0x6b, 0xdd,
		0x4d, 0xd5, 0xbf, 0x83, 0x6a, 0xe4, 0xae, 0xa9, 0xde, 0x9d, 0x52, 0x43, 0x2a, 0x39, 0x4e, 0xc7,
		0x02, 0xb0, 0x20, 0x4c, 0x78, 0x49, 0x47, 0x15, 0x2f, 0x11, 0x42, 0xe3, 0x54, 0xa8, 0xe0, 0xc3,
		0x9d, 0x17, 0x19, 0x7c, 0xf1, 0x09, 0x47, 0x45, 0x8e, 0xa9, 0x61, 0xba, 0x05, 0x9a, 0xa6, 0xee,
		0x54, 0xe4, 0x34, 0x7d, 0x92, 0x52, 0x8c, 0xf1, 0x7f, 0x43, 0x30, 0xdb, 0xe2, 0x1c, 0xb3, 0x2d,
		0x96, 0x88, 0x61, 0x8a, 0xbf, 0xd6, 0x51, 0x98, 0x98, 0x6d, 0xd1, 0x3c, 0xc7, 0x0c, 0xff, 0xa2,
		0x9e, 0x2e, 0xf3, 0xb0, 0xb0, 0x88, 0x0f, 0x83, 0x3b, 0xce, 0xc2, 0xc8, 0xbd, 0xb3, 0x05, 0xcd,
		0x00, 0xeb, 0x55, 0x92, 0xe8, 0xe7, 0x0e, 0x68, 0x72, 0x84, 0xd0, 0x44, 0xbb, 0x9f, 0xbb, 0x3b,
		0xf0, 0x83, 0x88, 0xb3, 0x34, 0xab, 0x61, 0xc7, 0x74, 0xe9, 0x84, 0x25, 0xba, 0xba, 0x9d, 0xab,
		0x09, 0xdb, 0x2d, 0x55, 0x52, 0x4d, 0xaf, 0x17, 0x4d, 0xef, 0xd2, 0x74, 0xa6, 0xaf, 0xa3, 0x33,
		0x7d, 0xf1, 0x6a, 0xc9, 0x98, 0x7a, 0x32, 0xa6, 0xa6, 0x4c, 0xaa, 0x2b, 0x22, 0xe0, 0xa2, 0xc9,
		0x7f, 0x64, 0x3d, 0x90, 0x08, 0x07, 0xdb, 0xaf, 0x60, 0x84, 0xc6, 0x4e, 0xb7, 0x88, 0xa0, 0xd6,
		0x64, 0x85, 0xa6, 0x56, 0xed, 0x09, 0xbd, 0x47, 0xb8, 0x72, 0x88, 0xe3, 0xac, 0xfc, 0x30, 0x70,
		0xf8, 0x5c, 0x95, 0x8a, 0xf3, 0x32, 0x4b, 0xb3, 0x5b, 0xdf, 0xa6, 0xb2, 0x55, 0xd5, 0xca, 0xa6,
		0xaf, 0x7c, 0x37, 0x69, 0x76, 0xfd, 0xd9, 0x37, 0x4b, 0x5f, 0x29, 0xbe, 0x0d, 0x46, 0x9e, 0x63,
		0xf9, 0x41, 0x9a, 0xe7, 0x9d, 0xbc, 0x9d, 0x25, 0x02, 0x2b, 0xe6, 0xc2, 0x5a, 0xb4, 0xa0, 0xc9,
		0xdf, 0x26, 0x6f, 0x7b, 0x42, 0xdd, 0xd0, 0xcd, 0x50, 0x27, 0x3a, 0xcb, 0x70, 0x6e, 0xbe, 0x30,
		0xa5, 0xfb, 0xac, 0x02, 0xd6, 0x38, 0x42, 0xd2, 0x85, 0x3d, 0x95, 0xad, 0x2f, 0x9e, 0x36, 0x95,
		0xee, 0xae, 0x2a, 0x1d, 0x34, 0x7c, 0x26, 0x8f, 0xdb, 0x8e, 0xeb, 0x0f, 0x58, 0xe0, 0x7b, 0x0f,
		0x74, 0x28, 0x7a, 0x81, 0x2a, 0x30, 0x34, 0x30, 0x34, 0x30, 0x34, 0x30, 0x34, 0x30, 0x34, 0x30,
		0x34, 0x30, 0x74, 0x2e, 0x00, 0x36, 0x6f, 0x3f, 0x81, 0xa0, 0xf7, 0x10, 0x41, 0xaf, 0x3f, 0x40,
		0xe0, 0xe7, 0x83, 0xc3, 0xcf, 0x24, 0x2d, 0xff, 0x29, 0x5b, 0xfd, 0x03, 0x5f, 0x02, 0x5f, 0x02,
		0x5f, 0xce, 0xbd, 0xd8, 0x47, 0xdb, 0x77, 0x6c, 0x11, 0x44, 0x0f, 0x04, 0x23, 0x75, 0xe9, 0xb1,
		0x2a, 0x6d, 0xaf, 0x7b, 0xca, 0x1e, 0xf7, 0x44, 0xbd, 0xed, 0xf7, 0xa5, 0x71, 0x38, 0x21, 0xc6,
		0x4e, 0x44, 0x3e, 0x1e, 0x77, 0xde, 0xda, 0x79, 0xb5, 0xd2, 0x84, 0xd1, 0x7a, 0xa9, 0x3e, 0x1f,
		0x45, 0xdc, 0xa2, 0x2a, 0x42, 0x28, 0x50, 0x81, 0xc6, 0x12, 0x5d, 0xc8, 0xca, 0xa1, 0x42, 0x37,
		0x6d, 0xf7, 0xb1, 0x55, 0xeb, 0x1c, 0x4a, 0x2b, 0xff, 0x49, 0xaf, 0x91, 0xd3, 0xa5, 0x92, 0xfc,
		0x53, 0x4a, 0x89, 0x22, 0xe9, 0x3c, 0xf8, 0xe3, 0x78, 0xa5, 0x9f, 0xdf, 0xc5, 0x9f, 0x6c, 0x71,
		0xfb, 0x53, 0xb6, 0xce, 0xcf, 0x3f, 0xa7, 0xeb, 0xfc, 0x94, 0x2d, 0xf3, 0x5d, 0x71, 0x1d, 0xfc,
		0x95, 0x8a, 0xaf, 0x42, 0xcf, 0xee, 0xe9, 0x17, 0x78, 0xcc, 0x95, 0x5e, 0x2d, 0x12, 0x44, 0x4d,
		0x38, 0x0a, 0xaf, 0x4a, 0x81, 0x92, 0xf7, 0xb5, 0x26, 0x5c, 0x3f, 0xca, 0xaa, 0x19, 0x5d, 0x2d,
		0xdb, 0x28, 0x91, 0xd2, 0x8c, 0x44, 0x78, 0xce, 0x4e, 0xed, 0x6a, 0x14, 0xc2, 0x7a, 0x6b, 0x54,
		0x86, 0x19, 0x08, 0xf6, 0x48, 0xdc, 0x72, 0x5f, 0xb8, 0x3d, 0xb5, 0x63, 0x9b, 0xdd, 0x36, 0x5a,
		0xa4, 0x83, 0x2b, 0x7a, 0xc6, 0x6d, 0x06, 0xae, 0xe8, 0xa9, 0x2b, 0x2a, 0xe5, 0x2b, 0x7a, 0xbf,
		0xf3, 0x87, 0xde, 0xad, 0xad, 0xd3, 0x36, 0x76, 0xc2, 0x3e, 0x53, 0x4a, 0x80, 0x61, 0x80, 0x61,
		0x80, 0x61, 0x1a, 0xdc, 0xe3, 0x71, 0xbb, 0x1f, 0xf1, 0x3e, 0x05, 0x0c, 0xbb, 0xd0, 0xa0, 0xf1,
		0x69, 0x15, 0xb6, 0xc4, 0x0f, 0xb1, 0xe0, 0xc3, 0xab, 0xec, 0x47, 0xf2, 0xf7, 0x6c, 0x22, 0xf5,
		0x57, 0x8b, 0xf6, 0x72, 0xf1, 0xdf, 0x26, 0xbf, 0x2c, 0xfe, 0x6d, 0x8a, 0x40, 0xf6, 0x36, 0x20,
		0x48, 0x92, 0x6c, 0x27, 0x0c, 0x06, 0xd2, 0x9d, 0xd2, 0xf5, 0xca, 0x29, 0xcd, 0x37, 0x9e, 0xea,
		0x2e, 0x3e, 0x24, 0x1e, 0xc2, 0xe4, 0x9f, 0x3b, 0x15, 0xd1, 0x0b, 0xd9, 0xd0, 0x39, 0xef, 0x54,
		0x28, 0x42, 0x8f, 0x46, 0xb2, 0xf6, 0x73, 0xfd, 0xa5, 0xbc, 0x07, 0x6b, 0xf2, 0x06, 0x69, 0xd3,
		0xa3, 0xe4, 0x25, 0xc6, 0x2f, 0x60, 0xf5, 0x6c, 0xdf, 0xba, 0xe1, 0x96, 0x1d, 0xc7, 0xee, 0xc0,
		0xe7, 0x0e, 0x55, 0x88, 0xd2, 0x40, 0x6a, 0xbe, 0x88, 0x94, 0xbc, 0xd1, 0x54, 0xfc, 0x52, 0x03,
		0x2a, 0x99, 0x53, 0x39, 0x8c, 0xe1, 0xbc, 0x07, 0x79, 0xc9, 0x52, 0x44, 0xb6, 0x1f, 0x0f, 0x5d,
		0xc1, 0xec, 0xde, 0xf8, 0x42, 0xab, 0x26, 0xb2, 0x5c, 0x26, 0xb8, 0x63, 0x80, 0xd9, 0x04, 0xc0,
		0x04, 0xc0, 0x44, 0x9c, 0x0f, 0x71, 0x3e, 0xa3, 0x71, 0x3e, 0x9d, 0xf0, 0x93, 0x81, 0x30, 0xdf,
		0xe2, 0x72, 0x4a, 0x10, 0xe7, 0x73, 0x78, 0xdc, 0x8b, 0xdc, 0x50, 0x2f, 0xc8, 0x37, 0x4f, 0x04,
		0x3d, 0xd0, 0x11, 0xe1, 0x3b, 0xe8, 0x3e, 0x88, 0xea, 0xcc, 0xbe, 0xa0, 0xf1, 0x55, 0x66, 0x9b,
		0x7e, 0xe0, 0xfe, 0x20, 0xd5, 0x8d, 0xfb, 0x3d, 0x58, 0xb4, 0x81, 0xc1, 0xa2, 0xeb, 0xb6, 0x98,
		0x72, 0xb0, 0xa8, 0x76, 0xa7, 0x1e, 0xcc, 0x11, 0x55, 0xb9, 0xce, 0x56, 0xf9, 0x64, 0x0b, 0xc1,
		0x23, 0x5f, 0x59, 0x44, 0x2b, 0xd7, 0xef, 0xd8, 0x6f, 0x36, 0xfb, 0xa3, 0xce, 0x2e, 0xad, 0x3f,
		0xfd, 0xf7, 0x7f, 0xfc, 0xe7, 0x9f, 0xff, 0xd9, 0x19, 0xd5, 0xeb, 0xcd, 0x76, 0xb5, 0xf6, 0xf8,
		0xea, 0xdb, 0xff, 0xfd, 0xbf, 0x93, 0xd7, 0x2f, 0x4f, 0x3f, 0x5f, 0xfd, 0xd7, 0x5b, 0xd6, 0xfd,
		0xa6, 0xb2, 0x97, 0xed, 0x98, 0x1d, 0x37, 0xee, 0x05, 0x77, 0x3c, 0xe2, 0x0e, 0xbb, 0x79, 0x60,
		0x9e, 0xe7, 0x84, 0x1a, 0xa8, 0x63, 0x95, 0x16, 0x9a, 0x30, 0x03, 0x7c, 0x1c, 0x34, 0xf8, 0x50,
		0x77, 0x39, 0x15, 0x5d, 0x4d, 0x43, 0x6a, 0xe0, 0xc1, 0xb7, 0x87, 0x6e, 0x8f, 0x49, 0x4f, 0x37,
		0x5b, 0x55, 0x02, 0xcb, 0x94, 0xa0, 0x02, 0xa0, 0x02, 0xa0, 0x02, 0xca, 0xaf, 0x02, 0x78, 0x9a,
		0x3d, 0x74, 0xe3, 0x5b, 0xee, 0xb0, 0x34, 0x32, 0xed, 0x6a, 0x76, 0x03, 0x7f, 0x8e, 0x20, 0x14,
		0x02, 0x14, 0xc2, 0x41, 0x2b, 0x84, 0x3f, 0x78, 0x14, 0xb0, 0x1b, 0x3b, 0x9d, 0x48, 0x12, 0x8c,
		0x7c, 0xc1, 0xa3, 0x76, 0x4b, 0x43, 0x3b, 0xa8, 0x04, 0x26, 0x66, 0x9d, 0x48, 0x2a, 0x75, 0x95,
		0xaf, 0xfe, 0xbb, 0x1d, 0xcf, 0x48, 0xa8, 0x9d, 0xba, 0x66, 0x17, 0xe4, 0xb2, 0xc4, 0x46, 0xea,
		0x88, 0x8d, 0x98, 0x8e, 0x8d, 0xd0, 0x4c, 0xd6, 0x40, 0xb0, 0xa4, 0x74, 0xc1, 0x05, 0x7e, 0x17,
		0x6a, 0x24, 0x31, 0xd2, 0xa7, 0x51, 0x9f, 0x0c, 0xb0, 0x70, 0x90, 0x23, 0x44, 0xd2, 0x92, 0x0f,
		0x16, 0x05, 0x23, 0xc1, 0x29, 0x66, 0x88, 0x2c, 0x90, 0x43, 0x21, 0x09, 0x0a, 0x49, 0x76, 0x2a,
		0x74, 0x9a, 0xc6, 0xae, 0x14, 0x43, 0x44, 0xce, 0x9a, 0x04, 0x75, 0x24, 0x17, 0x98, 0x22, 0x62,
		0x06, 0x57, 0x1b, 0x43, 0x7a, 0xf4, 0x88, 0x8f, 0x00, 0x6f, 0x93, 0xe2, 0xee, 0x95, 0xa3, 0x68,
		0x35, 0x2f, 0x5b, 0x97, 0xed, 0x8b, 0xe6, 0x25, 0x86, 0x89, 0x14, 0xf5, 0x74, 0x99, 0xeb, 0x5c,
		0xe7, 0x67, 0xca, 0xeb, 0x03, 0x13, 0xad, 0x01, 0xf5, 0x16, 0x2e, 0x50, 0x01, 0x96, 0x00, 0x96,
		0xd0, 0x09, 0x93, 0x45, 0xd4, 0x79, 0x49, 0xb3, 0xe3, 0x12, 0x2e, 0x3a, 0xad, 0x1e, 0xee, 0xc9,
		0x5c, 0xef, 0xd0, 0x6c, 0x62, 0xfe, 0x62, 0xbd, 0xad, 0xeb, 0xc7, 0xe2, 0x6a, 0xb9, 0xcc, 0xf6,
		0x7a, 0xcd, 0x47, 0xd6, 0x4c, 0xd4, 0x9f, 0xff, 0xff, 0xfa, 0x27, 0xba, 0x6b, 0xfe, 0x7e, 0x7c,
		0x07, 0xea, 0xe5, 0xea, 0xbf, 0x38, 0x59, 0x6c, 0xf8, 0x65, 0xad, 0xfc, 0x97, 0xa2, 0xde, 0xff,
		0xcf, 0xa7, 0x1f, 0x2d, 0x37, 0x4e, 0xbb, 0x5f, 0xc6, 0xa3, 0x30, 0x0c, 0x22, 0xc1, 0x1d, 0xcb,
		0xf5, 0xad, 0xf1, 0x56, 0x5a, 0x93, 0xad, 0x8c, 0xad, 0x40, 0xdc, 0xf2, 0xc8, 0x12, 0xb7, 0xb6,
		0x6f, 0x8d, 0x5f, 0x10, 0x97, 0xa4, 0x0a, 0xba, 0x24, 0xa5, 0x77, 0x4a, 0xb8, 0x34, 0x55, 0x62,
		0x30, 0x39, 0x9e, 0xce, 0xcf, 0xdc, 0xf0, 0xae, 0xcd, 0x7c, 0x7e, 0x2f, 0xd8, 0x6d, 0x10, 0x52,
		0x84, 0xbc, 0x9e, 0xa3, 0x0c, 0x98, 0x09, 0x98, 0x09, 0x98, 0xa9, 0xc1, 0x3d, 0xbb, 0xbf, 0x46,
		0x05, 0x78, 0xb8, 0x72, 0x28, 0xe5, 0x07, 0x83, 0xc0, 0x82, 0xc0, 0x82, 0xc0, 0x82, 0xc0, 0x82,
		0xcf, 0x1e, 0x72, 0x10, 0xf2, 0x88, 0x2a, 0xae, 0x38, 0x47, 0x0b, 0xd9, 0x4e, 0xe0, 0x3d, 0xe0,
		0x3d, 0x0d, 0xee, 0xa1, 0x69, 0xec, 0x5e, 0x86, 0xb0, 0x62, 0x21, 0x6a, 0x2c, 0x63, 0x68, 0xe6,
		0xb9, 0x43, 0x57, 0xe8, 0x2b, 0xb2, 0x05, 0x6a, 0x18, 0xb1, 0x0e, 0x55, 0x76, 0x84, 0xaa, 0x4c,
		0x7b, 0xc4, 0xfa, 0xd0, 0xbe, 0x67, 0x11, 0xef, 0x71, 0xf7, 0x8e, 0x3b, 0xba, 0x35, 0x55, 0x2b,
		0x1c, 0xb9, 0x8e, 0x38, 0x06, 0xdf, 0x14, 0x26, 0xc8, 0xa6, 0x1c, 0x27, 0x0c, 0xbe, 0x21, 0xf4,
		0x57, 0x4a, 0x37, 0xac, 0x46, 0xbb, 0x82, 0x6b, 0x59, 0x56, 0x2f, 0x08, 0x48, 0xd1, 0x54, 0x74,
		0xd1, 0x05, 0x97, 0xa6, 0x0b, 0xa3, 0xac, 0xf0, 0x9a, 0x12, 0x25, 0xea, 0x2e, 0xb1, 0x42, 0xd7,
		0x54, 0x75, 0xd1, 0x8c, 0x87, 0xa8, 0xab, 0x8c, 0x88, 0xc4, 0x64, 0xf1, 0xc8, 0x08, 0x2b, 0xc1,
		0x56, 0x8e, 0x8c, 0xba, 0x22, 0xec, 0x10, 0xce, 0xee, 0x30, 0x26, 0x0f, 0x62, 0xbc, 0xab, 0xb4,
		0x29, 0x31, 0x13, 0x79, 0x2f, 0x5f, 0xf0, 0x7d, 0xe6, 0x84, 0x17, 0x32, 0x5b, 0xb6, 0x0c, 0xc1,
		0x78, 0x53, 0xd8, 0xf2, 0x39, 0x9c, 0x79, 0x78, 0x03, 0x66, 0x4b, 0x10, 0xac, 0xa7, 0xd5, 0xd0,
		0x16, 0xa6, 0xcc, 0x6a, 0xdd, 0x0c, 0xfd, 0x62, 0x47, 0xbe, 0xeb, 0x0f, 0x98, 0xb8, 0x8d, 0x78,
		0x7c, 0x1b, 0x78, 0x0e, 0x0b, 0x7b, 0x82, 0xce, 0x19, 0x5f, 0x4f, 0x1e, 0xee, 0x38, 0xdc, 0x71,
		0xb8, 0xe3, 0x25, 0x76, 0xc7, 0x43, 0x1e, 0xf5, 0xb8, 0x2f, 0x68, 0xac, 0xde, 0x44, 0x5e, 0xcf,
		0xe1, 0x92, 0x2b, 0xfa, 0x77, 0x75, 0xb8, 0x75, 0xfb, 0xe6, 0x92, 0x37, 0xea, 0x38, 0x34, 0xf8,
		0xe2, 0xf0, 0xc5, 0xe1, 0x8b, 0xc3, 0x17, 0x87, 0x2f, 0x0e, 0x5f, 0xfc, 0x68, 0x7c, 0x71, 0x0c,
		0x32, 0x4f, 0x07, 0x47, 0xf0, 0xbb, 0xd0, 0x3f, 0x25, 0x28, 0x96, 0xb1, 0xc8, 0x67, 0x48, 0xbc,
		0xbf, 0x0b, 0xfd, 0xcf, 0x99, 0xcb, 0xfe, 0x21, 0x5d, 0x58, 0xa9, 0x67, 0x95, 0xd3, 0x14, 0x49,
		0xcc, 0xcd, 0x2a, 0xa7, 0x28, 0x8c, 0x40, 0x31, 0xa6, 0x41, 0x43, 0x88, 0x0a, 0x26, 0xf3, 0x7a,
		0x13, 0xad, 0x67, 0x8c, 0xe0, 0x7f, 0xb4, 0x9e, 0x41, 0xeb, 0x99, 0x83, 0x3d, 0x13, 0xdc, 0x10,
		0x59, 0x03, 0x4f, 0xfe, 0xc5, 0x7b, 0x82, 0x14, 0x9e, 0x2c, 0x12, 0x04, 0x3c, 0x01, 0x3c, 0x01,
		0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x91, 0x0c, 0x1b, 0x71, 0x5f,
		0x90, 0x41, 0x93, 0x79, 0x62, 0x80, 0x25, 0x80, 0x25, 0x80, 0x25, 0x80, 0x25, 0x80, 0x25, 0x80,
		0x25, 0x80, 0x25, 0x47, 0x0d, 0x4b, 0x8e, 0x6c, 0x1e, 0xbc, 0xc2, 0x90, 0x0f, 0xcb, 0x48, 0x06,
		0xaf, 0x0c, 0xb3, 0xdf, 0xf9, 0x7d, 0x18, 0x44, 0x82, 0x85, 0x81, 0xe7, 0xf6, 0x1e, 0x34, 0x06,
		0xa7, 0x2c, 0x90, 0xc1, 0xfc, 0x77, 0xe3, 0x98, 0x11, 0x13, 0x54, 0xd4, 0x55, 0x92, 0xfe, 0xb8,
		0x35, 0x8f, 0xdb, 0xfd, 0x88, 0xf7, 0x75, 0xe6, 0x2f, 0x5e, 0xa8, 0x4d, 0x96, 0x9e, 0x6a, 0x41,
		0x16, 0x85, 0x81, 0x77, 0x95, 0x38, 0x73, 0xae, 0x3f, 0x18, 0x0b, 0xde, 0xec, 0xef, 0x97, 0xff,
		0x9c, 0x6a, 0xad, 0x12, 0xa8, 0x9b, 0xbe, 0xed, 0x7a, 0xa3, 0x88, 0x33, 0x87, 0x0b, 0xde, 0x53,
		0x32, 0x0a, 0xd3, 0x33, 0x58, 0x25, 0x85, 0xc1, 0x4d, 0x50, 0x3b, 0x87, 0x38, 0xb8, 0x89, 0xfb,
		0xf6, 0x8d, 0xc7, 0xd9, 0x4d, 0xdf, 0xd1, 0x0f, 0x01, 0xcd, 0xd1, 0x42, 0xd3, 0x5a, 0x44, 0x80,
		0x10, 0x01, 0xd2, 0xe0, 0x9e, 0xdd, 0x37, 0xad, 0x2d, 0x24, 0x04, 0xdd, 0xb7, 0x63, 0xc1, 0x12,
		0x6b, 0x1b, 0xdc, 0xf1, 0x48, 0x5f, 0x03, 0x2d, 0x92, 0x83, 0x12, 0x82, 0x12, 0x82, 0x12, 0x3a,
		0x32, 0x25, 0x74, 0x64, 0x01, 0x27, 0x5d, 0x4f, 0x85, 0x3e, 0xfa, 0xf4, 0x7d, 0xb6, 0xa2, 0xbf,
		0x4e, 0x17, 0x54, 0x02, 0xd7, 0x70, 0x10, 0xd9, 0x3d, 0xde, 0x1f, 0x79, 0x2c, 0xe2, 0xb1, 0xb0,
		0x23, 0xa1, 0xee, 0x19, 0xae, 0x50, 0x82, 0x63, 0x08, 0xc7, 0xf0, 0x20, 0x27, 0xfa, 0x62, 0x6c,
		0x1e, 0x50, 0x19, 0x50, 0x59, 0x09, 0x51, 0xd9, 0xe1, 0x8c, 0xcd, 0x2b, 0xc4, 0xc5, 0xbc, 0xe5,
		0x5e, 0xc8, 0x23, 0x96, 0x8d, 0x14, 0xd7, 0x57, 0x65, 0x8b, 0xe4, 0x50, 0xe9, 0x04, 0x65, 0x06,
		0x65, 0x86, 0x38, 0xd7, 0xb6, 0x35, 0x7a, 0x76, 0x2c, 0x26, 0x2e, 0x03, 0x13, 0xee, 0x90, 0x40,
		0x11, 0xad, 0x92, 0x84, 0x32, 0x82, 0x32, 0x82, 0x32, 0xd2, 0xe0, 0x1e, 0xc7, 0x16, 0x9c, 0xd9,
		0xbe, 0x93, 0x8a, 0x13, 0x73, 0xb8, 0x27, 0x6c, 0x0a, 0xc5, 0xf4, 0x46, 0x83, 0xc6, 0x07, 0xee,
		0x0f, 0xd2, 0x68, 0xd1, 0x61, 0x56, 0x61, 0x36, 0x51, 0x86, 0xa9, 0x74, 0x16, 0x26, 0xca, 0x30,
		0xcf, 0x9a, 0x28, 0xbf, 0x2c, 0xe8, 0xe9, 0xae, 0x86, 0x46, 0xf8, 0x64, 0x0b, 0xc1, 0x23, 0x5f,
		0x5b, 0x25, 0x54, 0x3a, 0x1d, 0xe7, 0x6b, 0xeb, 0x89, 0x25, 0x3f, 0x9a, 0x93, 0x1f, 0xbf, 0x66,
		0x3f, 0xae, 0x16, 0x7e, 0x54, 0x3b, 0x9d, 0x93, 0x4e, 0xc7, 0x79, 0x55, 0x7b, 0x5b, 0xfd, 0xed,
		0xf1, 0xba, 0xd3, 0x79, 0xd5, 0xe9, 0xb0, 0xee, 0xc2, 0x27, 0x6a, 0x95, 0x83, 0xbc, 0x20, 0x33,
		0x89, 0xb2, 0xb3, 0x9e, 0x1d, 0xda, 0x37, 0xae, 0xe7, 0x8a, 0x07, 0x7d, 0xdc, 0xb6, 0x8e, 0xe8,
		0x8e, 0x07, 0x25, 0x01, 0xb9, 0x01, 0xb9, 0xed, 0x02, 0xb9, 0x69, 0x0f, 0x4a, 0xb2, 0xfb, 0x2e,
		0x8b, 0xed, 0xbe, 0x4b, 0xd7, 0x90, 0x79, 0x4a, 0x91, 0xa6, 0x07, 0x73, 0x03, 0x3d, 0x98, 0x8b,
		0x17, 0x5d, 0x63, 0x22, 0x6c, 0x4c, 0x94, 0x4d, 0x8a, 0x34, 0x11, 0xd6, 0xd1, 0xe4, 0x3f, 0x5d,
		0x51, 0x9f, 0x12, 0xea, 0x07, 0xd1, 0x17, 0x3b, 0x72, 0xd2, 0xc2, 0xe4, 0x88, 0xc7, 0x3c, 0xba,
		0xe3, 0x0e, 0xfd, 0x68, 0xe5, 0xb5, 0xdf, 0x42, 0x74, 0xc6, 0x34, 0xed, 0xd9, 0xc9, 0x55, 0x84,
		0x09, 0x55, 0x61, 0x5c, 0x65, 0x98, 0x52, 0x1d, 0xc6, 0x55, 0x88, 0x71, 0x55, 0x52, 0x84, 0x4a,
		0xa1, 0x51, 0x2d, 0x84, 0x8e, 0xb1, 0x45, 0xda, 0xee, 0x7d, 0x85, 0x7b, 0xf5, 0x83, 0xd5, 0xcf,
		0xe2, 0x84, 0x46, 0x59, 0x06, 0x7d, 0x13, 0x98, 0xf1, 0x71, 0x21, 0x11, 0xb1, 0x4a, 0x4e, 0xa9,
		0x42, 0x05, 0x43, 0x05, 0x43, 0x05, 0x1f, 0xb1, 0x0a, 0xa6, 0x19, 0xee, 0xfd, 0xac, 0x1a, 0x6e,
		0x51, 0xf6, 0x3a, 0xd7, 0x2a, 0x8e, 0x30, 0xa0, 0xda, 0x77, 0xea, 0x00, 0xfc, 0x83, 0x3f, 0x10,
		0x69, 0xf1, 0xca, 0x07, 0x37, 0x16, 0xef, 0x84, 0x20, 0x72, 0x28, 0x3e, 0xba, 0xfe, 0x7b, 0x8f,
		0x27, 0xe2, 0x49, 0x14, 0xaa, 0xae, 0x7c, 0xb4, 0xef, 0xe7, 0x28, 0x36, 0xde, 0xb4, 0x5a, 0xed,
		0x8b, 0x56, 0xab, 0x7e, 0x71, 0x76, 0x51, 0xbf, 0x3c, 0x3f, 0x6f, 0xb4, 0x1b, 0x14, 0x93, 0x5e,
		0x7e, 0x8a, 0x1c, 0x1e, 0x71, 0xe7, 0xbb, 0x64, 0x57, 0xfd, 0x91, 0xe7, 0xed, 0xf4, 0x70, 0x89,
		0xfa, 0x6c, 0x4f, 0xe9, 0xd1, 0xd7, 0x49, 0x2f, 0xd7, 0xed, 0x9e, 0xae, 0x09, 0xc3, 0x9e, 0x12,
		0x05, 0x7f, 0x2c, 0xf2, 0x9a, 0xea, 0xbf, 0x8d, 0x57, 0xff, 0x73, 0xb6, 0xf8, 0xe9, 0x3f, 0xfc,
		0x65, 0xba, 0xf6, 0xcf, 0xef, 0xfa, 0xee, 0x2f, 0xc9, 0xd2, 0xf7, 0x70, 0xc6, 0x1a, 0x49, 0x5d,
		0xc4, 0x8a, 0xa5, 0x20, 0x28, 0x8d, 0x20, 0xc6, 0x8b, 0x88, 0xe6, 0x21, 0x9a, 0x87, 0x89, 0x6a,
		0xeb, 0xb9, 0x6f, 0xe4, 0xfa, 0xa2, 0xd1, 0x26, 0x9c, 0xa6, 0xd6, 0xc6, 0x34, 0x35, 0x49, 0xa2,
		0x98, 0xa6, 0x66, 0xc8, 0x1d, 0xb2, 0x8c, 0x4f, 0x53, 0x6b, 0x9f, 0x9f, 0x9f, 0x61, 0xb6, 0x39,
		0xb1, 0x2f, 0x8c, 0x19, 0x3b, 0x45, 0x62, 0xff, 0x1d, 0x61, 0xfe, 0xd2, 0x8c, 0xdd, 0xd9, 0x0e,
		0xf1, 0xcb, 0x3c, 0x88, 0xc7, 0x1f, 0x0d, 0x6f, 0x78, 0xc4, 0x82, 0xfe, 0x64, 0xaf, 0x09, 0x3a,
		0xca, 0xae, 0xa1, 0x89, 0x0a, 0x67, 0xd4, 0xc9, 0x94, 0x02, 0x86, 0xef, 0x73, 0x63, 0x59, 0x2d,
		0x98, 0x4d, 0x00, 0xaf, 0xd1, 0x58, 0x76, 0xa7, 0xf8, 0xeb, 0x88, 0x2a, 0x9a, 0x09, 0x61, 0x31,
		0x8a, 0x9a, 0x0d, 0xc1, 0xdd, 0x82, 0x5a, 0xdd, 0x0b, 0xdb, 0xe3, 0xe3, 0xf6, 0xf4, 0x44, 0xf7,
		0xaf, 0x56, 0x49, 0xe2, 0x66, 0x3b, 0xd0, 0x09, 0xd0, 0x09, 0xd0, 0x49, 0x99, 0xd1, 0x49, 0x03,
		0xe8, 0xa4, 0x2c, 0xe8, 0xe4, 0xac, 0x5d, 0xaf, 0x03, 0x9c, 0x1c, 0x1a, 0x38, 0x39, 0xb2, 0xfe,
		0x63, 0x9a, 0xfd, 0xb0, 0x8c, 0xc7, 0xd1, 0xca, 0xd0, 0x7d, 0xcc, 0x1d, 0x92, 0xf4, 0xc1, 0x5f,
		0x24, 0x83, 0x3e, 0xf8, 0xc6, 0x41, 0x24, 0xfa, 0x8e, 0xa9, 0x6b, 0x2a, 0xf4, 0xc1, 0xdf, 0x9d,
		0xba, 0x09, 0xef, 0x5a, 0x6c, 0xe4, 0xbb, 0x3d, 0x3b, 0xd6, 0x68, 0x74, 0xb8, 0x40, 0x05, 0x4d,
		0x0e, 0xa1, 0x6c, 0x0e, 0xb2, 0xc9, 0x61, 0xda, 0xc5, 0x8b, 0x6c, 0x06, 0xe2, 0x22, 0x39, 0x24,
		0xab, 0x10, 0x0e, 0x42, 0x38, 0x48, 0x33, 0x1c, 0x84, 0x29, 0x88, 0x46, 0xc3, 0x41, 0x48, 0x56,
		0x95, 0x26, 0x1c, 0x84, 0x29, 0x88, 0x87, 0x1b, 0x14, 0x7a, 0x8d, 0xfe, 0xcb, 0xc8, 0x52, 0x01,
		0x96, 0x1c, 0x06, 0x2c, 0x41, 0xff, 0x65, 0x49, 0x45, 0x76, 0xc7, 0x23, 0xe1, 0xc6, 0x9c, 0xb9,
		0xe1, 0x5d, 0x9b, 0xf9, 0xfc, 0x5e, 0xb0, 0xdb, 0x20, 0xa4, 0x70, 0xb7, 0x9e, 0xa3, 0x0c, 0x15,
		0x07, 0x15, 0x07, 0x15, 0xa7, 0xc1, 0x3d, 0x47, 0xd2, 0x95, 0x39, 0x08, 0x79, 0x44, 0x05, 0xb1,
		0xe6, 0x68, 0x21, 0xf0, 0x03, 0xf5, 0x03, 0xf5, 0xa3, 0xc1, 0x3d, 0x34, 0x4d, 0x1e, 0x8e, 0x06,
		0x61, 0x65, 0x0c, 0xcd, 0x3c, 0x77, 0xe8, 0x0a, 0x7d, 0x45, 0xb6, 0x40, 0x6d, 0xc7, 0x8d, 0x49,
		0x81, 0xa4, 0xa0, 0xca, 0x76, 0xa1, 0xca, 0xb4, 0x1b, 0x93, 0x0e, 0xed, 0x7b, 0x16, 0xf1, 0x1e,
		0x77, 0xef, 0xb8, 0xa3, 0x9b, 0x5e, 0x5a, 0xe1, 0xc8, 0x75, 0xc4, 0xd1, 0xe0, 0xa0, 0x30, 0x41,
		0xa6, 0x16, 0x68, 0x63, 0x82, 0x6d, 0x4c, 0xc0, 0x4d, 0x0a, 0xba, 0x9e, 0xc0, 0x6b, 0x0a, 0x3e,
		0x1d, 0x96, 0x59, 0xe1, 0x3e, 0xed, 0x64, 0xd6, 0xb2, 0xac, 0x5e, 0xa0, 0xc1, 0x81, 0x24, 0x51,
		0xe2, 0x1a, 0xe8, 0x29, 0x5d, 0x34, 0x38, 0x30, 0xde, 0xe0, 0x80, 0x3a, 0x39, 0x76, 0x08, 0x67,
		0x77, 0xec, 0x5d, 0x0e, 0x34, 0xa0, 0xf8, 0x17, 0x3b, 0xf2, 0x5d, 0x7f, 0xc0, 0xc4, 0x6d, 0xc4,
		0xe3, 0xdb, 0xc0, 0x73, 0x58, 0xd8, 0x13, 0x74, 0x00, 0x6d, 0x3d, 0x79, 0x40, 0x34, 0x40, 0x34,
		0x40, 0xb4, 0x12, 0x43, 0xb4, 0x90, 0x47, 0x3d, 0xee, 0x0b, 0x7b, 0xc0, 0x09, 0x61, 0xda, 0x39,
		0x60, 0x9a, 0xa2, 0xcd, 0x47, 0x1f, 0xaa, 0xbd, 0x83, 0x69, 0x8d, 0x3a, 0x0e, 0x0d, 0xf8, 0x6c,
		0x17, 0x11, 0xbb, 0xf2, 0x76, 0xa1, 0x9a, 0xbf, 0x48, 0x71, 0x4a, 0x10, 0x5c, 0xb7, 0xc8, 0xaf,
		0xcc, 0xfd, 0x10, 0xde, 0xb5, 0xfe, 0x5f, 0xb6, 0xc0, 0xcf, 0x19, 0xaa, 0xfb, 0x90, 0xae, 0xaf,
		0xc4, 0x29, 0x8f, 0x71, 0xf8, 0x93, 0xbc, 0xa4, 0xe4, 0x19, 0xba, 0x28, 0x28, 0x41, 0x1a, 0xa4,
		0x14, 0xd0, 0x1b, 0x05, 0x25, 0xa5, 0x2e, 0x28, 0xa1, 0x4a, 0xf9, 0x2c, 0xeb, 0x23, 0x07, 0x77,
		0x8a, 0xa0, 0x88, 0xa0, 0x88, 0x70, 0xa7, 0x88, 0xd6, 0x8f, 0xc7, 0x9d, 0x22, 0xdc, 0x29, 0x3a,
		0xd8, 0x33, 0xc1, 0x9d, 0xa2, 0x35, 0xf0, 0xe4, 0x5f, 0xbc, 0x27, 0x48, 0xe1, 0xc9, 0x22, 0x41,
		0xc0, 0x13, 0xc0, 0x13, 0xc0, 0x13, 0xc0, 0x13, 0xc0, 0x13, 0xc0, 0x13, 0xc0, 0x13, 0xc0, 0x13,
		0xb9, 0x4d, 0x8e, 0xb9, 0x2f, 0xc8, 0xa0, 0xc9, 0x3c, 0x31, 0xc0, 0x12, 0xc0, 0x12, 0xc0, 0x12,
		0xc0, 0x12, 0xc0, 0x12, 0xc0, 0x12, 0xc0, 0x92, 0xa3, 0x86, 0x25, 0x47, 0xd6, 0x9e, 0x57, 0xa3,
		0x8b, 0xa3, 0x65, 0xb2, 0xce, 0xa0, 0x24, 0x7d, 0x32, 0xdb, 0x24, 0x7d, 0x32, 0xdb, 0xe8, 0x93,
		0x59, 0x1c, 0x80, 0x44, 0x9f, 0x4c, 0x75, 0xfd, 0x84, 0x3e, 0x99, 0xf0, 0xce, 0xe0, 0x9d, 0xc1,
		0x3b, 0x83, 0x77, 0x06, 0xef, 0x0c, 0xde, 0x19, 0xbc, 0xb3, 0xd2, 0x79, 0x67, 0xe8, 0x93, 0x89,
		0x9a, 0x5f, 0xc0, 0x92, 0x03, 0x81, 0x25, 0xe8, 0x93, 0x29, 0xb5, 0x46, 0x34, 0xa3, 0x83, 0x1a,
		0x83, 0x1a, 0x2b, 0x9f, 0x1a, 0x43, 0x33, 0x3a, 0xa9, 0x35, 0xa2, 0x19, 0x1d, 0x54, 0x19, 0x54,
		0x19, 0xa5, 0x2a, 0x43, 0x33, 0x3a, 0x6b, 0x27, 0x82, 0x4b, 0x29, 0xc0, 0xc6, 0x04, 0x99, 0x5a,
		0xa0, 0x8d, 0x09, 0xb6, 0x31, 0x01, 0x37, 0x29, 0xe8, 0x44, 0x81, 0x17, 0x34, 0xa3, 0xcb, 0x43,
		0x0a, 0xcd, 0xe8, 0xca, 0x1c, 0xcd, 0x34, 0x17, 0xd5, 0x24, 0x12, 0x93, 0xc5, 0x23, 0x43, 0x33,
		0xba, 0x62, 0xcf, 0x0e, 0xcd, 0xe8, 0x94, 0x0f, 0x05, 0xcd, 0xe8, 0x00, 0xd1, 0x00, 0xd1, 0x00,
		0xd1, 0x96, 0x22, 0x1f, 0x68, 0x46, 0x57, 0x26, 0x98, 0x86, 0xbe, 0x66, 0x7b, 0x07, 0xd3, 0xd0,
		0x8c, 0x0e, 0xf8, 0x6c, 0x37, 0x11, 0xbb, 0x52, 0x37, 0xa3, 0x6b, 0x97, 0xbe, 0x19, 0x5d, 0x7b,
		0x3f, 0x9b, 0xd1, 0xa1, 0xeb, 0x13, 0x3d, 0x28, 0x47, 0xe2, 0xa3, 0x54, 0x60, 0x1b, 0x15, 0xb2,
		0xa8, 0x90, 0x35, 0x0b, 0x90, 0x51, 0x21, 0x5b, 0xbe, 0xf8, 0x24, 0x2a, 0x64, 0x0d, 0xe1, 0x5a,
		0x74, 0x7d, 0x02, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c, 0x01, 0x3c,
		0x39, 0x4a, 0x78, 0x82, 0xae, 0x4f, 0x80, 0x25, 0x80, 0x25, 0x80, 0x25, 0x80, 0x25, 0x80, 0x25,
		0x80, 0x25, 0x80, 0x25, 0x26, 0x60, 0xc9, 0xf1, 0x75, 0x7d, 0x6a, 0x97, 0xa9, 0xeb, 0x53, 0xbb,
		0x44, 0x5d, 0x9f, 0x3c, 0x3b, 0x16, 0x8c, 0xc7, 0xc2, 0xbe, 0xf1, 0xdc, 0xf8, 0x96, 0x3b, 0xea,
		0x9d, 0x9f, 0x56, 0x28, 0xa9, 0x75, 0x7f, 0xaa, 0xab, 0x76, 0x7f, 0x6a, 0xa2, 0xfb, 0x13, 0xba,
		0x3f, 0x15, 0x01, 0x0c, 0xa7, 0xa7, 0xef, 0xd8, 0x82, 0x33, 0xdb, 0x77, 0x98, 0x70, 0x87, 0x9c,
		0x39, 0xdc, 0x13, 0xb6, 0x0a, 0x0f, 0x4c, 0x2e, 0xe4, 0xbd, 0x51, 0x78, 0xf6, 0x03, 0xf7, 0x07,
		0xa9, 0xa2, 0x54, 0xc3, 0x83, 0x1a, 0xa8, 0x98, 0x02, 0xff, 0x4d, 0xc1, 0x46, 0x53, 0xb7, 0xe0,
		0x95, 0x1a, 0x5c, 0xd0, 0x81, 0x0a, 0x9d, 0x52, 0x68, 0x0a, 0x60, 0x37, 0xdd, 0xe3, 0xb3, 0xe6,
		0xe1, 0xee, 0x71, 0x41, 0xc0, 0xa9, 0xab, 0x20, 0xa1, 0x9f, 0x6c, 0x21, 0x78, 0xe4, 0x2b, 0x8b,
		0x68, 0xa5, 0xd3, 0x71, 0xbe, 0xb6, 0x9e, 0x58, 0xf2, 0xa3, 0x39, 0xf9, 0xf1, 0x6b, 0xf6, 0xe3,
		0x6a, 0xe1, 0x47, 0xb5, 0xd3, 0x39, 0xe9, 0x74, 0x9c, 0x57, 0xb5, 0xb7, 0xd5, 0xdf, 0x1e, 0xaf,
		0x3b, 0x9d, 0x57, 0x9d, 0x0e, 0xeb, 0x2e, 0x7c, 0xa2, 0x26, 0xaf, 0x83, 0xbb, 0xa5, 0xc1, 0x28,
		0x77, 0x99, 0x51, 0xd1, 0x42, 0x27, 0x29, 0x0d, 0xe0, 0x12, 0xe0, 0x92, 0x83, 0xc6, 0x25, 0x7a,
		0x2d, 0x1a, 0x74, 0x5a, 0x33, 0x28, 0xb6, 0x64, 0x30, 0xa8, 0x36, 0xfc, 0x40, 0xb8, 0x7d, 0xb7,
		0x97, 0x6e, 0x06, 0xe3, 0x51, 0x14, 0x44, 0xac, 0x17, 0x38, 0x5c, 0x53, 0x91, 0x3c, 0x47, 0x15,
		0xaa, 0x05, 0xaa, 0x05, 0xaa, 0xe5, 0x78, 0x55, 0x4b, 0x3c, 0xba, 0x31, 0xa3, 0x5d, 0x26, 0x84,
		0xa1, 0x60, 0xa0, 0x60, 0xa0, 0x60, 0x8e, 0x44, 0xc1, 0xa8, 0x75, 0xbf, 0x5b, 0xd4, 0x25, 0x2a,
		0x5d, 0xef, 0xa0, 0x36, 0xa0, 0x36, 0xa0, 0x36, 0xf6, 0x52, 0x6d, 0x04, 0x3d, 0xdb, 0x63, 0x76,
		0xac, 0xa1, 0x34, 0x26, 0x14, 0x30, 0xbb, 0x03, 0x2a, 0xe3, 0x20, 0x67, 0x77, 0xc4, 0xcc, 0x1f,
		0x0d, 0x6f, 0x78, 0x44, 0xd0, 0x1e, 0x7b, 0x4a, 0x0a, 0xcd, 0xb1, 0x51, 0x5b, 0xb7, 0x53, 0x61,
		0x53, 0x13, 0x3a, 0x45, 0xe1, 0xd3, 0xb7, 0xdb, 0xab, 0xa2, 0x34, 0x12, 0x81, 0x1f, 0x0c, 0x83,
		0x51, 0xcc, 0xe2, 0x87, 0x58, 0xf0, 0xa1, 0x9e, 0x64, 0x59, 0xa8, 0xb6, 0xdb, 0x40, 0x8c, 0xb8,
		0xd7, 0x1a, 0xaa, 0xed, 0xf4, 0x8f, 0x02, 0xd5, 0x76, 0x85, 0x3f, 0xdd, 0x2d, 0x77, 0xd7, 0xe8,
		0x90, 0xfb, 0x0e, 0x1b, 0x78, 0xc1, 0x8d, 0x1a, 0xa0, 0x5f, 0xd1, 0xb0, 0xab, 0x24, 0x01, 0x5a,
		0x00, 0x5a, 0x00, 0x5a, 0x34, 0xb8, 0xe7, 0x26, 0x08, 0x3c, 0x6e, 0x93, 0xb4, 0xc1, 0x6f, 0xec,
		0x81, 0x32, 0x52, 0x0e, 0x2e, 0x3c, 0xab, 0x8b, 0x14, 0x83, 0x0d, 0x50, 0x45, 0x50, 0x45, 0x50,
		0x45, 0x7b, 0xaf, 0x8a, 0x8c, 0xc6, 0x87, 0xfe, 0xc1, 0x1f, 0x74, 0x42, 0x34, 0x95, 0x0f, 0x6e,
		0x2c, 0xde, 0x09, 0xa1, 0x18, 0x64, 0xfa, 0xe8, 0xfa, 0xef, 0x3d, 0x9e, 0xf0, 0xa6, 0x22, 0xf4,
		0x4e, 0xbc, 0x8c, 0x39, 0x0a, 0x0a, 0x9e, 0x5a, 0xe5, 0xa7, 0xc8, 0xe1, 0x11, 0x77, 0xbe, 0x4b,
		0xf6, 0xc1, 0x1f, 0x79, 0xde, 0x91, 0x5d, 0xfa, 0xd0, 0xb0, 0x2d, 0xb4, 0x17, 0x3e, 0x3e, 0x24,
		0x0b, 0x79, 0x17, 0x57, 0x4a, 0x93, 0x1e, 0x48, 0xb4, 0x39, 0x8f, 0xb8, 0xdf, 0xe3, 0xba, 0x69,
		0x82, 0x39, 0x4a, 0x05, 0x67, 0x18, 0x91, 0x2e, 0x40, 0xba, 0xa0, 0x10, 0x4b, 0xab, 0x7f, 0xfb,
		0x57, 0x23, 0x0e, 0xa9, 0x19, 0x7f, 0x2c, 0xcb, 0xed, 0x0e, 0x5c, 0xee, 0x30, 0x15, 0x47, 0x24,
		0x8f, 0x1f, 0xe2, 0x92, 0x47, 0x29, 0x6e, 0x3c, 0x0c, 0x6d, 0xd7, 0x17, 0xdc, 0x4f, 0x60, 0x05,
		0x1b, 0x44, 0xc1, 0x28, 0x54, 0xb7, 0xd4, 0xab, 0xa4, 0x50, 0x0c, 0x04, 0x53, 0x7d, 0xd0, 0xa6,
		0x3a, 0x16, 0x91, 0xeb, 0x0f, 0xb4, 0xae, 0x62, 0x96, 0x40, 0x07, 0xf8, 0xfc, 0x5e, 0xb0, 0xdb,
		0x20, 0x64, 0x31, 0xf7, 0xfa, 0xea, 0xf2, 0xbf, 0x48, 0x06, 0x30, 0x1d, 0xb2, 0x7f, 0xd0, 0xb2,
		0xaf, 0x1e, 0x08, 0x53, 0x0c, 0x80, 0x99, 0x11, 0xfe, 0x90, 0xf3, 0x88, 0xd9, 0x8e, 0x13, 0xf1,
		0x58, 0xa3, 0x98, 0x6f, 0x81, 0x0a, 0x44, 0x1f, 0xa2, 0x7f, 0xd0, 0xa2, 0xef, 0x86, 0x13, 0x5e,
		0x67, 0x5f, 0x5c, 0x71, 0xcb, 0xfe, 0x08, 0x7c, 0xae, 0xa3, 0x07, 0x2e, 0x15, 0x9e, 0x1d, 0xbf,
		0x45, 0xe1, 0xfe, 0xfa, 0x6c, 0x0f, 0xee, 0x5a, 0x8a, 0x12, 0xbf, 0x1e, 0x08, 0x69, 0xd0, 0xd0,
		0xbd, 0xf9, 0x3e, 0x25, 0x54, 0xad, 0x5e, 0xd7, 0xd9, 0x65, 0xf7, 0xf1, 0xba, 0xc1, 0x2e, 0xbb,
		0xd9, 0xaf, 0x8d, 0xf4, 0x47, 0xf6, 0x7b, 0xf3, 0xba, 0xce, 0x5a, 0x93, 0xdf, 0xcf, 0xaf, 0xeb,
		0xec, 0xbc, 0x5b, 0xeb, 0x74, 0x4e, 0x6a, 0x5f, 0xcf, 0x9e, 0xe4, 0x1f, 0xac, 0x14, 0x5d, 0x4f,
		0xf2, 0x7a, 0x87, 0xac, 0xd2, 0x26, 0x11, 0x98, 0xb2, 0x32, 0xcd, 0xd5, 0x63, 0x72, 0xb4, 0x36,
		0xeb, 0xbf, 0x63, 0xdf, 0x77, 0xbf, 0xd6, 0x5f, 0xb7, 0x9e, 0x6a, 0x57, 0xb5, 0xea, 0xf2, 0xdf,
		0x5d, 0xd5, 0xbe, 0xd6, 0x5f, 0x9f, 0x3f, 0x55, 0xab, 0x6b, 0xfe, 0xe5, 0xed, 0x3a, 0x1a, 0xb5,
		0xc7, 0x6a, 0xb5, 0x3a, 0x66, 0x97, 0x05, 0x16, 0xba, 0xae, 0x37, 0xba, 0x6f, 0xd3, 0x5f, 0xb3,
		0xff, 0x4e, 0x99, 0x30, 0xd7, 0x87, 0x6b, 0xb5, 0xea, 0x9f, 0x4f, 0x5e, 0xd5, 0xde, 0xea, 0x66,
		0x59, 0xab, 0xd5, 0xeb, 0x7f, 0x5e, 0x75, 0x5f, 0x5d, 0xd5, 0xbe, 0xb6, 0x9f, 0x26, 0xbf, 0xa7,
		0xff, 0xad, 0x3d, 0x56, 0x4f, 0xbe, 0xe9, 0x74, 0x4e, 0x4e, 0xbe, 0xa9, 0x65, 0xef, 0x30, 0xfe,
		0xdc, 0x37, 0xd9, 0xbf, 0xbe, 0xbd, 0xba, 0x5a, 0xf9, 0x2b, 0xaa, 0x25, 0x5d, 0xff, 0xf3, 0xcf,
		0xdd, 0x57, 0xb5, 0xea, 0x9f, 0xab, 0xc3, 0xc1, 0x50, 0xd4, 0x3b, 0x9d, 0x93, 0xfa, 0x63, 0x56,
		0xe5, 0x99, 0xfd, 0xee, 0x05, 0xd5, 0xfa, 0xa2, 0x60, 0x56, 0xe7, 0x76, 0x6a, 0x2c, 0x98, 0xf3,
		0x42, 0x9c, 0xfe, 0x9a, 0x6c, 0x6f, 0xb5, 0x9e, 0xfd, 0x5e, 0xed, 0x74, 0x9c, 0xe4, 0x1c, 0xcf,
		0x9e, 0x6a, 0x8f, 0x5c, 0xdc, 0xf2, 0xc8, 0xe7, 0x82, 0x55, 0x17, 0xfe, 0xa9, 0xf1, 0x54, 0x3d,
		0xbd, 0xb6, 0x6f, 0x7a, 0x4e, 0xb7, 0xf6, 0xb6, 0x7a, 0xba, 0xf4, 0x4f, 0xb5, 0xb7, 0xa7, 0xd5,
		0xe5, 0x8f, 0xd7, 0x1e, 0xab, 0xc9, 0x9a, 0x1a, 0xdd, 0xe4, 0x6f, 0x1e, 0xab, 0x8d, 0xe4, 0xf4,
		0xde, 0x24, 0xe7, 0x94, 0x7c, 0xef, 0x75, 0xbd, 0xbb, 0xfa, 0xcd, 0x6e, 0x74, 0x43, 0xf9, 0x22,
		0x9e, 0x3d, 0xc8, 0xbd, 0xa8, 0xf5, 0x24, 0x6a, 0xb5, 0xb7, 0x95, 0xd2, 0xd7, 0xc7, 0x75, 0x4b,
		0x03, 0xb7, 0xb5, 0x91, 0x36, 0x40, 0x36, 0x40, 0xf6, 0x81, 0x83, 0x6c, 0xc2, 0x42, 0x7d, 0x24,
		0xc6, 0x1a, 0x48, 0x8c, 0xad, 0xdb, 0x62, 0x24, 0xc6, 0x0c, 0x9b, 0xdc, 0x42, 0x0c, 0xb5, 0xa4,
		0x6a, 0x7a, 0x7f, 0x9f, 0xee, 0xaa, 0xbc, 0x40, 0xeb, 0x5b, 0x91, 0x99, 0xca, 0xe6, 0xf7, 0xe2,
		0x2a, 0xbe, 0x0d, 0xbe, 0x30, 0x77, 0x18, 0x06, 0x51, 0x5a, 0xd6, 0x53, 0x2a, 0xe3, 0x72, 0xeb,
		0x0e, 0x6e, 0x4d, 0xdb, 0x94, 0xae, 0x39, 0x84, 0xa5, 0x99, 0xca, 0x9c, 0xa3, 0x01, 0x9c, 0x05,
		0x9c, 0x55, 0x62, 0x9c, 0xf5, 0xd1, 0xf6, 0x1d, 0x5b, 0x04, 0xd1, 0x83, 0xc2, 0x95, 0x78, 0x7d,
		0x8c, 0xe6, 0x71, 0xbb, 0x1f, 0xf1, 0xbe, 0x4e, 0xec, 0xf3, 0x42, 0xad, 0xd3, 0x65, 0x5a, 0xbd,
		0x79, 0x72, 0x72, 0x7a, 0x72, 0x72, 0x9a, 0xca, 0x69, 0xf6, 0x5f, 0x96, 0x56, 0x52, 0x96, 0xc5,
		0xcd, 0x4b, 0xc7, 0xa1, 0x44, 0xcc, 0x75, 0x34, 0x15, 0xd1, 0x8c, 0x0e, 0x0a, 0x2a, 0xa0, 0x8c,
		0x0e, 0xbb, 0xd1, 0x75, 0x20, 0x04, 0x77, 0xd8, 0xbf, 0x47, 0xb6, 0x53, 0x74, 0x83, 0x6b, 0xed,
		0xf6, 0xb9, 0xe5, 0x4e, 0x1e, 0x00, 0x53, 0x03, 0x53, 0x2b, 0x9b, 0xb3, 0xe9, 0x5c, 0x74, 0xbb,
		0xef, 0xb2, 0xd8, 0xee, 0xbb, 0xea, 0x16, 0x6d, 0x95, 0x14, 0x8c, 0x1a, 0x8c, 0x1a, 0x5a, 0x86,
		0x6d, 0x37, 0x6a, 0x05, 0xb6, 0x0c, 0xdb, 0xef, 0x2b, 0x6c, 0x6f, 0x5a, 0xad, 0xf6, 0x45, 0xab,
		0x55, 0xbf, 0x38, 0xbb, 0xa8, 0x5f, 0x9e, 0x9f, 0x37, 0xda, 0x8d, 0xf3, 0xc2, 0x6f, 0xb5, 0x99,
		0x55, 0xc3, 0x3d, 0x3b, 0xb4, 0x6f, 0x5c, 0xcf, 0x15, 0x2e, 0x8f, 0x09, 0x54, 0xf1, 0x02, 0x39,
		0xa8, 0x63, 0xa8, 0x63, 0xa8, 0x63, 0xa8, 0x63, 0xa8, 0xe3, 0xdc, 0xea, 0x98, 0xfb, 0x0e, 0x0b,
		0xfa, 0x2c, 0x72, 0x6f, 0x08, 0x94, 0xf1, 0x1c, 0x31, 0xa8, 0x62, 0xa8, 0x62, 0xa8, 0x62, 0xa8,
		0x62, 0xa8, 0xe2, 0xdc, 0xaa, 0x78, 0xc8, 0xe3, 0xd8, 0x1e, 0x90, 0xa0, 0xe2, 0x29, 0xa9, 0x82,
		0x1b, 0x14, 0x43, 0x0d, 0x43, 0x0d, 0xcb, 0x2c, 0x54, 0xb9, 0x41, 0x71, 0xda, 0xb6, 0x7f, 0x14,
		0xa6, 0xc3, 0x25, 0x85, 0x3b, 0xe4, 0xfa, 0xed, 0xb6, 0x56, 0x28, 0xa2, 0xdd, 0x16, 0xda, 0x6d,
		0xed, 0x54, 0xf4, 0xd4, 0x44, 0x50, 0x51, 0x14, 0xf5, 0x91, 0xd1, 0x0a, 0xf7, 0xd0, 0x4c, 0x7e,
		0x5d, 0xb1, 0x4d, 0x3a, 0x17, 0x27, 0x34, 0x27, 0xc1, 0x4e, 0xfe, 0x57, 0xd6, 0x5e, 0xc5, 0xcd,
		0x3a, 0x9a, 0x15, 0xab, 0x9c, 0x85, 0x89, 0x66, 0xc5, 0xba, 0x93, 0x64, 0xf7, 0xf1, 0x2c, 0x76,
		0xd5, 0xa4, 0xb8, 0x0c, 0x57, 0xa9, 0x76, 0x3b, 0x81, 0x76, 0xba, 0x15, 0x25, 0x6e, 0x91, 0x3a,
		0xb4, 0xbd, 0x7e, 0x10, 0x0d, 0xb9, 0x33, 0x86, 0x59, 0x04, 0x3d, 0x52, 0x57, 0x49, 0x02, 0xb5,
		0x01, 0xb5, 0x01, 0xb5, 0x69, 0x70, 0xcf, 0x1f, 0x3c, 0x0a, 0xd8, 0x8d, 0x1d, 0x73, 0x87, 0xf5,
		0x82, 0x91, 0x2f, 0x78, 0xd4, 0x6e, 0x11, 0xc0, 0x36, 0x1d, 0xd4, 0xf6, 0x57, 0xde, 0xb7, 0x47,
		0x5e, 0x7a, 0x38, 0x75, 0x9d, 0xa5, 0xfc, 0xdd, 0x8e, 0x67, 0xa4, 0xf4, 0xb8, 0xe6, 0xc0, 0x87,
		0x5e, 0x00, 0x47, 0x96, 0x06, 0x47, 0xd2, 0x04, 0x3e, 0x81, 0x2c, 0x0f, 0x0e, 0x4e, 0xfd, 0x7b,
		0xc4, 0x47, 0x89, 0x5b, 0x1d, 0xa6, 0x0e, 0xad, 0x26, 0x90, 0x9a, 0x27, 0x06, 0x08, 0x05, 0x08,
		0x05, 0x08, 0xa5, 0xc1, 0x3d, 0xca, 0x5d, 0x70, 0x97, 0x65, 0x09, 0x53, 0xb9, 0x00, 0x50, 0x4a,
		0x0f, 0x50, 0x30, 0x95, 0x0b, 0xb0, 0x64, 0x6e, 0x93, 0xd3, 0x1b, 0x5f, 0x2c, 0xe2, 0xfd, 0x88,
		0xc7, 0x04, 0xc0, 0x64, 0x91, 0x1c, 0xa0, 0x09, 0xa0, 0x09, 0xa0, 0x09, 0xa2, 0x3b, 0x88, 0xee,
		0x00, 0x3c, 0x21, 0xba, 0x03, 0x18, 0x75, 0xb8, 0x30, 0x4a, 0x04, 0xc2, 0xf6, 0xd4, 0x4b, 0x02,
		0x57, 0x14, 0xff, 0x12, 0x3d, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00, 0x29, 0x00,
		0x29, 0x00, 0x29, 0x00, 0xa9, 0x43, 0x07, 0x52, 0x7e, 0xe0, 0xd3, 0x55, 0x1d, 0xad, 0x92, 0x04,
		0x9c, 0x02, 0x9c, 0x02, 0x9c, 0xd2, 0xe0, 0x9e, 0x91, 0xeb, 0x8b, 0x9d, 0x03, 0x28, 0x80, 0x15,
		0x80, 0x15, 0x80, 0x15, 0x80, 0x95, 0x5d, 0x83, 0x15, 0x62, 0xa0, 0x02, 0x90, 0x02, 0x90, 0x02,
		0x90, 0x82, 0x98, 0x0f, 0x62, 0x3e, 0x80, 0x51, 0x80, 0x51, 0x80, 0x51, 0x7b, 0x06, 0xa3, 0x8c,
		0x36, 0x20, 0x78, 0xe7, 0xfb, 0x81, 0xc8, 0x9a, 0xb8, 0x28, 0xf5, 0x21, 0x88, 0x7b, 0xb7, 0x7c,
		0x68, 0x87, 0xe3, 0xa6, 0xde, 0xa7, 0x33, 0x03, 0xe9, 0x73, 0xf1, 0x25, 0x88, 0x7e, 0x67, 0xae,
		0x1f, 0xa7, 0xdd, 0x5c, 0x4f, 0x57, 0xfe, 0x22, 0x8c, 0x02, 0x11, 0xf4, 0x02, 0x2f, 0x3e, 0xbd,
		0x19, 0x84, 0xa7, 0x3e, 0x77, 0x07, 0xb7, 0x37, 0x41, 0x74, 0xaa, 0xdb, 0xc3, 0x23, 0x5b, 0x96,
		0x88, 0x46, 0x3d, 0xe1, 0x8f, 0xed, 0xd6, 0x2f, 0x91, 0xf7, 0x63, 0xb2, 0xa8, 0x1f, 0xb3, 0x25,
		0xfc, 0x30, 0x5e, 0xc1, 0xe7, 0xe5, 0x3f, 0x7f, 0x9a, 0xac, 0xe8, 0xf3, 0x77, 0x83, 0xf0, 0xf3,
		0x8f, 0xe3, 0x15, 0x7d, 0xfe, 0x79, 0xbc, 0xa2, 0x8f, 0x93, 0x05, 0x95, 0xa1, 0x69, 0xca, 0xa4,
		0x2c, 0xcc, 0xe3, 0x3d, 0x11, 0x44, 0x1a, 0x2d, 0x53, 0x96, 0x08, 0x15, 0xdc, 0x30, 0x05, 0x33,
		0x13, 0xd0, 0x30, 0x45, 0x0a, 0xef, 0xa9, 0x36, 0x4c, 0xe9, 0x79, 0x6e, 0xf6, 0x7e, 0x9a, 0x2e,
		0xe5, 0x98, 0x0e, 0x7c, 0x49, 0xf8, 0x92, 0xf0, 0x25, 0x35, 0xb8, 0x47, 0x7d, 0x04, 0xfb, 0x8a,
		0xed, 0x69, 0x94, 0x38, 0xa0, 0xd5, 0xf3, 0x46, 0xb1, 0xe2, 0x20, 0x91, 0x35, 0xaa, 0x67, 0x4a,
		0x0b, 0xea, 0x07, 0xea, 0x07, 0xea, 0x47, 0x83, 0x7b, 0xf4, 0x86, 0x95, 0xac, 0xa8, 0x20, 0x4c,
		0x40, 0x87, 0xdf, 0xbc, 0x6b, 0xbf, 0x59, 0xcb, 0x91, 0x33, 0xe0, 0x35, 0x27, 0xeb, 0xf9, 0x79,
		0xba, 0x9c, 0x12, 0xf8, 0xcc, 0x31, 0xf7, 0x1d, 0xd6, 0x0b, 0x86, 0xc3, 0x91, 0xef, 0x8a, 0x07,
		0x75, 0x97, 0x79, 0x89, 0x0e, 0x3c, 0x66, 0x78, 0xcc, 0x87, 0xd9, 0x62, 0x34, 0x1a, 0x90, 0xf4,
		0x15, 0x4d, 0xc8, 0x00, 0xb0, 0x02, 0xb0, 0x02, 0xb0, 0xc2, 0x5f, 0xde, 0x0e, 0x41, 0x6c, 0xdf,
		0xb1, 0x23, 0x02, 0x6f, 0x79, 0x4a, 0x09, 0xaa, 0x07, 0xaa, 0x07, 0xaa, 0xe7, 0xc8, 0x54, 0xcf,
		0x91, 0x39, 0x7f, 0x5a, 0x2e, 0x09, 0xbd, 0xef, 0xf7, 0x0b, 0xf7, 0x9d, 0xbf, 0x4c, 0x57, 0x53,
		0x16, 0xd7, 0xcf, 0xc9, 0x0a, 0x7c, 0xb2, 0x99, 0xcc, 0x9a, 0xee, 0xdf, 0x22, 0x2d, 0xb8, 0x80,
		0x70, 0x01, 0x0f, 0xd1, 0x05, 0xe4, 0xf7, 0x61, 0x10, 0x09, 0x16, 0x06, 0x9e, 0xdb, 0x7b, 0xd0,
		0x87, 0x64, 0x8b, 0xe4, 0x80, 0xcb, 0x80, 0xcb, 0x80, 0xcb, 0x74, 0x22, 0x2b, 0xdc, 0xee, 0x47,
		0xbc, 0x4f, 0x81, 0xcb, 0x2e, 0xf4, 0xf2, 0x17, 0x53, 0x1c, 0xc3, 0xa2, 0x30, 0xf0, 0xae, 0x12,
		0xa3, 0xe8, 0xfa, 0x83, 0xb1, 0xa0, 0xcf, 0xfe, 0x7e, 0xf9, 0xcf, 0x29, 0xda, 0x28, 0xb1, 0x33,
		0xea, 0x86, 0x77, 0x2d, 0x36, 0xf2, 0xdd, 0x9e, 0x1d, 0x13, 0x54, 0x8e, 0x2c, 0x50, 0x83, 0xf2,
		0x83, 0xf2, 0x83, 0xf2, 0x43, 0x3c, 0x2c, 0x87, 0x0a, 0x6a, 0x93, 0xaa, 0xa0, 0x36, 0x54, 0x10,
		0x54, 0x10, 0x54, 0x10, 0xe2, 0x62, 0xc7, 0x13, 0x17, 0xd3, 0x89, 0xd5, 0x98, 0x89, 0x8d, 0x8d,
		0xaf, 0x9a, 0xa5, 0x25, 0x12, 0x25, 0x09, 0x8f, 0x09, 0x92, 0x49, 0xd8, 0xcb, 0x84, 0x30, 0x05,
		0x1b, 0x81, 0x31, 0x4c, 0xc1, 0xde, 0xae, 0xff, 0x31, 0x05, 0xfb, 0x59, 0x0a, 0x47, 0x32, 0x05,
		0x3b, 0xd5, 0x9c, 0xfa, 0x13, 0xb0, 0x17, 0xc9, 0x60, 0xfa, 0x35, 0xd4, 0xef, 0x21, 0xe6, 0x25,
		0x30, 0xfa, 0x07, 0x3e, 0x31, 0x7c, 0xe2, 0x32, 0xfa, 0xc4, 0x18, 0xfd, 0xb3, 0x04, 0x7f, 0xd0,
		0x80, 0x03, 0xa3, 0x7f, 0x0e, 0xf2, 0x4c, 0xd0, 0xbd, 0x6c, 0x65, 0x93, 0x31, 0xfa, 0x07, 0xd0,
		0x04, 0xd0, 0xa4, 0xac, 0xd0, 0x04, 0xdd, 0xcb, 0x00, 0x9e, 0x00, 0x9e, 0xca, 0x03, 0x9e, 0xd0,
		0xbd, 0x0c, 0x30, 0x6a, 0xed, 0x26, 0x63, 0xf4, 0x0f, 0x80, 0x14, 0x80, 0x14, 0x80, 0x14, 0x80,
		0x14, 0x80, 0x14, 0x80, 0x14, 0x80, 0x14, 0x80, 0x14, 0x46, 0xff, 0x00, 0x4e, 0x01, 0x4e, 0x1d,
		0x28, 0x9c, 0xc2, 0xe8, 0x1f, 0x80, 0x15, 0x80, 0x15, 0x80, 0x15, 0x80, 0x15, 0x8c, 0xfe, 0x01,
		0x48, 0x01, 0x48, 0x41, 0xcc, 0x07, 0x31, 0x1f, 0xc0, 0x28, 0xc0, 0x28, 0xc0, 0xa8, 0xa3, 0x87,
		0x51, 0xc7, 0x77, 0x5b, 0x4f, 0x94, 0x67, 0xec, 0xcf, 0x2f, 0xdc, 0x17, 0x65, 0x1a, 0xf9, 0x13,
		0xf3, 0x38, 0x76, 0x03, 0x9f, 0xc5, 0xc2, 0xd6, 0x6b, 0x5f, 0x35, 0x4f, 0x06, 0x17, 0xf4, 0x8c,
		0x03, 0x5e, 0xdc, 0x10, 0x51, 0xd7, 0x51, 0xb8, 0xa0, 0xb7, 0xfd, 0x5b, 0xee, 0x53, 0x23, 0x2d,
		0x8f, 0x38, 0xf5, 0xb9, 0x79, 0xc6, 0x3a, 0xfc, 0x5e, 0x5c, 0xc5, 0xb7, 0xc1, 0x17, 0xe6, 0x0e,
		0xc3, 0x20, 0x4a, 0xd5, 0x6a, 0xa9, 0x98, 0xfc, 0xd6, 0x1d, 0xdc, 0x9a, 0xe6, 0xed, 0xae, 0x19,
		0xad, 0xef, 0x05, 0x5f, 0x58, 0xc8, 0xb9, 0xc6, 0x88, 0xb7, 0x19, 0x09, 0x68, 0x7b, 0x68, 0x7b,
		0x68, 0xfb, 0x52, 0x69, 0x7b, 0x23, 0x4a, 0x43, 0xb8, 0x43, 0x1e, 0x69, 0xdc, 0x22, 0x1e, 0x3f,
		0x8f, 0xb6, 0xa6, 0x50, 0x17, 0x07, 0x39, 0x0b, 0x32, 0xf0, 0x7d, 0xde, 0x13, 0x2c, 0xe2, 0x22,
		0x22, 0x68, 0x6b, 0xba, 0x48, 0x0e, 0xa9, 0x06, 0xa4, 0x1a, 0x76, 0x2a, 0x74, 0x7a, 0xf1, 0xad,
		0x72, 0xd4, 0x43, 0x34, 0xda, 0x04, 0xc9, 0x85, 0x36, 0x02, 0xf9, 0xcf, 0x45, 0x8f, 0x11, 0xc8,
		0x57, 0x39, 0x0a, 0x13, 0x81, 0xfc, 0xf6, 0xf9, 0xf9, 0x19, 0x22, 0xf7, 0x45, 0x3d, 0x5d, 0xe6,
		0x02, 0x88, 0xdb, 0xc0, 0x73, 0x58, 0x82, 0xbc, 0xf5, 0x11, 0xc9, 0x8c, 0x14, 0xd0, 0x08, 0xd0,
		0x08, 0xd0, 0x08, 0xd0, 0x88, 0x85, 0xb2, 0x02, 0xa0, 0x11, 0x1c, 0x05, 0x39, 0x12, 0x79, 0x7d,
		0x90, 0x12, 0x79, 0x06, 0x89, 0x84, 0x7f, 0x00, 0xff, 0xa0, 0x5c, 0xfe, 0xc1, 0xef, 0x9c, 0x87,
		0xb6, 0xe7, 0xde, 0x71, 0xe6, 0xfa, 0x82, 0x47, 0x77, 0xb6, 0xa7, 0xef, 0x28, 0xac, 0xa1, 0x09,
		0x8f, 0x01, 0x1e, 0x03, 0x3c, 0x06, 0x78, 0x0c, 0xf0, 0x18, 0x80, 0x4f, 0x72, 0x1c, 0x45, 0xb3,
		0xf1, 0xa6, 0x05, 0x7c, 0x02, 0x7c, 0x62, 0x55, 0x86, 0xae, 0xef, 0x0e, 0x47, 0x43, 0x66, 0x3b,
		0x77, 0x3c, 0x12, 0x6e, 0x9c, 0x36, 0x6d, 0x27, 0xc4, 0x2a, 0x5b, 0xe8, 0x03, 0xb7, 0x00, 0xb7,
		0x00, 0xb7, 0x00, 0xb7, 0x58, 0xc8, 0xbb, 0x02, 0xb7, 0xe4, 0xc0, 0x2d, 0xe7, 0x40, 0x2d, 0x40,
		0x2d, 0x56, 0xc5, 0xe7, 0x83, 0x40, 0xb8, 0xb6, 0xe0, 0x0e, 0x23, 0x4c, 0xc0, 0xae, 0xa5, 0xba,
		0x63, 0x84, 0xd2, 0x04, 0x42, 0x01, 0x42, 0x01, 0x42, 0x01, 0x42, 0x41, 0x64, 0x65, 0x2f, 0x10,
		0x0a, 0x32, 0x3f, 0xc0, 0x28, 0x2b, 0x18, 0xc5, 0x44, 0x12, 0x68, 0x33, 0x79, 0xa0, 0x16, 0xa0,
		0x16, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16, 0xa0, 0x16, 0x09, 0xd4, 0x72,
		0x2f, 0xd8, 0xc2, 0xdd, 0x38, 0xb2, 0xe0, 0xca, 0x7a, 0xc2, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x2a,
		0x1a, 0xdc, 0xe3, 0xd8, 0x82, 0x33, 0xdb, 0xcf, 0xc2, 0x95, 0xcc, 0xe1, 0x9e, 0xb0, 0x09, 0x60,
		0x4b, 0x43, 0xa7, 0xc9, 0xdf, 0x07, 0xee, 0x0f, 0xd2, 0x06, 0x53, 0x87, 0x09, 0x5c, 0x9a, 0x40,
		0x2e, 0xa5, 0x41, 0x2e, 0x67, 0x4d, 0xc0, 0x96, 0xa2, 0x60, 0x8b, 0x86, 0x46, 0xf8, 0x64, 0x0b,
		0xc1, 0x23, 0x5f, 0x5b, 0x25, 0x54, 0x3a, 0x1d, 0xe7, 0x6b, 0xeb, 0x89, 0x25, 0x3f, 0x9a, 0x93,
		0x1f, 0xbf, 0x66, 0x3f, 0xae, 0x16, 0x7e, 0x54, 0x3b, 0x9d, 0x93, 0x4e, 0xc7, 0x79, 0x55, 0x7b,
		0x5b, 0xfd, 0xed, 0xf1, 0xba, 0xd3, 0x79, 0xd5, 0xe9, 0xb0, 0xee, 0xc2, 0x27, 0x6a, 0x15, 0xf4,
		0x12, 0x2c, 0x59, 0x2f, 0x41, 0xa5, 0x16, 0x26, 0x16, 0x79, 0x13, 0xc1, 0x5f, 0xb3, 0x65, 0x94,
		0xa1, 0x27, 0x4c, 0x64, 0xf7, 0x38, 0x0b, 0xc2, 0xe4, 0x90, 0x74, 0x5a, 0xc3, 0x2c, 0x90, 0x41,
		0x87, 0x18, 0xe3, 0x50, 0x1a, 0x1d, 0x62, 0xd4, 0xd5, 0x92, 0x72, 0x87, 0x98, 0xbe, 0x67, 0x0f,
		0xf4, 0x1d, 0xd5, 0x94, 0x8a, 0x9e, 0x57, 0xda, 0x40, 0x5d, 0x22, 0xbc, 0xd2, 0x7d, 0xf4, 0x4a,
		0x55, 0x45, 0x6f, 0x4a, 0x60, 0x18, 0x38, 0x6e, 0xdf, 0xe5, 0x91, 0xfe, 0x69, 0x4f, 0x0b, 0x88,
		0x27, 0x14, 0x35, 0xcf, 0x46, 0x2f, 0x60, 0x44, 0x26, 0xa2, 0x94, 0xa2, 0x6a, 0x4c, 0x64, 0xa9,
		0x45, 0xd7, 0x98, 0x08, 0x1b, 0x13, 0x65, 0x93, 0x22, 0x4d, 0xe4, 0xc7, 0x69, 0xf2, 0x9f, 0x76,
		0x00, 0x6a, 0x85, 0xfb, 0xf4, 0xda, 0x38, 0x3e, 0x6b, 0x4b, 0x5b, 0x04, 0xb4, 0xd4, 0xda, 0x3c,
		0xd2, 0x1d, 0x98, 0xc6, 0x61, 0x55, 0xc6, 0x3e, 0x0d, 0x91, 0x3a, 0x4d, 0xa9, 0x41, 0x95, 0x42,
		0x95, 0x42, 0x95, 0x42, 0x95, 0xee, 0xa5, 0x2a, 0x2d, 0x14, 0x10, 0xff, 0x83, 0x3f, 0x68, 0x6a,
		0xcd, 0xca, 0x07, 0x37, 0x16, 0xef, 0x84, 0xd0, 0x04, 0xd6, 0x1f, 0x5d, 0xff, 0xbd, 0x97, 0x5e,
		0x9e, 0xd3, 0x8c, 0x4d, 0x57, 0x3e, 0xda, 0xf7, 0x73, 0x94, 0x68, 0x47, 0xd2, 0x54, 0x7e, 0x8a,
		0x1c, 0x1e, 0x71, 0xe7, 0xbb, 0x64, 0xd7, 0xfc, 0x91, 0xe7, 0x15, 0x7a, 0x58, 0x9a, 0xf1, 0x4c,
		0x93, 0x71, 0xcd, 0xf9, 0xf8, 0xdb, 0xa9, 0x46, 0x84, 0xc1, 0x40, 0xac, 0x33, 0x59, 0xda, 0x4f,
		0xd9, 0xca, 0x3e, 0x7f, 0x9f, 0xac, 0x0c, 0xb1, 0x6d, 0xf3, 0x3c, 0xb0, 0xfb, 0x10, 0xf7, 0xdc,
		0xb1, 0x97, 0x24, 0xd0, 0xed, 0xc7, 0x61, 0x10, 0x09, 0xad, 0x20, 0xf7, 0x98, 0x04, 0x02, 0xdc,
		0xc6, 0xf1, 0x28, 0x02, 0xdc, 0xea, 0xba, 0x49, 0x39, 0xc0, 0xed, 0x05, 0x3d, 0xdb, 0x63, 0xb6,
		0xe3, 0x44, 0x3c, 0x26, 0x98, 0xb6, 0xba, 0x48, 0x0e, 0x57, 0xf1, 0x11, 0xf2, 0x2e, 0x85, 0x53,
		0xb7, 0xaf, 0x85, 0x58, 0x6e, 0xa8, 0x29, 0x4b, 0x0b, 0xc6, 0xe8, 0x52, 0x83, 0xc6, 0xf8, 0x9d,
		0x76, 0x5e, 0x7d, 0x35, 0xdb, 0x99, 0xbb, 0x16, 0xc1, 0xde, 0xac, 0xec, 0xd1, 0x1b, 0x02, 0x5a,
		0x54, 0x95, 0x29, 0x53, 0x82, 0xd5, 0xea, 0x75, 0x9d, 0x5d, 0x76, 0x1f, 0xaf, 0x1b, 0xec, 0xb2,
		0x9b, 0xfd, 0xda, 0x48, 0x7f, 0x64, 0xbf, 0x37, 0xaf, 0xeb, 0xac, 0x35, 0xf9, 0xfd, 0xfc, 0xba,
		0xce, 0xce, 0xbb, 0xb5, 0x4e, 0xe7, 0xa4, 0xf6, 0xf5, 0xec, 0x49, 0xfe, 0x41, 0xfd, 0xc8, 0x49,
		0x77, 0xcf, 0x3b, 0x69, 0xce, 0xb1, 0x58, 0xfb, 0x88, 0x58, 0xec, 0xea, 0x31, 0x61, 0x04, 0x9b,
		0xf5, 0xdf, 0xb1, 0xef, 0xbb, 0x5f, 0xeb, 0xaf, 0x5b, 0x4f, 0xb5, 0xab, 0x5a, 0x75, 0xf9, 0xef,
		0xae, 0x6a, 0x5f, 0xeb, 0xaf, 0xcf, 0x9f, 0xaa, 0xd5, 0x35, 0xff, 0xf2, 0x76, 0x1d, 0x8d, 0xda,
		0x63, 0xb5, 0x5a, 0x1d, 0x33, 0xd7, 0x02, 0xc3, 0x5d, 0xd7, 0x1b, 0xdd, 0xb7, 0xe9, 0xaf, 0xd9,
		0x7f, 0xa7, 0x2c, 0x9b, 0xeb, 0xc3, 0xb5, 0xdd, 0x33, 0xea, 0x41, 0x16, 0xeb, 0x67, 0x00, 0x4e,
		0xc9, 0x6b, 0x7a, 0x06, 0x0c, 0x2a, 0xb8, 0x4f, 0xe4, 0x48, 0x10, 0x25, 0xf9, 0x40, 0x82, 0xfb,
		0x8d, 0x04, 0x71, 0x79, 0x70, 0x29, 0x74, 0x8d, 0xcb, 0x83, 0xb8, 0x3c, 0x78, 0x68, 0xc7, 0x01,
		0x3c, 0xb2, 0xb2, 0xc9, 0xa1, 0x1d, 0xc7, 0xee, 0x1d, 0x67, 0xc3, 0xc0, 0x21, 0xb8, 0x31, 0xb8,
		0x40, 0x0d, 0xd1, 0x29, 0x60, 0x12, 0x60, 0x12, 0x0d, 0xee, 0xb9, 0x09, 0x02, 0x8f, 0xdb, 0x3e,
		0x45, 0x68, 0xaa, 0x51, 0x62, 0x15, 0x14, 0xf1, 0x61, 0x20, 0x38, 0x91, 0x4f, 0x34, 0x4f, 0x0c,
		0x4e, 0x11, 0x14, 0x10, 0x14, 0x10, 0x9c, 0x22, 0x38, 0x45, 0x70, 0x8a, 0xe0, 0x14, 0xc1, 0x29,
		0xca, 0xbd, 0xc9, 0xa2, 0x17, 0xb2, 0x21, 0x45, 0xba, 0x7e, 0x42, 0x08, 0xae, 0x10, 0x90, 0x08,
		0x90, 0x08, 0x90, 0x48, 0x99, 0x91, 0xc8, 0xf9, 0x59, 0x1b, 0x58, 0xa4, 0x2c, 0x58, 0xe4, 0xb2,
		0xd5, 0x6a, 0x03, 0x8a, 0x1c, 0x1a, 0x14, 0x39, 0xbe, 0xf2, 0x69, 0xa5, 0xea, 0x5e, 0xcb, 0x44,
		0xe9, 0xf4, 0x78, 0x25, 0x25, 0xa8, 0x9b, 0x1e, 0xf9, 0x0e, 0x8f, 0xd8, 0xd0, 0x76, 0x7d, 0xc1,
		0xfd, 0x64, 0xd5, 0xea, 0xf5, 0xd3, 0xab, 0xa4, 0xd4, 0xea, 0xa8, 0xeb, 0xaa, 0x75, 0xd4, 0x4d,
		0xd4, 0x51, 0xa3, 0x8e, 0xba, 0x08, 0x44, 0x48, 0x10, 0x14, 0x57, 0x0c, 0x86, 0x4b, 0x28, 0x81,
		0x17, 0x84, 0x5b, 0x36, 0xb9, 0xc7, 0x16, 0x72, 0x1e, 0x49, 0x56, 0xc9, 0xa9, 0xdd, 0x5f, 0x53,
		0xbf, 0xaf, 0x46, 0x7a, 0x3f, 0x4d, 0xed, 0x3e, 0x5a, 0xde, 0x4d, 0x55, 0x34, 0x92, 0xf4, 0xc6,
		0x51, 0x82, 0x7f, 0x49, 0x4d, 0x61, 0x3e, 0x85, 0xb0, 0x9d, 0x93, 0x73, 0x6c, 0x78, 0x25, 0x08,
		0x79, 0xc4, 0x62, 0x61, 0x8b, 0xfc, 0x22, 0x3f, 0x15, 0xf3, 0xb9, 0x67, 0xf3, 0xca, 0x8b, 0x94,
		0x29, 0x93, 0x36, 0x61, 0x2a, 0xa6, 0x4b, 0xdb, 0x64, 0xa9, 0x9a, 0x2a, 0x6d, 0x13, 0xa5, 0x6d,
		0x9a, 0x28, 0x4c, 0x12, 0xad, 0x3e, 0x95, 0x36, 0x3d, 0x9a, 0x57, 0xbb, 0x55, 0xae, 0x70, 0x4b,
		0x5e, 0xd5, 0xa6, 0x11, 0xd3, 0x84, 0x41, 0x78, 0xc4, 0x65, 0x80, 0xe8, 0xac, 0xe0, 0x63, 0xf6,
		0xac, 0x9c, 0x98, 0x36, 0x64, 0xc5, 0xb4, 0x0e, 0x31, 0x3d, 0x0a, 0x31, 0x95, 0xbd, 0x69, 0x57,
		0xe1, 0xc9, 0x62, 0x95, 0x3d, 0x28, 0x2e, 0xef, 0x43, 0x54, 0xfe, 0xca, 0xfb, 0xf6, 0xc8, 0x13,
		0x4a, 0x91, 0xc0, 0x4a, 0xe3, 0xa2, 0x2e, 0x07, 0xca, 0xbb, 0x05, 0xbb, 0x74, 0xb8, 0x1a, 0x0b,
		0x97, 0xae, 0x58, 0x97, 0x6e, 0xe4, 0xfa, 0xe2, 0x8d, 0x86, 0x43, 0xa7, 0x90, 0xb4, 0xd5, 0x8c,
		0xe5, 0xeb, 0x75, 0x05, 0xd1, 0xcf, 0x5d, 0x11, 0x55, 0x0f, 0x90, 0xc7, 0x86, 0xe9, 0x62, 0xc2,
		0x4f, 0x7a, 0xed, 0x52, 0xe8, 0xb6, 0x58, 0x7b, 0x7e, 0x6d, 0x99, 0x37, 0xb9, 0xa0, 0xc0, 0x77,
		0xb7, 0x04, 0x51, 0x57, 0x57, 0x0b, 0x26, 0xb8, 0x80, 0x09, 0x80, 0x09, 0x80, 0x09, 0x80, 0x09,
		0x80, 0x09, 0x80, 0x09, 0x80, 0x09, 0x7b, 0x06, 0x13, 0x0e, 0x2b, 0x85, 0x20, 0x1d, 0x73, 0xb3,
		0xa8, 0x92, 0x08, 0x9f, 0x66, 0xdf, 0x5c, 0x60, 0x7c, 0x32, 0x0a, 0x46, 0x82, 0x33, 0xdb, 0xb9,
		0xe3, 0x91, 0x70, 0x63, 0x3e, 0xb6, 0x76, 0x92, 0x81, 0xca, 0x75, 0x44, 0x10, 0xb1, 0x44, 0xc4,
		0x72, 0x17, 0x11, 0xcb, 0xc8, 0x0e, 0x5d, 0x87, 0x7d, 0x71, 0xc5, 0xad, 0x13, 0xd9, 0x5f, 0x14,
		0x26, 0x4b, 0xcf, 0xb8, 0x7a, 0x99, 0x52, 0x91, 0x2e, 0x4a, 0x6a, 0x54, 0xe0, 0xa4, 0xc0, 0x49,
		0x81, 0x93, 0xb2, 0x1f, 0xe5, 0x29, 0x12, 0xe6, 0xe1, 0x8b, 0xed, 0x0a, 0xd6, 0x0f, 0x22, 0xd6,
		0x77, 0x6f, 0x32, 0x1c, 0xe2, 0x69, 0xa8, 0xa9, 0xb5, 0xd4, 0x8a, 0x54, 0x55, 0x09, 0xef, 0x42,
		0x53, 0x41, 0x53, 0x41, 0x53, 0x1d, 0x61, 0x21, 0xdd, 0xce, 0x1d, 0x36, 0x75, 0xdf, 0x83, 0xcc,
		0x73, 0xfb, 0x39, 0x59, 0xc2, 0xbb, 0x85, 0x15, 0x14, 0xee, 0xc1, 0x45, 0xbc, 0xef, 0xf1, 0x9e,
		0x08, 0x22, 0x55, 0xef, 0x6d, 0x46, 0x00, 0x9e, 0x1b, 0x3c, 0xb7, 0x5d, 0x78, 0x6e, 0x3d, 0xcf,
		0x95, 0x89, 0x3e, 0xac, 0x1c, 0xfa, 0xf8, 0x79, 0x78, 0x69, 0xc0, 0x3e, 0xc0, 0x3e, 0xc0, 0x3e,
		0xba, 0x5e, 0x5a, 0xcf, 0x1b, 0xc5, 0x82, 0x47, 0xcc, 0x75, 0x74, 0x54, 0xd2, 0x94, 0x06, 0xc4,
		0x1e, 0x62, 0x7f, 0xd0, 0x62, 0xef, 0x04, 0x42, 0x70, 0x87, 0xfd, 0x7b, 0x64, 0x3b, 0x3a, 0xa2,
		0xaf, 0xd0, 0x60, 0x5a, 0xbb, 0xa1, 0x74, 0xc9, 0x7b, 0x94, 0x23, 0x75, 0x27, 0xe1, 0x09, 0xca,
		0xfa, 0x31, 0xb4, 0x5e, 0xe0, 0xcf, 0xd3, 0x6f, 0x2f, 0xda, 0x03, 0x94, 0x32, 0x54, 0x8b, 0xbe,
		0x9f, 0x84, 0x7d, 0x52, 0xbe, 0x08, 0x04, 0xaf, 0xef, 0x38, 0xbc, 0xbe, 0x8f, 0xb6, 0xef, 0xd8,
		0x22, 0x88, 0x1e, 0x24, 0x42, 0x03, 0xea, 0x97, 0x87, 0x94, 0x46, 0x8c, 0xa8, 0x8c, 0x14, 0x51,
		0x1b, 0x21, 0xa2, 0x61, 0x4d, 0x35, 0x47, 0x84, 0xc0, 0x9c, 0x92, 0x99, 0xd3, 0xd7, 0x05, 0x1e,
		0x79, 0x7b, 0x8f, 0x8f, 0xfc, 0xf0, 0x47, 0x70, 0x98, 0xc2, 0x61, 0xdd, 0x02, 0xb1, 0x42, 0xcc,
		0x7d, 0x87, 0xf5, 0x82, 0xe1, 0x70, 0xe4, 0xbb, 0xe2, 0x41, 0x1e, 0x30, 0x2c, 0x3d, 0x8f, 0x58,
		0x31, 0x50, 0xc3, 0x2e, 0x62, 0xc5, 0x9e, 0x1d, 0x0d, 0x34, 0x5a, 0xbb, 0x64, 0x8f, 0x23, 0x49,
		0x8e, 0x88, 0x11, 0x22, 0x46, 0x08, 0x14, 0x6b, 0x06, 0x8a, 0x63, 0x91, 0xf8, 0x3c, 0x91, 0x46,
		0x98, 0x78, 0x4a, 0x01, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0xe9, 0xf0, 0x83, 0xb5, 0x4a,
		0x7e, 0x04, 0x59, 0xac, 0xf6, 0x17, 0xee, 0x3b, 0x7f, 0x99, 0x7e, 0x79, 0x91, 0xee, 0x57, 0xb2,
		0xe9, 0xb1, 0x70, 0x7b, 0xb1, 0x82, 0xeb, 0x35, 0x7b, 0xd6, 0xb0, 0xdb, 0x85, 0xae, 0x4d, 0x70,
		0xbb, 0xd6, 0x3e, 0xe0, 0xb8, 0xb1, 0x7d, 0xe3, 0x71, 0x87, 0x85, 0x9c, 0x47, 0xb1, 0x3a, 0xe0,
		0x59, 0xa2, 0x03, 0x5c, 0x01, 0x5c, 0x71, 0xf0, 0xb7, 0xab, 0x95, 0x3a, 0xac, 0x6b, 0x74, 0x56,
		0xc7, 0xf5, 0x6a, 0x0b, 0xd7, 0xab, 0x73, 0x6d, 0x31, 0xc1, 0x6c, 0x16, 0x5c, 0xb0, 0x2e, 0x45,
		0x1f, 0x16, 0xe7, 0xc1, 0xb7, 0x87, 0x6e, 0x4f, 0xdb, 0x3c, 0x2f, 0x90, 0x81, 0x75, 0x86, 0x75,
		0x86, 0x75, 0x86, 0x75, 0x86, 0x75, 0x86, 0x75, 0x86, 0x75, 0xd6, 0xb0, 0xce, 0xa1, 0x2d, 0x6e,
		0xd9, 0x90, 0x0f, 0xb3, 0xea, 0x28, 0x45, 0xdb, 0x3c, 0x4f, 0x04, 0x96, 0x19, 0x96, 0xf9, 0xa0,
		0x2d, 0xf3, 0x1f, 0x3c, 0x0a, 0xd8, 0x8d, 0x1d, 0x73, 0x87, 0xf5, 0x82, 0x91, 0x2f, 0x78, 0xd4,
		0x6e, 0x69, 0xd8, 0x69, 0x95, 0xca, 0xa8, 0x59, 0x8e, 0xad, 0x52, 0x57, 0xf9, 0xea, 0xbf, 0xdb,
		0xf1, 0x8c, 0x84, 0xda, 0xa9, 0x03, 0x2b, 0x00, 0x2b, 0xe4, 0xdb, 0x62, 0xbd, 0xe9, 0x20, 0x80,
		0x0e, 0xa5, 0x85, 0x0e, 0x22, 0x10, 0xb6, 0xc7, 0x92, 0x93, 0xb8, 0xe3, 0x2c, 0x2d, 0xda, 0xd7,
		0x70, 0xef, 0xd7, 0x11, 0x03, 0x94, 0x00, 0x94, 0x00, 0x94, 0x00, 0x94, 0x00, 0x94, 0x00, 0x94,
		0x00, 0x94, 0x38, 0x7c, 0x28, 0x11, 0xda, 0xe2, 0x56, 0x1b, 0x42, 0x64, 0x44, 0x00, 0x1d, 0x00,
		0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x8e, 0x00, 0x3a, 0xe8, 0x15,
		0x17, 0xcc, 0x13, 0x01, 0x74, 0x00, 0x74, 0x40, 0x69, 0xc1, 0x26, 0x5e, 0x47, 0x69, 0x01, 0x0c,
		0xb5, 0x31, 0x43, 0x8d, 0xd2, 0x82, 0x03, 0xb3, 0xcc, 0xa9, 0x7e, 0xd7, 0x4f, 0x0d, 0x4c, 0xe9,
		0x14, 0x6c, 0x9f, 0x9b, 0xb0, 0xcf, 0xb0, 0xcf, 0x85, 0xdb, 0xe7, 0xc2, 0x9d, 0x79, 0xd8, 0x67,
		0xd8, 0x67, 0x38, 0xd2, 0x30, 0xd7, 0x11, 0xef, 0x71, 0xf7, 0x8e, 0x3b, 0x44, 0x09, 0xfd, 0x65,
		0x72, 0x70, 0xae, 0x61, 0xbc, 0x11, 0x97, 0x37, 0x6b, 0xca, 0x11, 0x97, 0x07, 0x9c, 0x00, 0x9c,
		0x00, 0x9c, 0xd8, 0x2d, 0x9c, 0x18, 0x85, 0xba, 0x41, 0xf9, 0x29, 0x05, 0x80, 0x06, 0x80, 0x06,
		0x44, 0xe4, 0x37, 0xf1, 0x3a, 0x22, 0xf2, 0x30, 0xd1, 0xc6, 0x4c, 0x34, 0x22, 0xf2, 0xa5, 0xb6,
		0xc9, 0x07, 0xd6, 0x83, 0x4b, 0xb6, 0xa1, 0x94, 0x45, 0xd6, 0x7f, 0x6b, 0xf6, 0xcd, 0x05, 0x36,
		0xdf, 0x12, 0x91, 0xdd, 0xe3, 0x2c, 0x08, 0x93, 0x2d, 0x57, 0xe8, 0xbf, 0xb5, 0xf8, 0x38, 0x3a,
		0x1f, 0xa3, 0x05, 0x17, 0x81, 0x12, 0x90, 0x6e, 0xc1, 0xd5, 0xf7, 0xec, 0x81, 0x3a, 0xce, 0x4f,
		0x9f, 0x56, 0xc3, 0xf8, 0x0d, 0x60, 0x7c, 0x60, 0xfc, 0x22, 0x30, 0xbe, 0xac, 0x48, 0x4c, 0x1f,
		0x1c, 0x06, 0x8e, 0xdb, 0x77, 0x79, 0xa4, 0x7e, 0x6a, 0x13, 0xf6, 0x99, 0x52, 0x52, 0xdc, 0x6b,
		0x35, 0xb7, 0x58, 0x5b, 0x74, 0x28, 0x44, 0x88, 0x5c, 0x94, 0xa8, 0x44, 0x8a, 0x5c, 0xb4, 0xc8,
		0x45, 0xcc, 0x84, 0xa8, 0x69, 0x42, 0x67, 0x45, 0xfe, 0x51, 0x76, 0xb3, 0x57, 0xb8, 0x87, 0xfb,
		0xa3, 0x21, 0x8f, 0x32, 0x94, 0xab, 0xc1, 0x3b, 0x13, 0x1b, 0xd4, 0xd2, 0xa0, 0xf1, 0xde, 0x1f,
		0x0d, 0x93, 0x97, 0x2a, 0xca, 0x0b, 0x51, 0xd8, 0xfc, 0xca, 0x18, 0x56, 0x6b, 0xaa, 0xaf, 0x94,
		0x0a, 0x54, 0x17, 0x54, 0x17, 0x54, 0x17, 0x54, 0x97, 0x92, 0xea, 0x32, 0x0a, 0xf0, 0xfe, 0xc1,
		0x1f, 0x14, 0xb5, 0x54, 0xe5, 0x83, 0x1b, 0x8b, 0x77, 0x42, 0x28, 0x02, 0xc4, 0x8f, 0xae, 0xff,
		0xde, 0x4b, 0x07, 0xf4, 0x2b, 0x86, 0xc5, 0x2a, 0x1f, 0xed, 0xfb, 0x39, 0x0a, 0x34, 0x09, 0xb5,
		0xca, 0x4f, 0x91, 0xc3, 0x23, 0xee, 0x7c, 0x97, 0xec, 0x8a, 0x3f, 0xf2, 0x3c, 0xa3, 0x9b, 0xaf,
		0x18, 0x75, 0xa2, 0x8f, 0x3e, 0x2d, 0x84, 0x53, 0x4e, 0x15, 0x1c, 0x53, 0xb2, 0x68, 0xd4, 0xaf,
		0xc9, 0x4a, 0x7e, 0xca, 0x16, 0xf2, 0xf9, 0xfb, 0x64, 0x21, 0x88, 0x1f, 0x4a, 0x9f, 0x60, 0xd1,
		0x21, 0xc4, 0xf9, 0x43, 0x2b, 0x38, 0x88, 0xe8, 0xc7, 0x61, 0x10, 0x09, 0xa5, 0x00, 0xe2, 0xf8,
		0x51, 0x04, 0x0f, 0x11, 0x3c, 0xdc, 0x45, 0xf0, 0x50, 0xf4, 0x42, 0x36, 0x8c, 0x75, 0x2a, 0x0d,
		0xc7, 0x04, 0x8a, 0x1c, 0x54, 0xd4, 0xa8, 0x37, 0x5b, 0x18, 0x54, 0x84, 0x08, 0xe7, 0xe1, 0x44,
		0x38, 0x51, 0xc5, 0x20, 0x8d, 0xdb, 0xe9, 0x52, 0xec, 0xe7, 0x67, 0x6d, 0xd4, 0x31, 0xac, 0x77,
		0x6d, 0xe8, 0x36, 0xf9, 0xb2, 0xd5, 0x6a, 0xa3, 0x8c, 0x41, 0xf3, 0x29, 0x94, 0x31, 0xe4, 0x75,
		0x43, 0xa4, 0x60, 0x35, 0xa5, 0x0b, 0x32, 0xfe, 0xe2, 0x02, 0xfd, 0x8f, 0x91, 0xef, 0xf0, 0x88,
		0x0d, 0x6d, 0xd7, 0x17, 0xdc, 0x4f, 0x16, 0x25, 0xef, 0x87, 0xac, 0x92, 0x90, 0xf3, 0x47, 0xea,
		0x98, 0x27, 0x06, 0x7f, 0x84, 0x04, 0xd7, 0x68, 0x0c, 0x5e, 0x94, 0x1c, 0xb8, 0x98, 0x43, 0xf8,
		0x5e, 0x68, 0x6c, 0x41, 0x85, 0xdf, 0x8b, 0xc8, 0x66, 0xa3, 0x44, 0x51, 0xdc, 0x78, 0xf9, 0x36,
		0xa1, 0x32, 0x1c, 0xc5, 0xf9, 0x5d, 0x22, 0x85, 0x4d, 0xf5, 0x03, 0x51, 0x5d, 0xd4, 0xab, 0x89,
		0x06, 0xbd, 0x5a, 0x56, 0xa7, 0xd7, 0x6b, 0x3e, 0x62, 0x0f, 0xb9, 0xf5, 0xad, 0xd5, 0x1b, 0x45,
		0x11, 0xf7, 0x45, 0xb5, 0x76, 0x7a, 0x72, 0x92, 0xfc, 0x7f, 0xfd, 0x07, 0xbb, 0x6b, 0xfe, 0x5e,
		0x3c, 0x84, 0x09, 0x81, 0x4e, 0x65, 0xf5, 0x9f, 0x86, 0x76, 0x8f, 0xdd, 0x45, 0xfd, 0x4e, 0xa5,
		0x26, 0x73, 0xda, 0xef, 0xa3, 0x28, 0x88, 0x3e, 0xf2, 0x38, 0xb6, 0x75, 0xe6, 0x7e, 0x7f, 0xf7,
		0xb7, 0x4f, 0x56, 0x2f, 0xd5, 0x4a, 0xa3, 0x2c, 0xb0, 0x6f, 0xb9, 0xb1, 0xe5, 0x07, 0xc2, 0x0a,
		0x83, 0x38, 0x76, 0x6f, 0x3c, 0x6e, 0x05, 0xbe, 0xb5, 0xbc, 0x3f, 0x56, 0xd0, 0xb7, 0xd2, 0xf7,
		0x19, 0xaf, 0xdc, 0x92, 0x15, 0x74, 0x0d, 0x4f, 0x6b, 0x5e, 0xcb, 0xf0, 0x64, 0x0b, 0xd8, 0x70,
		0xbc, 0x07, 0x6a, 0x97, 0x8d, 0xb4, 0x1d, 0xad, 0x05, 0xa5, 0x43, 0xb4, 0x9d, 0xfb, 0x00, 0x73,
		0x14, 0xc4, 0xef, 0x39, 0x99, 0x49, 0x5f, 0xfe, 0x4f, 0xdf, 0x5a, 0x2f, 0x57, 0xff, 0xe9, 0x36,
		0x88, 0xc5, 0xcb, 0xdd, 0x88, 0x45, 0x72, 0x6c, 0xf1, 0x28, 0x4c, 0xe0, 0x0c, 0x77, 0xac, 0x2f,
		0xae, 0xb8, 0x7d, 0xfe, 0xe4, 0x92, 0x65, 0x42, 0x08, 0xe6, 0x84, 0x40, 0x7a, 0xf3, 0x76, 0xcb,
		0xf2, 0x2f, 0x08, 0x02, 0x68, 0x09, 0xe8, 0x89, 0x79, 0x86, 0x3f, 0x8d, 0x59, 0xb0, 0xbf, 0x8c,
		0x95, 0x0b, 0xb7, 0xbe, 0xfb, 0xdb, 0xa7, 0xe2, 0x41, 0x5d, 0xf6, 0x7e, 0xbb, 0x84, 0x75, 0x8b,
		0x1b, 0x50, 0x3c, 0x1f, 0x68, 0x61, 0x22, 0x49, 0xcf, 0x90, 0xcc, 0x23, 0xac, 0xe4, 0x1a, 0xc4,
		0xac, 0xed, 0xff, 0x6d, 0x3e, 0x8e, 0xe7, 0x37, 0x77, 0xc3, 0xb6, 0x55, 0x6e, 0x06, 0x21, 0xe3,
		0x77, 0xe1, 0xf6, 0x0d, 0x9b, 0x21, 0xe7, 0xc9, 0x13, 0x5b, 0x0e, 0x23, 0x5f, 0x2e, 0x29, 0x77,
		0x4c, 0x5b, 0xc6, 0x57, 0x5b, 0xe3, 0xa3, 0x8d, 0x0d, 0x5e, 0x9e, 0x93, 0x92, 0x14, 0x65, 0x65,
		0xbf, 0x4c, 0x59, 0x70, 0x9f, 0xf1, 0xc3, 0x26, 0xaf, 0x58, 0x42, 0xc7, 0xc3, 0xed, 0xb3, 0x3e,
		0xb7, 0xc5, 0x28, 0x32, 0xaa, 0xbc, 0xe3, 0xc8, 0x4b, 0xbf, 0xe6, 0x2a, 0x07, 0x7b, 0x52, 0x2b,
		0xef, 0xb9, 0x37, 0xdc, 0xb1, 0x57, 0x3e, 0xb7, 0x05, 0xa5, 0x34, 0xe3, 0xa6, 0x9d, 0xd0, 0x9d,
		0x7a, 0xa0, 0x7f, 0x5a, 0xef, 0x82, 0x3a, 0x59, 0x3a, 0x72, 0x27, 0x2e, 0xe8, 0xaf, 0xb7, 0xdc,
		0x9a, 0xe8, 0x6c, 0x0d, 0xe7, 0x69, 0xfc, 0x0a, 0x27, 0x80, 0xe1, 0x63, 0x51, 0xa3, 0xde, 0x57,
		0x20, 0x74, 0x79, 0x84, 0xce, 0xde, 0xff, 0xcf, 0xa7, 0x1f, 0x8f, 0x1e, 0xa6, 0x67, 0xbb, 0x00,
		0xac, 0x9e, 0x0b, 0xab, 0xb3, 0x9c, 0xe0, 0x80, 0x02, 0xb0, 0xbf, 0xdf, 0x6a, 0x84, 0xd5, 0x40,
		0xbb, 0xe3, 0x46, 0xbc, 0x27, 0xbc, 0x07, 0xd6, 0x0b, 0x7c, 0x9f, 0xf7, 0x04, 0x77, 0xf2, 0xc3,
		0xf7, 0x35, 0xcf, 0x02, 0xc8, 0x03, 0xc8, 0x97, 0x13, 0xc8, 0x8b, 0xc8, 0xee, 0xf7, 0xdd, 0x1e,
		0xe3, 0xfe, 0xc0, 0xf5, 0x39, 0x8f, 0x5c, 0x7f, 0x70, 0xe4, 0xb8, 0x7e, 0xdd, 0x8e, 0x40, 0xf3,
		0x6f, 0xd7, 0xfc, 0xd2, 0x6a, 0x8f, 0xc4, 0x06, 0xfc, 0x75, 0xfc, 0xad, 0x7f, 0x99, 0x7e, 0xa9,
		0xaa, 0x35, 0x78, 0x21, 0xb1, 0xd3, 0x95, 0x77, 0xa3, 0x41, 0xc2, 0x38, 0xa9, 0x59, 0x78, 0x5e,
		0x48, 0x73, 0x1a, 0x8c, 0x1c, 0xee, 0xd4, 0x9a, 0x8f, 0x4c, 0x77, 0x7e, 0xbf, 0xac, 0x4b, 0xce,
		0x60, 0xde, 0xbe, 0x5a, 0x96, 0x5c, 0xa9, 0x7a, 0x3d, 0xab, 0x92, 0xb7, 0x44, 0xb8, 0x92, 0xac,
		0x45, 0xba, 0x92, 0x24, 0x7f, 0xa9, 0x05, 0x6a, 0xd9, 0x29, 0x18, 0xd0, 0x98, 0x35, 0xdb, 0x7d,
		0xed, 0x88, 0x02, 0xfc, 0x51, 0x8b, 0x61, 0xc9, 0x03, 0xa1, 0x15, 0x7e, 0x39, 0xa0, 0xc2, 0x0a,
		0x9a, 0xe8, 0xd6, 0xca, 0x0e, 0xed, 0xa4, 0xd0, 0x82, 0x22, 0xc8, 0x65, 0x22, 0xd8, 0x45, 0x1a,
		0xf4, 0x5a, 0x2b, 0xc1, 0xbb, 0x28, 0xc4, 0x90, 0x8f, 0x7d, 0xa9, 0x3d, 0x21, 0x59, 0xd3, 0xac,
		0x21, 0xd6, 0x05, 0x14, 0x6c, 0x18, 0x14, 0x37, 0xc3, 0x05, 0x1c, 0xc7, 0x2d, 0x5c, 0x66, 0x0b,
		0x3c, 0x0a, 0x13, 0xa5, 0xdc, 0x9f, 0x96, 0xb8, 0x41, 0x25, 0x1f, 0x66, 0x26, 0x10, 0x55, 0xd5,
		0xc2, 0x10, 0x2a, 0x2e, 0x26, 0x88, 0x40, 0x93, 0x33, 0x2e, 0x45, 0xe1, 0x88, 0x71, 0xbe, 0x2a,
		0xa6, 0x58, 0x57, 0xd2, 0x71, 0xef, 0x3e, 0xe7, 0xb8, 0xe7, 0x0b, 0x8d, 0x90, 0x84, 0x44, 0x36,
		0x70, 0x8f, 0x6e, 0xdc, 0x63, 0xfd, 0xf1, 0xaf, 0x6e, 0xc5, 0x1a, 0x4b, 0x5b, 0x49, 0x67, 0x49,
		0xb0, 0xcd, 0x98, 0x7c, 0x2a, 0x95, 0xf3, 0x1f, 0x7e, 0x66, 0x4b, 0x37, 0xbb, 0x81, 0x5b, 0xaf,
		0x0c, 0xe4, 0x71, 0xf3, 0x94, 0xa2, 0xd4, 0x79, 0x15, 0x82, 0xb4, 0xeb, 0x26, 0x2d, 0xde, 0xaa,
		0x51, 0x68, 0xb9, 0x98, 0xd4, 0xb6, 0xb8, 0x40, 0xc5, 0x0d, 0xef, 0x5a, 0x6c, 0xe4, 0xbb, 0x3d,
		0x3b, 0x16, 0xf9, 0xd3, 0x19, 0x0b, 0x4f, 0xed, 0x55, 0xa8, 0xc9, 0x0d, 0xd9, 0x1c, 0xfb, 0xc6,
		0x87, 0x1c, 0x76, 0x5a, 0x7e, 0xd5, 0xb2, 0x84, 0xa0, 0xd2, 0x45, 0xc9, 0x07, 0xa1, 0xb2, 0xc7,
		0x0e, 0x2a, 0x0c, 0x25, 0xcf, 0x8c, 0x07, 0x1b, 0x92, 0x92, 0x66, 0x56, 0x33, 0xe1, 0x29, 0xe9,
		0x56, 0x0b, 0x76, 0x6f, 0x7c, 0xd7, 0x54, 0xb1, 0x4e, 0x68, 0xfc, 0xfc, 0x51, 0x75, 0x32, 0x50,
		0x67, 0x7b, 0x43, 0xb8, 0xbe, 0xbc, 0x5d, 0x0d, 0x94, 0xc5, 0xa2, 0x90, 0x20, 0x0c, 0x41, 0x87,
		0x03, 0xf9, 0x1b, 0x81, 0x2b, 0x3a, 0xbe, 0x61, 0xf4, 0x15, 0xdf, 0xdf, 0xa7, 0xb7, 0xd2, 0xe5,
		0x9b, 0x21, 0xe8, 0x73, 0xe6, 0x8c, 0x0d, 0xf8, 0xbd, 0xb8, 0x8a, 0x6f, 0x83, 0x2f, 0xcc, 0x1d,
		0x86, 0x41, 0x24, 0xec, 0xb2, 0xb9, 0xa1, 0xb7, 0xee, 0xe0, 0xd6, 0x34, 0x6f, 0x76, 0x8d, 0xcc,
		0xd4, 0xb9, 0xe1, 0xb1, 0x50, 0xd7, 0xde, 0xe9, 0xd3, 0xd0, 0xdd, 0xd0, 0xdd, 0xd0, 0xdd, 0xd0,
		0xdd, 0xd0, 0xdd, 0x05, 0xeb, 0xee, 0xbe, 0x7b, 0xc3, 0xc2, 0x28, 0x18, 0x44, 0xf6, 0x70, 0xe8,
		0xfa, 0x3a, 0xe3, 0x12, 0x96, 0x08, 0x1d, 0xd5, 0xe4, 0x04, 0x68, 0xf4, 0x43, 0xd1, 0xe8, 0xca,
		0x13, 0x15, 0xfa, 0xb6, 0xeb, 0x71, 0x87, 0xc5, 0x5e, 0x20, 0x62, 0xfd, 0x2c, 0xe5, 0x02, 0x35,
		0xb4, 0x27, 0x27, 0x15, 0x35, 0x2a, 0x91, 0x23, 0x17, 0x3d, 0x72, 0x11, 0x34, 0x2d, 0x8a, 0x6a,
		0x22, 0xa9, 0x28, 0x9a, 0xfa, 0xa0, 0x6b, 0x85, 0xab, 0x46, 0xae, 0x2f, 0xde, 0x10, 0x34, 0x2c,
		0xd7, 0x18, 0x43, 0xa7, 0xd9, 0x29, 0x50, 0x0f, 0x6c, 0x2d, 0x2c, 0x84, 0xa2, 0x73, 0xe0, 0x94,
		0xd8, 0x74, 0x8e, 0xee, 0x6b, 0x1a, 0x7a, 0xd4, 0x1d, 0xee, 0x66, 0xac, 0x40, 0xd5, 0xe9, 0x4e,
		0x93, 0xab, 0x17, 0x8f, 0x82, 0xa0, 0xbf, 0xe0, 0xca, 0x51, 0xbc, 0x39, 0xbe, 0xa3, 0x78, 0xb1,
		0x9b, 0xa7, 0xbb, 0x85, 0xaa, 0x43, 0xad, 0x3e, 0xff, 0xf3, 0xd2, 0xaf, 0xd7, 0xef, 0x7f, 0x9e,
		0x79, 0xc9, 0xfb, 0xfe, 0x4f, 0x89, 0x6b, 0xf5, 0xff, 0x57, 0x3f, 0xd9, 0x27, 0xa5, 0x76, 0xfb,
		0xb6, 0x18, 0x11, 0x40, 0xc1, 0x31, 0x1d, 0x80, 0x40, 0x80, 0x40, 0x80, 0x40, 0x03, 0x20, 0x10,
		0xb3, 0x6b, 0x0c, 0xb9, 0xd2, 0x3b, 0x1c, 0x9f, 0x32, 0xc7, 0xd1, 0xa7, 0xf3, 0x75, 0x36, 0xd9,
		0x3f, 0x9c, 0xea, 0xc5, 0xaa, 0x2c, 0xf5, 0x3a, 0xb3, 0x9f, 0x93, 0xaf, 0xff, 0x35, 0x59, 0xd6,
		0xe7, 0x1f, 0xc2, 0xbb, 0xd6, 0xff, 0xcb, 0x56, 0x95, 0xfd, 0xf5, 0xe7, 0xef, 0xdd, 0x9b, 0x4f,
		0x73, 0x8b, 0x32, 0xd5, 0x55, 0x41, 0x22, 0x38, 0xe8, 0x3a, 0xea, 0xf1, 0x40, 0xd7, 0x41, 0x52,
		0x07, 0x21, 0xc0, 0xe3, 0x4c, 0xea, 0x8c, 0x5c, 0x5f, 0x9c, 0x35, 0x35, 0x72, 0x3a, 0x17, 0x47,
		0x3b, 0x72, 0xa0, 0x8e, 0x81, 0x03, 0x86, 0x02, 0x02, 0xd3, 0x2d, 0x6e, 0x35, 0x2f, 0x5b, 0x97,
		0xed, 0x8b, 0xe6, 0xe5, 0x39, 0xc6, 0x0e, 0x68, 0x3e, 0xd5, 0x2d, 0x83, 0x91, 0x4e, 0xf0, 0x4d,
		0xa8, 0x66, 0xcb, 0x16, 0x8b, 0x91, 0xd5, 0x8a, 0x19, 0x61, 0xb6, 0x61, 0xb6, 0x0f, 0xc3, 0x6c,
		0xab, 0x0b, 0xc1, 0x82, 0x07, 0xa8, 0x10, 0x68, 0xad, 0x7c, 0xb2, 0x85, 0xe0, 0x91, 0xaf, 0x6c,
		0xbe, 0x2b, 0xd5, 0xea, 0x75, 0x9d, 0x5d, 0x76, 0x1f, 0xaf, 0x1b, 0xec, 0xb2, 0x9b, 0xfd, 0xda,
		0x48, 0x7f, 0x64, 0xbf, 0x37, 0xaf, 0xeb, 0xac, 0x35, 0xf9, 0xfd, 0xfc, 0xba, 0xce, 0xce, 0xbb,
		0xb5, 0x4e, 0xe7, 0xa4, 0xf6, 0xf5, 0xec, 0x49, 0xfe, 0xc1, 0xd3, 0xf1, 0x97, 0xd5, 0x1e, 0xab,
		0xd7, 0x0d, 0xd6, 0xec, 0x4e, 0xfe, 0x70, 0x76, 0x5d, 0x67, 0xcd, 0x6e, 0xad, 0x56, 0xd9, 0x4b,
		0x3d, 0xea, 0xd9, 0xb1, 0x60, 0x76, 0x18, 0xb2, 0x51, 0xe8, 0xd8, 0x42, 0xa3, 0x1c, 0x79, 0x99,
		0x10, 0xf4, 0x29, 0xf4, 0xe9, 0x51, 0xea, 0xd3, 0x84, 0xfb, 0x99, 0xed, 0x3b, 0x4c, 0xb8, 0x43,
		0xce, 0x1c, 0xee, 0x09, 0xbb, 0x68, 0xbd, 0xfa, 0x81, 0xfb, 0x83, 0x34, 0x7e, 0xb4, 0xdf, 0x5e,
		0x51, 0x13, 0x6e, 0x91, 0x71, 0xb7, 0xe8, 0xac, 0x09, 0x77, 0x48, 0xd7, 0x1d, 0xda, 0x05, 0xf2,
		0xe9, 0x74, 0x9c, 0xaf, 0xad, 0x27, 0x96, 0xfc, 0x68, 0x4e, 0x7e, 0xfc, 0x9a, 0xfd, 0xb8, 0x5a,
		0xf8, 0x51, 0xed, 0x74, 0x4e, 0x3a, 0x1d, 0xe7, 0x55, 0xed, 0x6d, 0xf5, 0xb7, 0xc7, 0xeb, 0x4e,
		0xe7, 0x55, 0xa7, 0xc3, 0xba, 0x0b, 0x9f, 0xd8, 0x53, 0xe4, 0x32, 0xe4, 0x22, 0x72, 0x7b, 0xea,
		0x80, 0x65, 0xfc, 0x3c, 0x70, 0x0a, 0x70, 0x0a, 0xc2, 0xb5, 0x08, 0xd7, 0x22, 0x5c, 0x8b, 0x70,
		0x2d, 0xc2, 0xb5, 0xb8, 0x29, 0x83, 0x9b, 0x32, 0x0b, 0x6f, 0xe1, 0xf3, 0x7b, 0xc1, 0x6e, 0x83,
		0x90, 0x0d, 0xa2, 0x60, 0x14, 0xaa, 0xa3, 0xad, 0x25, 0x3a, 0x40, 0x5d, 0x40, 0x5d, 0x47, 0x89,
		0xba, 0x3c, 0x6e, 0xf7, 0x23, 0xde, 0xd7, 0x89, 0x08, 0x5d, 0xa8, 0xf9, 0x9b, 0xb7, 0xb3, 0x0e,
		0x86, 0x27, 0x27, 0xa7, 0x8b, 0xf2, 0x78, 0xea, 0xfa, 0x0e, 0xbf, 0x2f, 0x43, 0xf1, 0x4d, 0xc2,
		0x9d, 0x3c, 0xe2, 0x7e, 0x4f, 0x23, 0x14, 0x3d, 0x47, 0x03, 0x7a, 0x06, 0x7a, 0xe6, 0x68, 0xbd,
		0xbb, 0x37, 0x1a, 0x5a, 0xe6, 0x1c, 0xce, 0x1d, 0x9c, 0x3b, 0x53, 0xce, 0x5d, 0xf3, 0x1c, 0x5e,
		0x1d, 0xbc, 0x3a, 0x78, 0x75, 0x3b, 0xf3, 0xea, 0x22, 0x1e, 0xbb, 0x9e, 0xcb, 0x7d, 0xc1, 0x6e,
		0xed, 0xf8, 0x56, 0x1d, 0x69, 0x2d, 0xd1, 0x01, 0xda, 0x02, 0xda, 0x42, 0x3f, 0x1b, 0x35, 0xaf,
		0xae, 0x51, 0x02, 0xe7, 0x2b, 0x3b, 0xa4, 0xe0, 0x8b, 0xcf, 0x23, 0x0d, 0x9d, 0x30, 0x47, 0x04,
		0x0a, 0x01, 0x0a, 0xe1, 0x28, 0x15, 0x42, 0x2c, 0x22, 0xc5, 0x2b, 0x56, 0xd3, 0xba, 0x1f, 0xe0,
		0x3b, 0xe0, 0x3b, 0x3d, 0x45, 0x2e, 0x54, 0xd8, 0x78, 0xb9, 0x57, 0x7b, 0x42, 0x03, 0x6a, 0x1c,
		0x6a, 0xfc, 0x38, 0x6b, 0xe3, 0x1d, 0xee, 0x0b, 0x57, 0x3c, 0x68, 0x46, 0xec, 0x55, 0x82, 0x69,
		0x3f, 0x8c, 0xbf, 0xfa, 0x3b, 0x3b, 0x26, 0x98, 0xff, 0x33, 0x3b, 0x29, 0x79, 0x79, 0x5e, 0x0c,
		0xdf, 0xc4, 0x5a, 0x5d, 0x7b, 0x34, 0x03, 0x48, 0xd3, 0xd7, 0x89, 0x5d, 0x9d, 0x3b, 0xfb, 0xaf,
		0x77, 0xbd, 0x7e, 0x7b, 0x30, 0x88, 0xf8, 0xc0, 0x16, 0x7c, 0x9f, 0x5f, 0xc2, 0x77, 0x7e, 0x6f,
		0xec, 0xf3, 0xfa, 0xa5, 0x66, 0x19, 0x96, 0x6f, 0xf9, 0x41, 0x1c, 0xf6, 0xef, 0x9a, 0x7b, 0xce,
		0x40, 0xcd, 0x3d, 0x67, 0xa0, 0x6c, 0x3a, 0xfd, 0x1e, 0xbf, 0x83, 0xfa, 0x2c, 0xb2, 0x72, 0xac,
		0xdf, 0x0b, 0x7a, 0xb6, 0xb7, 0xd7, 0xa6, 0x20, 0x0a, 0x99, 0xef, 0xec, 0xf5, 0x11, 0xb8, 0xfe,
		0xe8, 0x7e, 0x9f, 0x5f, 0x20, 0x16, 0xb6, 0x70, 0x7b, 0x7b, 0x6f, 0x0b, 0xce, 0xf6, 0xf9, 0x0d,
		0x9c, 0xdb, 0x5e, 0x58, 0x74, 0x17, 0xa6, 0x6e, 0xc9, 0xfc, 0x15, 0x04, 0x65, 0xf6, 0x2f, 0x28,
		0x43, 0x3a, 0x43, 0xe8, 0x1f, 0xfc, 0x61, 0xe9, 0x46, 0xb6, 0x35, 0xf3, 0xda, 0xac, 0xb9, 0xc0,
		0xba, 0x95, 0xbb, 0xcf, 0x90, 0x5a, 0xa3, 0x44, 0xf5, 0xc6, 0x88, 0xa4, 0x8d, 0x10, 0xd5, 0x1a,
		0x1f, 0xe6, 0xdd, 0x6d, 0xc5, 0x4e, 0x5d, 0xe6, 0x3a, 0x74, 0xc9, 0x4c, 0xf1, 0xa2, 0xef, 0xc4,
		0x55, 0xa1, 0x9a, 0xbc, 0xf9, 0x3a, 0xe7, 0x20, 0x37, 0x16, 0x8f, 0x86, 0x43, 0x3b, 0x7a, 0x50,
		0x1c, 0xe8, 0x36, 0x7d, 0x1c, 0x83, 0xdd, 0xb4, 0xa2, 0x8e, 0x18, 0xec, 0xb6, 0x79, 0x71, 0xd2,
		0x83, 0xdd, 0x4a, 0x11, 0x7c, 0xc7, 0x48, 0x09, 0x04, 0xdf, 0x77, 0x0a, 0x66, 0x95, 0x47, 0x4a,
		0x64, 0x73, 0x0d, 0xb3, 0x77, 0x23, 0x68, 0x24, 0xbc, 0x48, 0x0e, 0xfd, 0x84, 0xd1, 0x4f, 0x18,
		0xfd, 0x84, 0xa7, 0x2f, 0x43, 0x3b, 0x54, 0x42, 0xe9, 0x36, 0xf1, 0xb2, 0x8c, 0x5d, 0x60, 0xaa,
		0xc4, 0x12, 0x31, 0xa2, 0xc2, 0xf4, 0x29, 0x3d, 0x4c, 0x95, 0xd0, 0x3e, 0x0a, 0xaa, 0xdb, 0xc9,
		0xfb, 0x78, 0x26, 0xfb, 0x35, 0x5e, 0xa2, 0x90, 0xa1, 0x07, 0x0b, 0xd9, 0x75, 0x36, 0x76, 0xca,
		0x29, 0x33, 0xf6, 0x19, 0x4d, 0x80, 0x17, 0x80, 0x17, 0x80, 0x17, 0x03, 0xe0, 0x45, 0xaf, 0xcc,
		0x67, 0xc5, 0xf5, 0xd6, 0x19, 0xf5, 0x42, 0x52, 0xf6, 0xb3, 0x59, 0x99, 0xe8, 0x72, 0x25, 0x41,
		0x19, 0x10, 0x1d, 0xd4, 0xb2, 0xe8, 0xca, 0x82, 0x08, 0x51, 0x07, 0xf1, 0x7b, 0x11, 0x94, 0x0b,
		0x95, 0xf7, 0xe5, 0xf4, 0xca, 0x88, 0xca, 0xfb, 0x5e, 0x5a, 0xe5, 0x45, 0xe5, 0x7d, 0x2d, 0xdd,
		0xb2, 0xa3, 0x52, 0x33, 0x62, 0xf3, 0x40, 0x19, 0x51, 0xb3, 0x4c, 0xa9, 0xbc, 0xef, 0xa6, 0x57,
		0xbe, 0x54, 0xde, 0xf7, 0xd2, 0x2c, 0x6b, 0x2a, 0xb1, 0x29, 0xd3, 0x2c, 0x77, 0x2a, 0xf1, 0x91,
		0xe9, 0x95, 0x41, 0x95, 0xf7, 0xc5, 0x74, 0xcb, 0xa3, 0x4a, 0x6e, 0xcb, 0xce, 0x0e, 0xf1, 0xcd,
		0xf4, 0xca, 0xa9, 0x68, 0x62, 0x3d, 0xdd, 0xd2, 0xf7, 0x50, 0x30, 0x9b, 0x01, 0x9b, 0x56, 0xf3,
		0x68, 0x06, 0x72, 0xf4, 0x66, 0x9d, 0xea, 0xcf, 0x38, 0x35, 0x32, 0xdb, 0x54, 0x6f, 0xa6, 0xe9,
		0xc1, 0x0c, 0xe5, 0x9b, 0x14, 0xb1, 0x9c, 0x6a, 0xb9, 0xe7, 0x06, 0xaa, 0x81, 0x7e, 0xc9, 0xd6,
		0x35, 0xfe, 0x4c, 0xb2, 0x2c, 0x53, 0xf7, 0xd3, 0x0f, 0xbb, 0xa6, 0x4b, 0xb2, 0x4a, 0xc9, 0xec,
		0x69, 0x16, 0x59, 0xe2, 0x95, 0xa2, 0x86, 0x58, 0xb8, 0xbd, 0x58, 0xbe, 0xbe, 0x6b, 0xee, 0x59,
		0x14, 0x77, 0x65, 0xc4, 0x50, 0xdc, 0x65, 0x44, 0x5f, 0x48, 0x17, 0x77, 0xe9, 0x55, 0xa7, 0x90,
		0x54, 0xa5, 0xe0, 0x7e, 0x35, 0x4a, 0xbc, 0x4a, 0x01, 0x70, 0xd1, 0x83, 0x5e, 0x1a, 0x89, 0xa3,
		0x4d, 0xa1, 0x51, 0x6f, 0x1a, 0x3d, 0xe8, 0x4b, 0xea, 0x69, 0x97, 0x61, 0x60, 0xcc, 0x82, 0xcd,
		0x65, 0x5f, 0x5c, 0x71, 0xcb, 0x78, 0x6f, 0x18, 0x12, 0x19, 0xf1, 0x39, 0x82, 0x30, 0xe7, 0x30,
		0xe7, 0x30, 0xe7, 0x30, 0xe7, 0x30, 0xe7, 0x30, 0xe7, 0x30, 0xe7, 0xa6, 0xcc, 0x79, 0xdf, 0xbd,
		0x61, 0x7d, 0xdb, 0xf5, 0xb8, 0xa3, 0xed, 0x8d, 0xaf, 0x92, 0x82, 0x09, 0x87, 0x09, 0x87, 0x09,
		0x87, 0x09, 0x87, 0x09, 0x87, 0x09, 0x87, 0x09, 0x37, 0xd6, 0x6f, 0x7a, 0xa1, 0x7d, 0xbc, 0xb6,
		0x19, 0x5f, 0x4f, 0x0e, 0xa6, 0x1c, 0xa6, 0x1c, 0xa6, 0x1c, 0xa6, 0x1c, 0xa6, 0x1c, 0xa6, 0x1c,
		0xa6, 0xdc, 0x94, 0x29, 0x17, 0x81, 0xb0, 0x3d, 0x6d, 0x0b, 0xbe, 0x40, 0x05, 0x86, 0x1b, 0x86,
		0xfb, 0x28, 0x0d, 0xf7, 0x1f, 0x3c, 0x0a, 0xd8, 0x8d, 0x1d, 0x73, 0x87, 0xf5, 0x82, 0x91, 0x2f,
		0x78, 0xd4, 0x6e, 0x69, 0x98, 0xf1, 0x37, 0x0a, 0x8f, 0xfe, 0x95, 0xf7, 0xed, 0x91, 0x97, 0x6e,
		0x7c, 0x5d, 0xe5, 0xab, 0xff, 0x6e, 0xc7, 0x33, 0x12, 0x6a, 0x1c, 0x00, 0x28, 0x01, 0x28, 0x91,
		0x6f, 0x8b, 0x69, 0x2a, 0x92, 0x01, 0x2a, 0x8a, 0x01, 0x15, 0x07, 0x5b, 0xef, 0x2b, 0x5d, 0xb5,
		0x6a, 0x91, 0x17, 0xfb, 0xfe, 0x32, 0x5b, 0x02, 0x55, 0xa9, 0xef, 0x0b, 0x8d, 0x63, 0x92, 0x3d,
		0x1e, 0x13, 0xc7, 0x52, 0xc9, 0x55, 0xab, 0x4c, 0x77, 0x06, 0x9b, 0x37, 0xfe, 0xf9, 0xed, 0xdc,
		0xb0, 0x95, 0x15, 0x37, 0xbc, 0x6b, 0x4f, 0xdf, 0x67, 0xdb, 0x46, 0xce, 0x5d, 0xfa, 0x9f, 0x7b,
		0x6a, 0xcb, 0x41, 0xe5, 0xab, 0x9f, 0xce, 0x0d, 0x96, 0x65, 0xc0, 0x31, 0x09, 0x18, 0x96, 0x05,
		0xbf, 0xca, 0x60, 0x57, 0x19, 0xdc, 0x52, 0x81, 0x59, 0x3d, 0x81, 0xcc, 0x5b, 0xef, 0x9c, 0x35,
		0xa0, 0x54, 0xec, 0xcc, 0x8a, 0xa2, 0x7d, 0x3d, 0x8f, 0x0c, 0x45, 0xfb, 0x16, 0x09, 0x13, 0x4f,
		0x1f, 0xc8, 0x0a, 0xf5, 0x74, 0x0b, 0xfd, 0x10, 0x90, 0x40, 0x40, 0x02, 0xe3, 0x6d, 0xd5, 0x62,
		0x10, 0xb2, 0xe3, 0x6d, 0x31, 0x39, 0x01, 0xe3, 0x2c, 0x67, 0x6f, 0x71, 0xc3, 0x73, 0xe0, 0xde,
		0xe7, 0xb9, 0x97, 0xe7, 0xf2, 0x02, 0xa0, 0xbb, 0xa1, 0xbb, 0xa1, 0xbb, 0xa1, 0xbb, 0xa1, 0xbb,
		0x49, 0x75, 0x77, 0xdf, 0xbd, 0x61, 0x61, 0x14, 0x0c, 0x22, 0x7b, 0x38, 0x74, 0xfd, 0x81, 0x5e,
		0x91, 0xee, 0x3c, 0x21, 0xcc, 0x45, 0x80, 0x46, 0x3f, 0xa6, 0xb9, 0x08, 0xe3, 0x02, 0xf5, 0xd8,
		0x0b, 0x04, 0xc1, 0x58, 0x84, 0x05, 0x6a, 0x68, 0x2c, 0x8c, 0xc6, 0xc2, 0x68, 0x2c, 0xac, 0x0f,
		0xba, 0x56, 0xb8, 0x6a, 0xe4, 0xfa, 0xe2, 0x0d, 0x41, 0x4b, 0xe1, 0x73, 0x0c, 0x45, 0x58, 0x22,
		0x36, 0xcd, 0xfd, 0x62, 0x28, 0x82, 0xca, 0x51, 0x98, 0x18, 0x8a, 0xf0, 0x06, 0xb3, 0x10, 0x0a,
		0x7a, 0xba, 0x5b, 0xa8, 0x3a, 0xd4, 0x6a, 0x3f, 0x37, 0x2f, 0xfd, 0x7a, 0x6d, 0xe8, 0xe6, 0x99,
		0x97, 0xbc, 0x1d, 0xdd, 0x94, 0xb8, 0x56, 0x5b, 0x3a, 0xf5, 0x93, 0x7d, 0x52, 0x6a, 0xfa, 0x66,
		0x8b, 0x11, 0x01, 0x14, 0x1c, 0xd3, 0x01, 0x08, 0x04, 0x08, 0x04, 0x08, 0x34, 0x00, 0x02, 0xb9,
		0x3f, 0x1a, 0xf2, 0x28, 0xab, 0x82, 0x21, 0x98, 0x2e, 0xd1, 0xd2, 0xa0, 0xf1, 0xde, 0x1f, 0x0d,
		0x93, 0x97, 0x3a, 0x8c, 0x06, 0xab, 0xe5, 0xe9, 0xea, 0xd9, 0x5e, 0x6c, 0xfa, 0x78, 0xaa, 0x17,
		0xab, 0xb2, 0xa8, 0x6a, 0x92, 0xda, 0x0b, 0x4d, 0x20, 0x3f, 0x7f, 0xef, 0xde, 0x7c, 0x9a, 0x5b,
		0x54, 0x09, 0x6e, 0x0d, 0xb8, 0x8e, 0x7a, 0x3c, 0x30, 0xf7, 0x08, 0x6c, 0x4d, 0x53, 0x85, 0x10,
		0x20, 0x42, 0x80, 0xb4, 0x7a, 0x0b, 0x57, 0xfb, 0x8a, 0x0f, 0x1c, 0xa0, 0x1e, 0xdf, 0x78, 0x40,
		0x00, 0x57, 0xfb, 0xe8, 0x9f, 0x2a, 0xc3, 0xd5, 0xbe, 0x14, 0xdf, 0x84, 0x6a, 0xb6, 0x6c, 0xb1,
		0x18, 0x59, 0xad, 0x98, 0x11, 0x66, 0x1b, 0x66, 0xfb, 0x30, 0xcc, 0xb6, 0xba, 0x10, 0x2c, 0x78,
		0x80, 0x2a, 0x17, 0xfa, 0x3e, 0xd9, 0x42, 0xf0, 0xc8, 0x57, 0x36, 0xdf, 0x95, 0x6a, 0xf5, 0xea,
		0xf1, 0xba, 0xce, 0x2e, 0x6d, 0xd6, 0x7f, 0xc7, 0xbe, 0xef, 0x7e, 0xad, 0xbf, 0x6e, 0x3d, 0xd5,
		0xae, 0x6a, 0xd5, 0xe5, 0xbf, 0xbb, 0xaa, 0x7d, 0xad, 0xbf, 0x3e, 0x7f, 0xaa, 0x56, 0xd7, 0xfc,
		0xcb, 0xdb, 0x75, 0x34, 0x6a, 0x8f, 0xd5, 0x6a, 0xb5, 0x79, 0x7e, 0x5d, 0x67, 0xe7, 0xdd, 0xc7,
		0xe6, 0x75, 0x9d, 0xb5, 0xba, 0xc9, 0x67, 0xba, 0x8f, 0xd7, 0xf5, 0x46, 0xf7, 0x6d, 0xfa, 0x6b,
		0xf6, 0xdf, 0x5a, 0xa7, 0x73, 0x52, 0xfb, 0x7a, 0xf6, 0x94, 0xef, 0xc3, 0xb5, 0x5a, 0xf5, 0x34,
		0x5b, 0x43, 0xb7, 0xf6, 0x98, 0xfd, 0xfc, 0xda, 0x7c, 0xaa, 0x3d, 0x56, 0x1b, 0xd7, 0x75, 0xd6,
		0xe8, 0x4e, 0xfe, 0xa1, 0x91, 0x10, 0x79, 0x93, 0x7c, 0xbc, 0xb2, 0x97, 0xca, 0xd9, 0xb3, 0x63,
		0xc1, 0xec, 0x30, 0x64, 0xa3, 0xd0, 0xb1, 0x85, 0x46, 0x8d, 0xf3, 0x32, 0x21, 0x28, 0x69, 0x28,
		0xe9, 0xa3, 0x54, 0xd2, 0x09, 0xf7, 0x33, 0xdb, 0x77, 0x98, 0x70, 0x87, 0x9c, 0x39, 0xdc, 0x13,
		0x76, 0xd1, 0xca, 0xfa, 0x03, 0xf7, 0x07, 0x69, 0x50, 0x6a, 0xbf, 0x5d, 0xad, 0x26, 0x7c, 0x2d,
		0xe3, 0xbe, 0xd6, 0x59, 0x13, 0x3e, 0x96, 0xae, 0x8f, 0xb5, 0x0b, 0x38, 0xd5, 0xe9, 0x38, 0x5f,
		0x5b, 0x4f, 0x2c, 0xf9, 0xd1, 0x9c, 0xfc, 0xf8, 0x35, 0xfb, 0x71, 0xb5, 0xf0, 0xa3, 0xda, 0xe9,
		0x9c, 0x74, 0x3a, 0xce, 0xab, 0xda, 0xdb, 0xea, 0x6f, 0x8f, 0xd7, 0x9d, 0xce, 0xab, 0x4e, 0x87,
		0x75, 0x17, 0x3e, 0xb1, 0xa7, 0xc8, 0x65, 0xc8, 0x45, 0xe4, 0xf6, 0xd4, 0x01, 0xcb, 0xf8, 0x79,
		0xe0, 0x14, 0xe0, 0x14, 0xc4, 0x80, 0x11, 0x03, 0x46, 0x0c, 0x18, 0x31, 0x60, 0xc4, 0x80, 0x71,
		0xfd, 0x06, 0xd7, 0x6f, 0x16, 0xde, 0xc2, 0xe7, 0xf7, 0x82, 0xdd, 0x06, 0x21, 0x1b, 0x44, 0xc1,
		0x48, 0x63, 0xd6, 0xcd, 0x12, 0x1d, 0xa0, 0x2e, 0xa0, 0xae, 0xa3, 0x44, 0x5d, 0x1e, 0xb7, 0xfb,
		0x11, 0xef, 0xeb, 0x44, 0x84, 0x2e, 0xd4, 0xfc, 0xcd, 0xb4, 0x48, 0xe9, 0xe4, 0xe4, 0x34, 0xfb,
		0xff, 0xa2, 0x3c, 0x9e, 0xba, 0xbe, 0xc3, 0xef, 0xcb, 0x50, 0xd1, 0x93, 0x70, 0x27, 0x8f, 0xb8,
		0xdf, 0xd3, 0x08, 0x45, 0xcf, 0xd1, 0x80, 0x9e, 0x81, 0x9e, 0x39, 0x5a, 0xef, 0xee, 0x8d, 0x86,
		0x96, 0x39, 0x87, 0x73, 0x07, 0xe7, 0xce, 0x94, 0x73, 0xd7, 0x3c, 0x87, 0x57, 0x07, 0xaf, 0x0e,
		0x5e, 0xdd, 0xce, 0xbc, 0xba, 0xc5, 0x49, 0x27, 0x54, 0x13, 0x53, 0x80, 0xb6, 0x80, 0xb6, 0xd0,
		0x24, 0x47, 0xd1, 0xab, 0x6b, 0x94, 0x61, 0x9e, 0x52, 0x7a, 0x48, 0xc1, 0x17, 0x9f, 0x47, 0x1a,
		0x3a, 0x61, 0x8e, 0x08, 0x14, 0x02, 0x14, 0xc2, 0x51, 0x2a, 0x84, 0x58, 0x44, 0x8a, 0xf7, 0xb6,
		0xa6, 0x75, 0x3f, 0xc0, 0x77, 0xc0, 0x77, 0x7a, 0x8a, 0x5c, 0xa8, 0xb0, 0xf1, 0x92, 0x1e, 0x4f,
		0x69, 0x40, 0x8d, 0x43, 0x8d, 0x1f, 0x67, 0xc1, 0xbd, 0xc3, 0x7d, 0xe1, 0x8a, 0x07, 0xcd, 0x88,
		0xbd, 0x4a, 0x30, 0xed, 0x87, 0xf1, 0x57, 0x7f, 0x67, 0xc7, 0x5c, 0xbf, 0x47, 0xc3, 0xec, 0xa4,
		0xe4, 0xe5, 0x79, 0x31, 0x7c, 0x13, 0x6b, 0xb5, 0x02, 0xd2, 0x0c, 0x20, 0x4d, 0x5f, 0x27, 0x76,
		0x75, 0x1a, 0x01, 0xbc, 0xde, 0xf5, 0xfa, 0xed, 0xc1, 0x20, 0xe2, 0x03, 0x5b, 0xf0, 0x7d, 0x7e,
		0x09, 0xdf, 0xf9, 0xbd, 0xb1, 0xcf, 0xeb, 0xbf, 0x19, 0x84, 0xfb, 0xbc, 0xfc, 0x20, 0x0e, 0xfb,
		0x77, 0xcd, 0x3d, 0x67, 0xa0, 0xe6, 0x9e, 0x33, 0x10, 0xe3, 0x77, 0xa1, 0xbf, 0xcf, 0xef, 0x70,
		0x1b, 0x6c, 0x1b, 0x39, 0x53, 0xee, 0xf5, 0x7b, 0x41, 0xcf, 0xf6, 0xf6, 0xda, 0x14, 0x44, 0x21,
		0xf3, 0x9d, 0xbd, 0x3e, 0x02, 0xd7, 0x1f, 0xdd, 0xef, 0xf3, 0x0b, 0xa4, 0x83, 0xb7, 0x7a, 0x7b,
		0x6f, 0x0b, 0xce, 0xf6, 0xf9, 0x0d, 0x9c, 0xdb, 0x5e, 0x58, 0x74, 0x6b, 0xa7, 0x6e, 0xc9, 0xfc,
		0x15, 0x04, 0x65, 0xf6, 0x2f, 0x28, 0x43, 0x3a, 0x98, 0xe8, 0x1f, 0xfc, 0x61, 0xe9, 0x9a, 0xb7,
		0x35, 0xf3, 0xda, 0xac, 0xb9, 0xc0, 0xba, 0x95, 0xbb, 0x79, 0x91, 0x5a, 0xf7, 0x45, 0xf5, 0x6e,
		0x8b, 0xa4, 0xdd, 0x15, 0xd5, 0xba, 0x29, 0xee, 0xcf, 0xec, 0xc7, 0xa5, 0xb6, 0x5f, 0x45, 0x8f,
		0x7d, 0x5c, 0x6c, 0xef, 0x45, 0x36, 0xf1, 0xf1, 0x75, 0xce, 0xe9, 0x70, 0x2c, 0x1e, 0x0d, 0x87,
		0x76, 0xf4, 0xa0, 0x38, 0x25, 0x6e, 0xfa, 0x38, 0xa6, 0xc5, 0x69, 0x45, 0x1d, 0x31, 0x2d, 0x6e,
		0xf3, 0xe2, 0xa4, 0xa7, 0xc5, 0x95, 0x22, 0xf8, 0x8e, 0x39, 0x15, 0x08, 0xbe, 0xef, 0x14, 0xcc,
		0x2a, 0xcf, 0xa9, 0xc8, 0x86, 0x25, 0x66, 0xef, 0x46, 0xd0, 0x9d, 0x78, 0x91, 0x1c, 0x9a, 0x14,
		0xa3, 0x49, 0x31, 0x9a, 0x14, 0x4f, 0x5f, 0x86, 0x76, 0x52, 0x85, 0xd2, 0x6d, 0xe2, 0x65, 0x19,
		0xbb, 0xc0, 0xa8, 0x8a, 0x25, 0x62, 0x44, 0x85, 0xe9, 0x53, 0x7a, 0x18, 0x55, 0xa1, 0x7d, 0x14,
		0x54, 0xb7, 0x93, 0xf7, 0xf1, 0x4c, 0xf6, 0x6b, 0x66, 0x45, 0x21, 0x93, 0x14, 0x16, 0xb2, 0xeb,
		0x6c, 0xec, 0x94, 0x53, 0x66, 0xec, 0x33, 0x9a, 0x00, 0x2f, 0x00, 0x2f, 0x00, 0x2f, 0x06, 0xc0,
		0x8b, 0x5e, 0x99, 0xcf, 0x8a, 0xeb, 0xad, 0x33, 0x3f, 0x86, 0xa4, 0xec, 0x67, 0xb3, 0x32, 0xd1,
		0xe5, 0x4a, 0x82, 0x32, 0x20, 0x3a, 0xa8, 0x65, 0xd1, 0x95, 0x05, 0x11, 0xa2, 0x0e, 0xe2, 0xf7,
		0x22, 0x28, 0x17, 0x2a, 0xef, 0xcb, 0xe9, 0x95, 0x11, 0x95, 0xf7, 0xbd, 0xb4, 0xca, 0x8b, 0xca,
		0xfb, 0x5a, 0xba, 0x65, 0x47, 0xa5, 0x66, 0xc4, 0xe6, 0x81, 0x32, 0xa2, 0x66, 0x99, 0x52, 0x79,
		0xdf, 0x4d, 0xaf, 0x7c, 0xa9, 0xbc, 0xef, 0xa5, 0x59, 0xd6, 0x54, 0x62, 0x53, 0xa6, 0x59, 0xee,
		0x54, 0xe2, 0x23, 0xd3, 0x2b, 0x83, 0x2a, 0xef, 0x8b, 0xe9, 0x96, 0x47, 0x95, 0xdc, 0x96, 0x9d,
		0x1d, 0xe2, 0x9b, 0xe9, 0x95, 0x53, 0xd1, 0xc4, 0x7a, 0xba, 0xa5, 0xef, 0xa1, 0x60, 0x36, 0x03,
		0x36, 0xad, 0xe6, 0xd1, 0x0c, 0xe4, 0xe8, 0x0d, 0x50, 0xd5, 0x1f, 0x9c, 0x6a, 0x64, 0x60, 0xaa,
		0xde, 0xa0, 0xd4, 0x83, 0x99, 0xf4, 0x37, 0x29, 0x62, 0x39, 0xd5, 0x72, 0xcf, 0x0d, 0x54, 0x03,
		0xfd, 0x92, 0xad, 0x6b, 0xfc, 0x99, 0x64, 0x59, 0xa6, 0xee, 0xa7, 0x1f, 0x76, 0x4d, 0x97, 0x64,
		0x95, 0x92, 0xd9, 0xd3, 0x2c, 0xb2, 0xc4, 0x2b, 0x45, 0x0d, 0xb1, 0x70, 0x7b, 0xb1, 0x7c, 0x7d,
		0xd7, 0xdc, 0xb3, 0x28, 0xee, 0xca, 0x88, 0xa1, 0xb8, 0xcb, 0x88, 0xbe, 0x90, 0x2e, 0xee, 0xd2,
		0xab, 0x4e, 0x21, 0xa9, 0x4a, 0xc1, 0xfd, 0x6a, 0x94, 0x78, 0x95, 0x02, 0xe0, 0xa2, 0x07, 0xbd,
		0x34, 0x12, 0x47, 0x9b, 0x42, 0xa3, 0xde, 0x34, 0x7a, 0xd0, 0x97, 0xd4, 0xd3, 0x2e, 0xc3, 0xc0,
		0x98, 0x05, 0x9b, 0xcb, 0xbe, 0xb8, 0xe2, 0x96, 0xf1, 0xde, 0x30, 0x24, 0x32, 0xe2, 0x73, 0x04,
		0x61, 0xce, 0x61, 0xce, 0x61, 0xce, 0x61, 0xce, 0x61, 0xce, 0x61, 0xce, 0x61, 0xce, 0x4d, 0x99,
		0xf3, 0xbe, 0x7b, 0xc3, 0xfa, 0xb6, 0xeb, 0x71, 0x47, 0xdb, 0x1b, 0x5f, 0x25, 0x05, 0x13, 0x0e,
		0x13, 0x0e, 0x13, 0x0e, 0x13, 0x0e, 0x13, 0x0e, 0x13, 0x0e, 0x13, 0x6e, 0xac, 0xdf, 0xf4, 0x42,
		0xfb, 0x78, 0x6d, 0x33, 0xbe, 0x9e, 0x1c, 0x4c, 0x39, 0x4c, 0x39, 0x4c, 0x39, 0x4c, 0x39, 0x4c,
		0x39, 0x4c, 0x39, 0x4c, 0xb9, 0x29, 0x53, 0x2e, 0x02, 0x61, 0x7b, 0xda, 0x16, 0x7c, 0x81, 0x0a,
		0x0c, 0x37, 0x0c, 0xf7, 0x51, 0x1a, 0xee, 0x3f, 0x78, 0x14, 0xb0, 0x1b, 0x3b, 0xe6, 0x0e, 0xeb,
		0x05, 0x23, 0x5f, 0xf0, 0xa8, 0xdd, 0xd2, 0x30, 0xe3, 0x6f, 0x14, 0x1e, 0xfd, 0x2b, 0xef, 0xdb,
		0x23, 0x2f, 0xdd, 0xf8, 0xba, 0xca, 0x57, 0xff, 0xdd, 0x8e, 0x67, 0x24, 0xd4, 0x38, 0x00, 0x50,
		0x02, 0x50, 0x22, 0xdf, 0x16, 0xd3, 0x54, 0x24, 0x03, 0x54, 0x14, 0x03, 0x2a, 0x0e, 0xb6, 0xde,
		0x57, 0xba, 0x6a, 0xd5, 0x22, 0x2f, 0xf6, 0xfd, 0x65, 0xb6, 0x04, 0xaa, 0x52, 0xdf, 0x17, 0x1a,
		0xc7, 0x24, 0x7b, 0x3c, 0x26, 0x8e, 0xa5, 0x92, 0xab, 0x56, 0x99, 0xee, 0x0c, 0x36, 0x6f, 0xfc,
		0xf3, 0xdb, 0xb9, 0x61, 0x2b, 0xa7, 0xc3, 0xf3, 0xb7, 0x6e, 0xe2, 0xca, 0xb8, 0xfd, 0x2d, 0x6f,
		0x9f, 0xb3, 0x6e, 0x3a, 0x37, 0x48, 0x96, 0x01, 0xc5, 0x24, 0x20, 0x58, 0x16, 0xf4, 0x2a, 0x83,
		0x5c, 0x65, 0x50, 0x4b, 0x05, 0x62, 0xf5, 0x04, 0x31, 0x6f, 0x9d, 0x73, 0x25, 0x1b, 0x04, 0x2f,
		0x5d, 0xb1, 0x9f, 0x3d, 0x26, 0x57, 0xac, 0x5f, 0x47, 0xb1, 0x3e, 0xb1, 0x07, 0x76, 0xe0, 0xc5,
		0xfa, 0xd2, 0x9e, 0xd5, 0x42, 0x28, 0x54, 0xca, 0x87, 0x52, 0xf0, 0x9d, 0x14, 0xfd, 0x15, 0xb5,
		0x1b, 0x7d, 0xea, 0x5e, 0xbe, 0xa6, 0x5f, 0x42, 0x86, 0x8c, 0xf5, 0x11, 0xf1, 0x93, 0xda, 0x55,
		0x46, 0xfd, 0xad, 0xa3, 0xf3, 0x37, 0xca, 0xb4, 0x9b, 0x86, 0xf0, 0x7e, 0xb7, 0xc0, 0x3b, 0x67,
		0x6e, 0xc8, 0x6c, 0xc7, 0x89, 0x78, 0xac, 0x70, 0xe7, 0x6c, 0xee, 0x59, 0x98, 0x31, 0x98, 0xb1,
		0x52, 0x9a, 0x31, 0x69, 0x1e, 0x5d, 0xc0, 0xf8, 0x97, 0x12, 0xcf, 0x8c, 0xd7, 0x68, 0xdc, 0x94,
		0xcd, 0xde, 0xec, 0xae, 0xa5, 0xf0, 0x6e, 0x2b, 0xef, 0xa8, 0x12, 0xeb, 0xfc, 0x64, 0x0b, 0xc1,
		0x23, 0x5f, 0x39, 0xd2, 0x58, 0xa9, 0x56, 0xaf, 0xeb, 0xec, 0xb2, 0xfb, 0x78, 0xdd, 0x60, 0x97,
		0xdd, 0xec, 0xd7, 0x46, 0xfa, 0x23, 0xfb, 0xbd, 0x79, 0x5d, 0x67, 0xad, 0xc9, 0xef, 0xe7, 0xd7,
		0x75, 0x76, 0xde, 0xad, 0x75, 0x3a, 0x27, 0xb5, 0xaf, 0x67, 0x4f, 0xf2, 0x0f, 0x56, 0x4c, 0x07,
		0x72, 0x5e, 0x17, 0x78, 0xe4, 0xed, 0x3d, 0x3e, 0xf2, 0xab, 0xc7, 0xe4, 0x60, 0x6c, 0xd6, 0x7f,
		0xc7, 0xbe, 0xef, 0x7e, 0xad, 0xbf, 0x6e, 0x3d, 0xd5, 0xae, 0x6a, 0xd5, 0xe5, 0xbf, 0xbb, 0xaa,
		0x7d, 0xad, 0xbf, 0x3e, 0x7f, 0xaa, 0x56, 0xd7, 0xfc, 0xcb, 0xdb, 0x75, 0x34, 0x6a, 0x8f, 0xd5,
		0x6a, 0x75, 0x7c, 0xd8, 0x0b, 0x0c, 0x70, 0x5d, 0x6f, 0x74, 0xdf, 0xa6, 0xbf, 0x66, 0xff, 0x9d,
		0xb2, 0x50, 0xae, 0x0f, 0xd7, 0xcc, 0x33, 0x0e, 0x35, 0x22, 0xc8, 0xa9, 0x4d, 0xa5, 0x87, 0x26,
		0xa9, 0x1b, 0x33, 0xca, 0x21, 0x49, 0xb4, 0x36, 0x4e, 0x6e, 0x28, 0x52, 0xbe, 0xa3, 0xea, 0x92,
		0x40, 0xb2, 0x61, 0xe8, 0x29, 0x80, 0xb1, 0xf4, 0x29, 0x5c, 0xfd, 0x07, 0x0c, 0x33, 0x08, 0xc3,
		0xa4, 0xaf, 0xfe, 0x87, 0xa3, 0xf8, 0x96, 0x3b, 0x2c, 0xe1, 0x4d, 0xe6, 0xd9, 0x37, 0xdc, 0x63,
		0xb1, 0xb0, 0x7b, 0xbf, 0xab, 0x57, 0x3b, 0x3c, 0x47, 0x10, 0x85, 0x0f, 0x72, 0x44, 0x51, 0xf8,
		0x60, 0xc6, 0xc7, 0x2f, 0xbc, 0xf0, 0x61, 0x26, 0x09, 0x3a, 0x80, 0xf0, 0x52, 0xe1, 0x59, 0x25,
		0x7f, 0x47, 0x1d, 0x04, 0xaf, 0x0d, 0x50, 0x62, 0x7c, 0x06, 0x45, 0x80, 0xf3, 0xf9, 0xa8, 0x5d,
		0x1b, 0xf3, 0x33, 0x54, 0xce, 0xc2, 0xc4, 0xfc, 0x8c, 0x46, 0xbd, 0xf5, 0xe6, 0xfc, 0x02, 0xc3,
		0x33, 0x8a, 0x7a, 0xba, 0x5b, 0x64, 0x63, 0x7e, 0x02, 0x75, 0xc8, 0xfd, 0xd1, 0x90, 0x47, 0x59,
		0xe1, 0x00, 0x41, 0x43, 0xfe, 0x96, 0x06, 0x8d, 0xf7, 0xfe, 0x68, 0x98, 0x08, 0x40, 0x49, 0xeb,
		0x6e, 0xf6, 0xbb, 0x95, 0x64, 0xe1, 0x7d, 0x23, 0x8f, 0xb3, 0x4c, 0x69, 0x52, 0x0d, 0x72, 0x2a,
		0xe1, 0x57, 0x5b, 0x24, 0x85, 0x31, 0x3f, 0xf2, 0x7b, 0xf1, 0xf7, 0x20, 0xfc, 0xfc, 0x31, 0xf9,
		0xe2, 0x22, 0x07, 0xcc, 0xf2, 0x38, 0xf0, 0xee, 0x5c, 0x7f, 0x90, 0x21, 0x66, 0x85, 0x11, 0xb3,
		0x4b, 0x04, 0x10, 0x8c, 0x40, 0x30, 0xa2, 0x4c, 0xc1, 0x08, 0x37, 0x1c, 0x4f, 0x08, 0x57, 0x0f,
		0x3f, 0xcc, 0x48, 0x20, 0xe0, 0x80, 0x80, 0xc3, 0x51, 0x06, 0x1c, 0x54, 0x45, 0x60, 0xef, 0xe3,
		0x0d, 0x69, 0xbe, 0x55, 0x7b, 0x48, 0x99, 0x4e, 0x0e, 0x6e, 0x26, 0xdd, 0x9a, 0xb9, 0xb8, 0x29,
		0xa1, 0x22, 0xd3, 0xb0, 0xa7, 0xe3, 0x2f, 0xab, 0x3d, 0x56, 0xaf, 0x1b, 0xac, 0xd9, 0x9d, 0xfc,
		0xe1, 0xec, 0xba, 0xce, 0x9a, 0x5d, 0x95, 0x6c, 0xdb, 0xbe, 0xba, 0x6a, 0x69, 0x1a, 0xf7, 0xe0,
		0x38, 0x69, 0xdf, 0xb2, 0xbb, 0xd5, 0x79, 0x86, 0x4c, 0x7e, 0x7e, 0x6d, 0x3e, 0xd5, 0x1e, 0xab,
		0x09, 0x1b, 0x37, 0xa6, 0xcc, 0xd9, 0x48, 0x88, 0xbc, 0x51, 0x4b, 0x06, 0x6b, 0xb2, 0xe7, 0x7e,
		0xb6, 0xa7, 0x48, 0x6d, 0x5f, 0xf0, 0xc5, 0xe7, 0x91, 0xee, 0x24, 0xff, 0x8c, 0x08, 0x70, 0x16,
		0x70, 0xd6, 0x51, 0xe2, 0xac, 0x58, 0x44, 0xae, 0x3f, 0xd0, 0xaa, 0xf2, 0x29, 0x8d, 0x3e, 0x10,
		0x2a, 0xbb, 0xb1, 0xa4, 0x0e, 0x14, 0xe6, 0x7c, 0x40, 0x1b, 0x40, 0x1b, 0x1c, 0x8a, 0xd7, 0xa5,
		0x35, 0x6e, 0x57, 0x67, 0xcc, 0x2e, 0xcd, 0x78, 0x5d, 0xd2, 0xb1, 0xba, 0x14, 0xe3, 0x74, 0xa9,
		0xa6, 0x04, 0x6b, 0x8d, 0xcf, 0xd5, 0x48, 0x36, 0x12, 0xad, 0x9f, 0x60, 0x4c, 0xee, 0xee, 0x5f,
		0x42, 0x6f, 0x1c, 0xee, 0xee, 0xd7, 0xaf, 0x35, 0xf6, 0x76, 0xf7, 0xcb, 0xd7, 0x1d, 0x6f, 0x5b,
		0x0a, 0x06, 0x6a, 0xee, 0x39, 0x03, 0x69, 0x8e, 0xab, 0xdd, 0xfd, 0x3b, 0xe8, 0x8d, 0xa5, 0xdd,
		0xfd, 0xfa, 0x35, 0xc7, 0xcf, 0x96, 0xc0, 0x14, 0x68, 0x8e, 0x99, 0x2d, 0xc1, 0x11, 0xe8, 0x8d,
		0x93, 0xdd, 0xfd, 0x0b, 0xe8, 0x8e, 0x8d, 0x2d, 0x89, 0x2d, 0x38, 0xdb, 0xe7, 0x37, 0xd0, 0x1b,
		0x03, 0xab, 0x56, 0xf2, 0xd2, 0x2d, 0xcd, 0xd5, 0xd3, 0xc3, 0xac, 0xe1, 0x50, 0xab, 0x4c, 0xb0,
		0x48, 0xcb, 0x39, 0x7e, 0x9e, 0xac, 0x21, 0xfd, 0xb7, 0xdd, 0x14, 0x76, 0x88, 0x91, 0xef, 0x73,
		0x4f, 0xa7, 0xb2, 0x63, 0x4c, 0x01, 0xa5, 0x1d, 0x5a, 0xf1, 0x15, 0x94, 0x76, 0x6c, 0x5e, 0x1c,
		0x4a, 0x3b, 0x10, 0x64, 0x44, 0x90, 0x11, 0xa5, 0x1d, 0x86, 0x71, 0x1f, 0x4a, 0x3b, 0x50, 0xda,
		0x41, 0xcf, 0x49, 0x28, 0xed, 0x40, 0x69, 0x07, 0xb5, 0x93, 0x58, 0x8a, 0x76, 0xe5, 0x29, 0xf4,
		0xd7, 0xad, 0xed, 0x58, 0xa0, 0x02, 0xa4, 0x05, 0xa4, 0x85, 0xe2, 0x0e, 0x35, 0xcb, 0x50, 0x1e,
		0x8d, 0xa0, 0x57, 0xdd, 0x31, 0x4f, 0x04, 0xfa, 0x00, 0xfa, 0x00, 0xe5, 0x1d, 0xfb, 0x5c, 0xde,
		0xa1, 0x2e, 0xcd, 0x53, 0x52, 0xe5, 0x29, 0xee, 0xf0, 0x9c, 0xbd, 0xce, 0xcb, 0xc7, 0x11, 0xdb,
		0xff, 0xd4, 0xfc, 0xdd, 0xbd, 0x67, 0xfb, 0x7b, 0x7e, 0x0a, 0x61, 0xe0, 0xb9, 0xbd, 0x87, 0xb4,
		0x69, 0xcd, 0x21, 0xf0, 0xd3, 0xd9, 0x9e, 0xbf, 0xc4, 0x01, 0x9c, 0x83, 0x66, 0xd9, 0x19, 0x92,
		0x94, 0xf3, 0x90, 0xa3, 0x74, 0x49, 0x4a, 0xa9, 0x24, 0x9b, 0x65, 0x26, 0x4b, 0xf9, 0x6b, 0xb6,
		0x86, 0x02, 0xd3, 0x94, 0xf1, 0xe8, 0xc6, 0xf5, 0x05, 0x8f, 0xfa, 0x76, 0x4f, 0xe1, 0xf2, 0xf9,
		0xc2, 0xd3, 0xe8, 0x46, 0xac, 0xe5, 0x1f, 0x20, 0x3d, 0x49, 0x8c, 0xf7, 0x67, 0x88, 0x92, 0xdb,
		0x7d, 0x39, 0x8c, 0x3f, 0xc5, 0xf6, 0x12, 0x5d, 0xaa, 0x2a, 0x9f, 0x56, 0x95, 0x92, 0xdb, 0xbf,
		0x9a, 0xca, 0xc7, 0xe2, 0x5f, 0xcf, 0x4b, 0xce, 0xe2, 0xbf, 0xa4, 0xfa, 0x04, 0x9d, 0x47, 0x8f,
		0xa7, 0xf3, 0xa8, 0x54, 0x24, 0x67, 0xe6, 0xf3, 0xe5, 0x77, 0xf6, 0xa0, 0x72, 0xa1, 0x72, 0x0b,
		0x56, 0xb9, 0x6a, 0xa1, 0x15, 0x95, 0x90, 0x8a, 0x5e, 0x28, 0x65, 0xba, 0xe0, 0xbe, 0x7b, 0xc3,
		0x12, 0x50, 0x78, 0x1b, 0x84, 0x4a, 0x51, 0x51, 0x8d, 0xf8, 0x89, 0xee, 0xdd, 0x1e, 0xdf, 0x71,
		0x23, 0xde, 0x53, 0x28, 0xe3, 0x56, 0x70, 0xaa, 0x34, 0xd7, 0xba, 0x3f, 0x2b, 0x8d, 0xf8, 0xbf,
		0xf6, 0x64, 0xa5, 0x59, 0xf9, 0xb2, 0xa2, 0x7f, 0x5d, 0xfc, 0x72, 0x85, 0x84, 0x8b, 0xb3, 0xdb,
		0x95, 0xde, 0x44, 0x81, 0xed, 0x6c, 0x9f, 0x94, 0x57, 0x8e, 0xc5, 0xf2, 0x7b, 0x11, 0xd9, 0xfb,
		0xa2, 0x04, 0xe2, 0x9e, 0x1d, 0x39, 0xa6, 0xf3, 0x09, 0xdd, 0x1d, 0x19, 0x4d, 0xa0, 0xed, 0x52,
		0xa3, 0xed, 0x2c, 0xb4, 0x2d, 0x0d, 0xb7, 0xb3, 0xc7, 0x50, 0x81, 0x0d, 0xbc, 0x6d, 0x50, 0x75,
		0x48, 0x57, 0x60, 0x3b, 0x3c, 0x16, 0xae, 0x9f, 0x86, 0x51, 0xd9, 0xd0, 0xee, 0xa9, 0xc3, 0xdf,
		0x65, 0x42, 0xa8, 0x09, 0x90, 0x23, 0x8a, 0x9a, 0x00, 0x23, 0x36, 0x7c, 0x07, 0x9d, 0xfd, 0xed,
		0xde, 0xde, 0xce, 0x7a, 0x9a, 0x2f, 0xf5, 0x6c, 0x3e, 0x55, 0xaf, 0x16, 0xff, 0x5c, 0xfb, 0x7a,
		0xfe, 0x54, 0xd9, 0xcb, 0x1a, 0xc8, 0x38, 0x15, 0x2e, 0x3d, 0x05, 0x37, 0x47, 0x03, 0xba, 0x0d,
		0xba, 0x0d, 0xba, 0x0d, 0xba, 0xad, 0x14, 0xba, 0xed, 0xce, 0x77, 0xd5, 0x95, 0x5a, 0xf2, 0x30,
		0xb4, 0x19, 0xb4, 0xd9, 0x51, 0x6a, 0x33, 0xe5, 0x49, 0x44, 0x1a, 0x13, 0x88, 0x34, 0x27, 0x0f,
		0x69, 0x5c, 0x75, 0xa2, 0x98, 0x34, 0x34, 0x9b, 0x6a, 0xa3, 0x37, 0x76, 0x86, 0x7c, 0x8e, 0x0d,
		0xdd, 0xfc, 0x1a, 0x8d, 0x3a, 0x31, 0x92, 0x01, 0x42, 0x73, 0x43, 0x9c, 0x2e, 0x2e, 0x2e, 0x9a,
		0x8d, 0xf3, 0xc3, 0xdd, 0xe9, 0x7d, 0xbf, 0x84, 0x75, 0x90, 0xe5, 0x6c, 0x32, 0x61, 0x4a, 0x8b,
		0xb4, 0x86, 0xed, 0x7f, 0xf2, 0x97, 0x0c, 0xe7, 0xa8, 0x5c, 0x7b, 0xa1, 0x71, 0x28, 0x89, 0x89,
		0x1e, 0x27, 0x46, 0xf9, 0x36, 0xeb, 0x2c, 0x37, 0x67, 0x48, 0x7e, 0xae, 0xd0, 0xf2, 0x1c, 0xa1,
		0x37, 0xad, 0x56, 0xfb, 0xa2, 0xd5, 0xaa, 0x5f, 0x9c, 0x5d, 0xd4, 0x2f, 0xcf, 0xcf, 0x1b, 0xed,
		0x3c, 0x1a, 0x42, 0x6e, 0x94, 0xd0, 0xb6, 0xdd, 0x91, 0x64, 0x55, 0x6a, 0x16, 0xad, 0xe4, 0x29,
		0x4a, 0x24, 0x62, 0xca, 0xcd, 0xec, 0xf8, 0x3c, 0x93, 0x6d, 0xd8, 0xc2, 0xca, 0xe4, 0x3d, 0xd8,
		0x20, 0x0a, 0x46, 0xe1, 0xd6, 0x2d, 0x9c, 0x75, 0xbb, 0x5b, 0x7c, 0x6e, 0x1b, 0x0b, 0xe7, 0xca,
		0x20, 0xe4, 0x86, 0xe5, 0x32, 0x30, 0x9c, 0x04, 0x76, 0xcb, 0xc2, 0x6c, 0x65, 0x58, 0xad, 0x0c,
		0xa3, 0xa9, 0x60, 0xb3, 0x9e, 0xaa, 0xca, 0x1b, 0xf1, 0x1f, 0x2b, 0x33, 0xe9, 0xb4, 0x55, 0x1e,
		0x1d, 0xa8, 0xe8, 0x1b, 0x22, 0x6d, 0x55, 0x9c, 0xaf, 0x77, 0xa8, 0x65, 0x62, 0x89, 0x0f, 0xd7,
		0x6e, 0x29, 0x54, 0x88, 0x49, 0xc4, 0xa0, 0x14, 0x7d, 0x36, 0xb5, 0xa9, 0x83, 0xea, 0x71, 0x85,
		0x89, 0xe3, 0xa0, 0x08, 0xf0, 0xc9, 0x3c, 0x05, 0x7d, 0x0f, 0xe1, 0x49, 0x6d, 0xdc, 0xa2, 0xfe,
		0xd6, 0xa9, 0xa1, 0xab, 0xb2, 0xef, 0xa6, 0x21, 0xff, 0xa7, 0x5b, 0xe0, 0x25, 0x93, 0x29, 0xf6,
		0x93, 0xb6, 0x5f, 0x12, 0xa8, 0xd1, 0x42, 0xe5, 0x05, 0x4c, 0x98, 0xaa, 0x09, 0x93, 0xef, 0x7d,
		0xe7, 0x68, 0x34, 0xbd, 0x73, 0x10, 0xb5, 0x47, 0xd4, 0xfe, 0x78, 0xa3, 0xf6, 0x8d, 0xb6, 0x46,
		0xd4, 0xbe, 0x7d, 0xb4, 0x51, 0xfb, 0x3a, 0xa2, 0xf6, 0xc6, 0xa3, 0xf6, 0xf5, 0xe6, 0x19, 0x22,
		0xf6, 0x65, 0x8d, 0xd8, 0x4b, 0xc0, 0x24, 0x69, 0xc4, 0xa9, 0x8b, 0x3c, 0x61, 0xaa, 0x61, 0xaa,
		0x0f, 0xcc, 0x54, 0xcb, 0x5f, 0x9b, 0x5e, 0x71, 0xc3, 0x2e, 0xd4, 0x4a, 0x85, 0xd2, 0x4c, 0xc3,
		0xc9, 0xc9, 0x69, 0xf6, 0xff, 0x69, 0x72, 0x2b, 0x0b, 0x66, 0x96, 0x61, 0xbe, 0x5e, 0xda, 0xaf,
		0x81, 0x6b, 0xb8, 0x00, 0x53, 0x0a, 0xd0, 0x2e, 0xd0, 0x2e, 0x47, 0xa9, 0x5d, 0xb8, 0x3f, 0x1a,
		0xf2, 0x28, 0xcb, 0x43, 0x6a, 0x68, 0x98, 0x96, 0xc2, 0xb3, 0xef, 0xfd, 0xd1, 0x30, 0x59, 0xfc,
		0x7e, 0x74, 0xca, 0x99, 0x64, 0xb3, 0xf3, 0xea, 0x0a, 0xb9, 0x94, 0xf6, 0xbc, 0xab, 0x22, 0x97,
		0xda, 0x9e, 0x47, 0xe0, 0xda, 0x29, 0xee, 0x29, 0x31, 0xa9, 0x54, 0xb7, 0xec, 0x56, 0x96, 0xa4,
		0x4a, 0x23, 0x4b, 0x01, 0x9f, 0x2a, 0x20, 0x4c, 0xb2, 0xcc, 0xf8, 0xdf, 0x92, 0x15, 0xe4, 0x4b,
		0x93, 0x4b, 0x84, 0x82, 0x51, 0xb5, 0xa1, 0xcc, 0xca, 0x25, 0xaf, 0xda, 0xc8, 0x55, 0xb5, 0x40,
		0xcf, 0xa1, 0xca, 0x05, 0x1c, 0x2f, 0x24, 0xf6, 0xb8, 0xf2, 0x6e, 0x34, 0x48, 0x8e, 0x3a, 0xc5,
		0x73, 0xcf, 0x87, 0x88, 0x72, 0xd6, 0x79, 0x2c, 0x6e, 0x75, 0xb2, 0xa9, 0x57, 0x2b, 0x3b, 0xbc,
		0xfa, 0x91, 0xb9, 0x3d, 0x47, 0x69, 0x08, 0x11, 0x64, 0x3b, 0x9a, 0xd2, 0x90, 0xf0, 0xae, 0xc5,
		0x46, 0xbe, 0x9b, 0xb6, 0x2a, 0x90, 0xaf, 0x10, 0x99, 0x7f, 0x3a, 0x6f, 0xb6, 0x84, 0xc7, 0xbd,
		0xc8, 0x0d, 0xc7, 0xda, 0xa8, 0xf2, 0xeb, 0x2d, 0xb7, 0x7a, 0x81, 0x2f, 0x6c, 0xd7, 0xe7, 0x91,
		0xd5, 0x0f, 0x22, 0x4b, 0xdc, 0x72, 0xeb, 0x87, 0x4f, 0x77, 0x2d, 0x6b, 0x4c, 0xd8, 0x4a, 0x36,
		0xce, 0xf5, 0x07, 0x56, 0xba, 0x75, 0x56, 0xd0, 0x4f, 0x3f, 0x31, 0x96, 0x0b, 0x6b, 0x22, 0x17,
		0x27, 0xc8, 0xf2, 0xe9, 0x79, 0x39, 0x47, 0x9b, 0xe5, 0x23, 0xc9, 0x52, 0xa7, 0x53, 0x44, 0x74,
		0xe4, 0xa8, 0x6d, 0x4a, 0x8e, 0xda, 0x90, 0x23, 0xc8, 0xd1, 0xde, 0xc8, 0x11, 0xaa, 0x3d, 0xc0,
		0xbf, 0xe5, 0xae, 0xf6, 0x90, 0x70, 0x35, 0x8f, 0x39, 0xaa, 0x42, 0xaa, 0x0d, 0x72, 0xd6, 0xcb,
		0x3f, 0xab, 0x13, 0x72, 0x7b, 0xa0, 0xd0, 0x0c, 0xd0, 0x0c, 0xd0, 0x0c, 0xbb, 0xd6, 0x0c, 0xa4,
		0x81, 0x9b, 0xee, 0x73, 0x81, 0x9b, 0x7c, 0x41, 0x31, 0xa2, 0x60, 0xd8, 0x06, 0x7e, 0xd0, 0x8e,
		0x7a, 0xad, 0xe7, 0xf7, 0xd5, 0xdd, 0x58, 0xc3, 0xc7, 0x95, 0x74, 0x89, 0x11, 0xdb, 0x50, 0x91,
		0x38, 0x4b, 0x3b, 0x4e, 0x3f, 0xfa, 0xcc, 0x8e, 0x6e, 0xce, 0x2f, 0x6e, 0xd5, 0x93, 0x79, 0xf4,
		0xe2, 0x1a, 0x3d, 0x38, 0x8e, 0x82, 0x6d, 0xda, 0xe0, 0x9c, 0xfa, 0x4e, 0x5a, 0xbf, 0x49, 0xeb,
		0xb3, 0x67, 0xf4, 0xd7, 0xe4, 0x15, 0x88, 0x42, 0x92, 0x5b, 0xf3, 0x6b, 0xb3, 0xce, 0x5d, 0x81,
		0x10, 0xdc, 0x61, 0xff, 0x1e, 0xd9, 0x9b, 0x12, 0x44, 0x79, 0x9a, 0x77, 0xe4, 0x6e, 0xd2, 0x51,
		0xe8, 0x94, 0xd3, 0xe7, 0x77, 0xb4, 0x2b, 0xb5, 0xa3, 0x69, 0x83, 0x4c, 0x36, 0x4a, 0x44, 0x2f,
		0x91, 0xb7, 0x8d, 0x7b, 0x3b, 0x1c, 0xa5, 0x11, 0x80, 0xcd, 0xbb, 0x20, 0x11, 0x2e, 0xad, 0x9e,
		0x9c, 0x9c, 0x8a, 0x87, 0x90, 0x5b, 0xdf, 0x5a, 0x2f, 0x57, 0x63, 0xbf, 0x6e, 0xc8, 0xee, 0xa2,
		0xfe, 0x4b, 0x2b, 0x88, 0xac, 0x8d, 0x9f, 0x73, 0x78, 0xdf, 0x1e, 0x79, 0xe2, 0x65, 0x2d, 0x4f,
		0x90, 0xf5, 0x7d, 0x14, 0x05, 0xd1, 0x47, 0x1e, 0xc7, 0xf6, 0x40, 0xa1, 0xb9, 0xf8, 0xcf, 0x13,
		0x3d, 0x61, 0xf5, 0x52, 0x89, 0x1f, 0x65, 0x89, 0x5a, 0xcb, 0x8d, 0x2d, 0x3f, 0x10, 0x56, 0x18,
		0xc4, 0xb1, 0x9b, 0x06, 0x20, 0x7c, 0x6b, 0x59, 0x63, 0xa6, 0x41, 0x89, 0x87, 0x90, 0xc7, 0x56,
		0x20, 0x6e, 0x79, 0x64, 0x89, 0x5b, 0xdb, 0xb7, 0xb2, 0x57, 0x4c, 0xde, 0x70, 0xfc, 0x12, 0x79,
		0x6d, 0xab, 0x02, 0xcc, 0x99, 0x57, 0x01, 0x3c, 0xd9, 0x05, 0x36, 0x1c, 0x6f, 0x83, 0x84, 0x59,
		0xd4, 0x41, 0x39, 0x0b, 0x1a, 0xc2, 0xfc, 0x4e, 0xee, 0xd8, 0x62, 0x77, 0x35, 0x2c, 0x57, 0xfc,
		0x10, 0x0b, 0x3e, 0x64, 0x69, 0x08, 0x7a, 0xd2, 0x98, 0x68, 0xab, 0x0d, 0x5b, 0xf7, 0xd0, 0x66,
		0x6b, 0xd6, 0xd8, 0x66, 0xcd, 0x9a, 0xb0, 0x66, 0x46, 0xad, 0xd9, 0xb6, 0x54, 0x46, 0x25, 0x08,
		0x79, 0xc4, 0x9c, 0xe0, 0x8b, 0xcf, 0x22, 0x6e, 0xc7, 0x39, 0x72, 0x9c, 0xd3, 0x6d, 0x5f, 0x79,
		0x32, 0x5f, 0xf6, 0xac, 0x5e, 0x8e, 0xec, 0xd9, 0x76, 0x56, 0xd9, 0xfb, 0xac, 0xd9, 0x56, 0x56,
		0xa2, 0xc9, 0x96, 0xe5, 0x2e, 0x48, 0x52, 0x2c, 0x40, 0x92, 0x29, 0x38, 0xca, 0x59, 0x60, 0xa4,
		0xd6, 0x7f, 0x20, 0x65, 0xf8, 0x58, 0xd8, 0x82, 0x4b, 0x0a, 0x49, 0xf6, 0x0c, 0xc4, 0x03, 0xe2,
		0x41, 0xcb, 0x33, 0xc5, 0x4b, 0x87, 0x5c, 0x71, 0x87, 0xf9, 0x18, 0x41, 0x7e, 0x44, 0xa2, 0x11,
		0x2b, 0xf8, 0x25, 0xfd, 0x92, 0x1f, 0xc2, 0xbb, 0xd6, 0xbb, 0xf1, 0x57, 0x90, 0x00, 0xaf, 0xb6,
		0x0a, 0xf0, 0x6a, 0x03, 0x78, 0x01, 0x78, 0x01, 0x78, 0xc1, 0xb2, 0x00, 0x78, 0x01, 0x78, 0x41,
		0x3c, 0x00, 0xbc, 0x76, 0x0e, 0xbc, 0xda, 0x05, 0x00, 0xaf, 0x36, 0x01, 0xf0, 0x9a, 0x4c, 0xea,
		0xdf, 0x18, 0x83, 0x5e, 0x99, 0xeb, 0xbf, 0x21, 0xfb, 0x04, 0xa8, 0x55, 0x12, 0xa8, 0x55, 0x00,
		0xbb, 0xe7, 0x60, 0x07, 0x0d, 0x3e, 0xcf, 0x66, 0x4f, 0x6b, 0x67, 0x23, 0x37, 0x4e, 0x33, 0xcd,
		0x33, 0xbd, 0xb4, 0xf2, 0xd7, 0x71, 0x60, 0x7b, 0x53, 0x02, 0xa6, 0xb2, 0x31, 0xfa, 0xdd, 0x45,
		0x76, 0xf3, 0x40, 0xb2, 0x9b, 0xf9, 0xe6, 0x88, 0xe6, 0x99, 0x1b, 0x2a, 0x37, 0x27, 0x74, 0x56,
		0x7e, 0xe4, 0xe6, 0x19, 0x07, 0x2a, 0x33, 0xfe, 0x53, 0x32, 0x15, 0x97, 0x3b, 0xcd, 0x93, 0xa3,
		0xc4, 0x45, 0xf2, 0xab, 0x6f, 0x83, 0x78, 0x27, 0xdf, 0x3b, 0xb4, 0x7b, 0xec, 0x2e, 0xea, 0xef,
		0xe2, 0xab, 0xb3, 0xf4, 0x9a, 0x2e, 0x28, 0xec, 0xca, 0xca, 0x49, 0x2e, 0xcd, 0x9a, 0xf6, 0x76,
		0x66, 0xdb, 0xa7, 0xf5, 0x2f, 0xce, 0xac, 0x63, 0xdb, 0x06, 0xf4, 0xe7, 0x46, 0x10, 0xd0, 0x8a,
		0x3b, 0x0e, 0xd6, 0x8c, 0x2d, 0x7a, 0x5e, 0xcd, 0x95, 0xfc, 0x84, 0xd7, 0x09, 0xaf, 0x33, 0x1f,
		0xb7, 0x2c, 0x81, 0x4d, 0x36, 0x56, 0x1e, 0x7d, 0x96, 0xaf, 0x05, 0x88, 0xcc, 0x74, 0xa0, 0xca,
		0x07, 0xee, 0x0f, 0x52, 0xfc, 0x9b, 0xaf, 0x21, 0x97, 0x5c, 0x55, 0xa5, 0x7c, 0x4d, 0xec, 0xa4,
		0xfb, 0x93, 0xe4, 0x60, 0x23, 0xed, 0x56, 0x4f, 0xea, 0xad, 0x9d, 0x9e, 0xe4, 0xca, 0x45, 0xd5,
		0xb7, 0x44, 0xb6, 0x83, 0xcb, 0x2e, 0xf7, 0x84, 0xa8, 0x10, 0xa6, 0x9b, 0x83, 0x81, 0x65, 0xc7,
		0x59, 0x55, 0xaa, 0xa9, 0x38, 0x55, 0xeb, 0x8b, 0xe5, 0x6e, 0xd5, 0xb9, 0x7a, 0xb7, 0x71, 0xb9,
		0xdb, 0x7c, 0x69, 0x5c, 0xfa, 0x6b, 0xad, 0xd3, 0x39, 0xa9, 0xd6, 0xb3, 0xdf, 0xab, 0x9d, 0x8e,
		0x53, 0xfb, 0x5a, 0x7f, 0xfd, 0xe6, 0xa9, 0x56, 0xdb, 0xae, 0x42, 0xba, 0x5a, 0x2a, 0x44, 0xa2,
		0x5e, 0x6e, 0xfa, 0x4c, 0xae, 0xba, 0x39, 0x05, 0xa9, 0x9e, 0xd6, 0xd1, 0xc5, 0xc2, 0x8e, 0x44,
		0xcc, 0xbe, 0xb8, 0xe2, 0xb6, 0x7a, 0xf2, 0xfa, 0x65, 0xba, 0xa9, 0x2f, 0x6b, 0x35, 0x99, 0xca,
		0x2e, 0xa5, 0xc2, 0xb8, 0x6d, 0xd0, 0xca, 0x4a, 0x8c, 0xad, 0x95, 0xbc, 0xbe, 0x95, 0x2e, 0xd1,
		0x4a, 0x56, 0x98, 0xde, 0xcd, 0x8b, 0x45, 0xe4, 0xfa, 0x03, 0x4b, 0x76, 0x2e, 0x87, 0xa5, 0xd9,
		0xeb, 0x86, 0xa2, 0x08, 0x4e, 0xdb, 0x06, 0x3e, 0x6b, 0x0f, 0xd5, 0x76, 0x6f, 0x1f, 0xba, 0xb5,
		0x28, 0x30, 0x75, 0xd6, 0xe4, 0x2a, 0x2d, 0xfb, 0xfc, 0xd3, 0xda, 0xba, 0xcf, 0xc4, 0x0d, 0x7b,
		0xb9, 0x7b, 0x16, 0xef, 0xd9, 0xbe, 0x1f, 0x08, 0xeb, 0x86, 0x5b, 0xb6, 0xe3, 0x70, 0xc7, 0x12,
		0x81, 0x65, 0xaf, 0x5c, 0x3d, 0x9d, 0xd4, 0x2c, 0x5a, 0xa9, 0xef, 0x08, 0x7e, 0x5f, 0xcf, 0xef,
		0x0a, 0x5b, 0xb9, 0x5b, 0xe6, 0xd7, 0xb5, 0x35, 0xea, 0x09, 0xb7, 0x52, 0xe6, 0xa6, 0x9b, 0x70,
		0x83, 0x90, 0x9b, 0x46, 0x6e, 0x1a, 0xe2, 0x71, 0x6c, 0xe2, 0x71, 0x28, 0xb9, 0xe9, 0xf1, 0x35,
		0xcf, 0x0d, 0x21, 0xb2, 0x7c, 0xb7, 0x3a, 0xf3, 0xdf, 0xe2, 0x5c, 0xbe, 0xb5, 0xb9, 0xe1, 0x93,
		0xb9, 0xae, 0x64, 0x52, 0x5c, 0x73, 0x72, 0xfb, 0xac, 0xcf, 0x6d, 0x31, 0x8a, 0x38, 0xe5, 0x65,
		0xa7, 0x38, 0xf2, 0x52, 0xb2, 0x57, 0x79, 0x7d, 0x1e, 0x1d, 0x31, 0x9d, 0x7b, 0x85, 0x82, 0x45,
		0x75, 0xfe, 0x1d, 0xcd, 0x5d, 0xae, 0x79, 0x5d, 0xe0, 0x25, 0xb5, 0x1c, 0x9d, 0xcb, 0xae, 0xd7,
		0x7c, 0x24, 0xf1, 0xdd, 0xbe, 0xb5, 0x7a, 0xa3, 0x28, 0xe2, 0xbe, 0xa8, 0xd6, 0x4e, 0xd7, 0x7f,
		0xa4, 0xbb, 0xe6, 0xef, 0x27, 0x3e, 0x4f, 0xa7, 0xf2, 0xec, 0x65, 0xb7, 0x4e, 0xa5, 0x80, 0xdb,
		0x6e, 0xbf, 0xde, 0x72, 0xeb, 0x66, 0x10, 0x32, 0x7e, 0x17, 0xfa, 0xea, 0xd7, 0xb4, 0x26, 0x17,
		0xb2, 0x4e, 0x8e, 0xe6, 0x6e, 0x1b, 0xf5, 0xbe, 0x95, 0xf3, 0x26, 0xdb, 0xee, 0xea, 0x3d, 0xf2,
		0xe5, 0xef, 0x2c, 0xf5, 0x92, 0x8f, 0x74, 0x66, 0xeb, 0x0f, 0x53, 0xfa, 0x79, 0x73, 0x93, 0x2f,
		0x36, 0xec, 0xcf, 0x06, 0xd3, 0xba, 0xd9, 0xa4, 0x6e, 0x37, 0xa5, 0x4a, 0x8d, 0x0f, 0x36, 0x5b,
		0xd3, 0xe5, 0xc5, 0x6f, 0x39, 0x54, 0x8d, 0xc3, 0xac, 0xac, 0xab, 0xc2, 0x57, 0x39, 0xb4, 0xc5,
		0x53, 0x9a, 0x9d, 0xc5, 0xdc, 0xab, 0x54, 0xc6, 0x5d, 0xc2, 0x58, 0x18, 0x78, 0x6e, 0xef, 0x61,
		0xe5, 0x55, 0x16, 0xda, 0x01, 0xcc, 0x7d, 0x6e, 0xf9, 0x24, 0xd7, 0xe6, 0x85, 0x9f, 0x4d, 0x06,
		0x6e, 0x82, 0xf5, 0x0b, 0x30, 0x3e, 0x0a, 0x03, 0x6f, 0xdd, 0x76, 0x6c, 0xd1, 0x87, 0xb9, 0xd1,
		0x79, 0x6e, 0x05, 0xb7, 0x82, 0xbe, 0xd3, 0x95, 0x49, 0xf2, 0xfb, 0x73, 0x59, 0xdb, 0x8a, 0x1d,
		0xb3, 0x84, 0x51, 0x58, 0xcc, 0xc5, 0xf6, 0x54, 0xfd, 0xfc, 0x87, 0x4b, 0x92, 0xa6, 0x7f, 0xe6,
		0x98, 0x64, 0xcd, 0xd7, 0x0e, 0xb2, 0xf3, 0xeb, 0x8f, 0x51, 0xcd, 0x53, 0xd8, 0x9a, 0x94, 0xe7,
		0xf7, 0x61, 0xc4, 0xe3, 0xd8, 0x95, 0x89, 0x4f, 0xcd, 0x3d, 0xb3, 0x27, 0x09, 0xfa, 0x2d, 0xcc,
		0xb0, 0xc7, 0x1e, 0xf7, 0x66, 0x66, 0xd9, 0x95, 0xa3, 0x3d, 0xd1, 0x07, 0x11, 0x1f, 0xf0, 0xfb,
		0xf0, 0x48, 0xf2, 0xef, 0x0d, 0xe4, 0xdf, 0x97, 0xb7, 0xa4, 0x7d, 0x7e, 0x7e, 0x76, 0x7e, 0x7c,
		0x29, 0x78, 0x13, 0x73, 0xdb, 0x0f, 0xb6, 0x78, 0x0a, 0xba, 0xb9, 0x58, 0xdd, 0x9c, 0x83, 0x37,
		0xa0, 0x91, 0x0f, 0x56, 0x23, 0x37, 0xcf, 0xcf, 0x51, 0x12, 0xb5, 0x4e, 0x7b, 0xc9, 0x96, 0x44,
		0x5d, 0xbf, 0x63, 0xbf, 0xd9, 0xec, 0x8f, 0x3a, 0xbb, 0xb4, 0xfe, 0xf4, 0xdf, 0xff, 0xf1, 0x9f,
		0x7f, 0xfe, 0x67, 0x67, 0x54, 0xaf, 0x37, 0xdb, 0xd5, 0xda, 0xe3, 0xab, 0x6f, 0xff, 0xf7, 0xff,
		0x4e, 0x5e, 0xbf, 0x3c, 0xfd, 0x7c, 0xf5, 0x5f, 0x6f, 0x59, 0xf7, 0x9b, 0x8a, 0x39, 0x7b, 0xb1,
		0x67, 0x49, 0x03, 0xa9, 0x56, 0x8f, 0x7a, 0x79, 0x04, 0xed, 0xf0, 0xd6, 0x62, 0x6c, 0xe1, 0x74,
		0xe9, 0x8f, 0xdb, 0xfd, 0xdd, 0x0d, 0x11, 0x92, 0x9f, 0x33, 0x5a, 0x9f, 0x52, 0x52, 0x9f, 0x17,
		0xff, 0xf4, 0x2e, 0xfe, 0x64, 0x8b, 0xdb, 0x5f, 0xb8, 0xd0, 0xb9, 0xc3, 0xd4, 0x0b, 0x86, 0xc3,
		0x91, 0xef, 0x8a, 0x87, 0x7c, 0xce, 0xfb, 0xe2, 0xc7, 0xe1, 0xbe, 0xef, 0x93, 0xfb, 0x3e, 0xe4,
		0xc3, 0x1b, 0x1e, 0xe5, 0x07, 0x86, 0xe3, 0xcf, 0x03, 0x1a, 0x02, 0x1a, 0xae, 0xd9, 0xf3, 0x91,
		0x2f, 0x59, 0x38, 0x72, 0x99, 0xe3, 0xb3, 0xe3, 0x65, 0x18, 0xab, 0xaa, 0xbd, 0x19, 0x84, 0x2c,
		0x16, 0x0e, 0x9b, 0xa9, 0xb1, 0x1c, 0x37, 0xde, 0x54, 0x91, 0xae, 0x32, 0x5e, 0x98, 0x3e, 0x58,
		0x4d, 0x7c, 0xe2, 0xb4, 0x58, 0xfa, 0xb1, 0x7d, 0x7e, 0x7e, 0x5d, 0x67, 0xcd, 0x71, 0xb9, 0x74,
		0xfb, 0xbc, 0x95, 0xfe, 0xf2, 0xb5, 0xf9, 0xf4, 0xd8, 0x3e, 0x9f, 0x95, 0x56, 0xa7, 0x7f, 0x9e,
		0xfb, 0xe3, 0xd9, 0xd3, 0xe3, 0x75, 0x83, 0x9d, 0x8f, 0xff, 0xd4, 0x7a, 0x9a, 0x2b, 0xb9, 0xfe,
		0xda, 0x78, 0x9d, 0xfc, 0x6b, 0xf2, 0x6b, 0xed, 0xaa, 0xa8, 0x2f, 0xca, 0x5f, 0xdb, 0xd7, 0xdd,
		0x71, 0xa9, 0xea, 0x2a, 0xa7, 0x64, 0xf1, 0xa9, 0x72, 0x33, 0xcc, 0xc9, 0x37, 0x57, 0x27, 0xdf,
		0xec, 0xf3, 0x26, 0x7f, 0xe1, 0x9e, 0xc7, 0x7e, 0xf7, 0x83, 0x2f, 0xbe, 0xf2, 0x46, 0xcb, 0xb4,
		0x04, 0x97, 0xba, 0x28, 0xbb, 0xf1, 0x35, 0xe6, 0x16, 0x3e, 0x7d, 0x1b, 0xd9, 0xa2, 0x60, 0x89,
		0x9b, 0xb5, 0xea, 0x9b, 0xbf, 0xde, 0xcf, 0x0f, 0x18, 0xbf, 0x0f, 0x83, 0x48, 0x28, 0x0c, 0x5f,
		0x7d, 0xbd, 0xb3, 0xc5, 0xb2, 0x78, 0x74, 0xd3, 0x0b, 0xfc, 0x3e, 0x77, 0xf6, 0x64, 0xd9, 0xb6,
		0x73, 0xc7, 0x23, 0xe1, 0xc6, 0xdc, 0xf4, 0x8c, 0xdb, 0xee, 0xde, 0x5c, 0x09, 0x48, 0x64, 0xc7,
		0xb3, 0xa3, 0x01, 0xdf, 0x1b, 0x9b, 0x3c, 0x67, 0xd9, 0xea, 0xaf, 0x2f, 0x9f, 0x6a, 0x57, 0x39,
		0xfe, 0x66, 0xbf, 0x54, 0xf2, 0xf2, 0x79, 0xec, 0x8d, 0xe5, 0x33, 0x61, 0xfc, 0x0c, 0xdf, 0x3d,
		0x7b, 0x7f, 0x2f, 0x48, 0x7b, 0x29, 0xcc, 0xb9, 0x2b, 0xb3, 0x00, 0x05, 0xbf, 0x17, 0x57, 0x7e,
		0xc0, 0x06, 0x5e, 0x70, 0x73, 0xe3, 0xfa, 0x03, 0x35, 0x0f, 0x26, 0x8d, 0xc7, 0x29, 0xb8, 0x30,
		0x45, 0xf6, 0x36, 0xd8, 0xcb, 0xb7, 0x7f, 0xa1, 0x11, 0x8f, 0xd4, 0x1a, 0x0f, 0xdc, 0x28, 0xe7,
		0x78, 0x60, 0xe4, 0xbc, 0x10, 0xd8, 0xd8, 0x61, 0x60, 0x03, 0x39, 0xaf, 0x67, 0x9f, 0x43, 0xce,
		0xab, 0x5c, 0x9b, 0x82, 0x9c, 0x17, 0x72, 0x5e, 0xa5, 0xcc, 0x79, 0xe5, 0x49, 0x13, 0x59, 0x6a,
		0x59, 0xaf, 0xbf, 0x4c, 0x48, 0x6b, 0x26, 0xbe, 0x9e, 0x29, 0x18, 0x5e, 0x31, 0x07, 0x6b, 0x0b,
		0x86, 0x57, 0x8c, 0x00, 0x52, 0x5d, 0x7a, 0xc6, 0x9e, 0x38, 0xd5, 0x35, 0xbe, 0x67, 0xc1, 0x32,
		0xcd, 0x9c, 0x1f, 0x17, 0x2e, 0x3d, 0x97, 0x0f, 0x21, 0x36, 0x80, 0x10, 0xf7, 0x19, 0x21, 0x6e,
		0x63, 0xa6, 0xe9, 0x07, 0xed, 0x5e, 0x8f, 0x87, 0x0a, 0xe3, 0xd2, 0xc7, 0xcf, 0x1d, 0xc8, 0x38,
		0xd7, 0x9c, 0xcc, 0xa6, 0xca, 0x74, 0xda, 0xcc, 0xa7, 0xcd, 0x84, 0x9a, 0xcc, 0x68, 0x24, 0xb0,
		0x9a, 0x9b, 0x49, 0xa7, 0x0f, 0xdc, 0x0c, 0x42, 0xad, 0x84, 0x86, 0xec, 0x6e, 0xcb, 0xb1, 0xad,
		0x32, 0xfb, 0xea, 0xb0, 0x31, 0x05, 0x3b, 0xeb, 0xb2, 0x35, 0x19, 0x7b, 0x93, 0xb1, 0x39, 0x11,
		0xbb, 0xab, 0xe5, 0x29, 0x24, 0xb3, 0x30, 0xd2, 0x62, 0x30, 0xd3, 0xdd, 0x59, 0x11, 0x96, 0xfa,
		0x79, 0x2d, 0xdd, 0x56, 0x50, 0x3d, 0x2d, 0x35, 0x31, 0xd1, 0x16, 0x17, 0x0a, 0xb1, 0xa1, 0x14,
		0x1f, 0x2a, 0x31, 0x22, 0x17, 0x27, 0x72, 0xb1, 0x22, 0x16, 0x2f, 0x35, 0x31, 0x53, 0x14, 0x37,
		0x6d, 0xb1, 0x9b, 0x39, 0x5b, 0x11, 0x0f, 0xb9, 0xef, 0xe8, 0x9f, 0xf3, 0xd4, 0x2b, 0x1b, 0x13,
		0xd4, 0x3c, 0x14, 0x3d, 0x71, 0x24, 0x13, 0x4b, 0x4a, 0xf1, 0x34, 0x21, 0xa6, 0xd4, 0xe2, 0x6a,
		0x4c, 0x6c, 0x8d, 0x89, 0xaf, 0x21, 0x31, 0xd6, 0x13, 0x67, 0x4d, 0xb1, 0x26, 0x13, 0xef, 0x79,
		0x2b, 0xeb, 0x8f, 0x72, 0x15, 0x99, 0xaa, 0xd8, 0xdd, 0x31, 0x69, 0xa2, 0x83, 0xcc, 0x97, 0xde,
		0x29, 0x5c, 0x05, 0x98, 0x50, 0x05, 0x26, 0x55, 0x82, 0x29, 0xd5, 0x60, 0x5c, 0x45, 0x18, 0x57,
		0x15, 0x86, 0x55, 0x06, 0x8d, 0xea, 0x20, 0x52, 0x21, 0xd3, 0x77, 0xcd, 0x9d, 0x6e, 0x93, 0xe6,
		0xd9, 0xbc, 0xf5, 0xc6, 0xd2, 0xb6, 0xff, 0x92, 0x90, 0xa6, 0x54, 0xfd, 0x72, 0xde, 0xff, 0xd1,
		0x0a, 0x94, 0x51, 0xad, 0xba, 0x6e, 0x83, 0x2f, 0x0c, 0x90, 0xfe, 0xd9, 0xf6, 0x07, 0xf4, 0x1b,
		0x6d, 0x6e, 0xc3, 0xa7, 0x0b, 0x57, 0x49, 0xd7, 0x4a, 0x7f, 0x89, 0x62, 0x7a, 0x57, 0xfa, 0x7b,
		0x74, 0x33, 0x9f, 0xf2, 0x6c, 0xab, 0x9a, 0x29, 0xdd, 0x91, 0x3a, 0x5c, 0xcf, 0x02, 0xf6, 0x7d,
		0x71, 0x2c, 0xd0, 0x6a, 0x5e, 0xb6, 0x2e, 0xdb, 0x17, 0xcd, 0xcb, 0x73, 0xf0, 0xc2, 0x4e, 0x0d,
		0xac, 0x79, 0xaa, 0xdd, 0x17, 0x25, 0x96, 0x00, 0x83, 0x36, 0x4c, 0xae, 0x8f, 0xad, 0x32, 0x4c,
		0x68, 0x19, 0xa0, 0x9d, 0xaf, 0x13, 0xe8, 0xee, 0x58, 0x8b, 0x86, 0xa5, 0xf4, 0xd7, 0x43, 0xc0,
		0x8c, 0x95, 0x88, 0x87, 0xdc, 0x16, 0xcc, 0xa7, 0x77, 0x4d, 0xa7, 0x94, 0x89, 0x30, 0x74, 0x9e,
		0xa1, 0x80, 0xd2, 0x44, 0x1b, 0x34, 0x1e, 0x47, 0x17, 0xde, 0x37, 0xbc, 0x6f, 0x78, 0xdf, 0xc7,
		0xe7, 0x7d, 0xbb, 0xbe, 0x78, 0x63, 0xc0, 0xfb, 0x26, 0x84, 0xa5, 0x86, 0x9c, 0x42, 0x03, 0xc8,
		0xc5, 0xa4, 0x13, 0x68, 0xda, 0xf9, 0x2b, 0x0c, 0xe8, 0x9b, 0x07, 0xf8, 0x06, 0x9c, 0x3c, 0xa3,
		0xce, 0xdd, 0xf4, 0x68, 0xcf, 0xeb, 0x38, 0xdb, 0x42, 0xdd, 0xab, 0x03, 0x44, 0xd4, 0x3b, 0x4d,
		0x38, 0x29, 0x0c, 0x5c, 0xdb, 0x4a, 0x33, 0x8c, 0x78, 0xcc, 0xfd, 0x1e, 0x9d, 0x01, 0x30, 0x60,
		0x45, 0x6f, 0x06, 0xa1, 0x35, 0x2e, 0x20, 0xb1, 0xe2, 0x90, 0xf7, 0xdc, 0xbe, 0xdb, 0xb3, 0x32,
		0x91, 0x8b, 0xf7, 0x0f, 0x0d, 0x66, 0xdb, 0xbd, 0xcf, 0x78, 0x70, 0xe3, 0x79, 0x94, 0x0d, 0x23,
		0xbe, 0xd8, 0xad, 0xee, 0xd1, 0x95, 0xf9, 0x9c, 0x37, 0x0e, 0x72, 0xd3, 0x53, 0xbc, 0x99, 0x30,
		0xfe, 0xb1, 0x58, 0xe8, 0x7d, 0x9a, 0x95, 0xe8, 0x9e, 0xde, 0x0c, 0xc2, 0x49, 0xbb, 0xae, 0x53,
		0x9a, 0x0a, 0x13, 0x4b, 0xed, 0x92, 0xc3, 0xf8, 0xc7, 0x38, 0x12, 0xf0, 0x2e, 0x5d, 0xe4, 0xe7,
		0x77, 0xe9, 0x22, 0x3f, 0x7f, 0x37, 0x08, 0xc7, 0xad, 0xbf, 0x3e, 0x7f, 0x1a, 0xaf, 0xf1, 0xc5,
		0x6e, 0x18, 0x4b, 0x83, 0x25, 0x2a, 0x11, 0x1f, 0x06, 0x77, 0x9c, 0xae, 0x20, 0x68, 0x4c, 0x8f,
		0xa6, 0x1e, 0xa8, 0x8e, 0x7a, 0xa0, 0x9d, 0x18, 0x1a, 0xd4, 0x03, 0x95, 0x02, 0x9e, 0x91, 0x85,
		0x11, 0x66, 0xc0, 0x27, 0x08, 0x3c, 0x6e, 0x53, 0x44, 0x48, 0xa7, 0xf1, 0xf8, 0xc6, 0x5e, 0x2a,
		0xbd, 0xd0, 0xb3, 0x7b, 0xa4, 0x5a, 0x2f, 0x23, 0x08, 0xb5, 0x07, 0xb5, 0x07, 0xb5, 0x57, 0x3a,
		0xb5, 0x47, 0x59, 0x5e, 0x43, 0x58, 0x4e, 0x43, 0x1c, 0x29, 0x25, 0x74, 0x94, 0x4d, 0x44, 0x46,
		0x4d, 0x45, 0x44, 0x8d, 0x47, 0xcb, 0xcc, 0x45, 0xc9, 0x08, 0x23, 0x9f, 0x46, 0x22, 0x9e, 0xc6,
		0xcb, 0x57, 0xf6, 0xf9, 0xec, 0x10, 0x4d, 0x90, 0x6d, 0x7b, 0x94, 0x47, 0xed, 0xe4, 0xeb, 0xd8,
		0x20, 0x23, 0x15, 0xda, 0x6d, 0x93, 0xb6, 0x7e, 0xc9, 0x7c, 0x07, 0x08, 0xe2, 0x9a, 0x86, 0x51,
		0x4c, 0x57, 0x69, 0x6f, 0x20, 0x1a, 0x39, 0x8f, 0x98, 0x82, 0x6c, 0x17, 0xd8, 0xcd, 0x03, 0x65,
		0x08, 0xd5, 0x64, 0x1c, 0x72, 0x01, 0x3d, 0xa5, 0x3b, 0x8d, 0xac, 0x80, 0xa1, 0xac, 0x40, 0xae,
		0xc9, 0xb1, 0x3b, 0x00, 0x3a, 0xb3, 0xa6, 0xa0, 0xa2, 0x7a, 0x72, 0x72, 0x9a, 0x45, 0xaf, 0x6a,
		0x95, 0xc3, 0xd0, 0xed, 0x7b, 0x72, 0xab, 0x91, 0x90, 0xdf, 0xe8, 0xb2, 0x4f, 0x94, 0x41, 0x17,
		0xb3, 0xd9, 0x26, 0xc3, 0x5e, 0x30, 0x65, 0x76, 0xa9, 0x18, 0x3f, 0xd8, 0x6c, 0x36, 0xe9, 0x69,
		0x47, 0x32, 0xd9, 0x2d, 0x54, 0x26, 0x89, 0xb2, 0x44, 0xa6, 0xb3, 0x43, 0x3a, 0x57, 0xde, 0x4d,
		0x65, 0x83, 0xd4, 0x58, 0xec, 0xa9, 0x88, 0xce, 0xd9, 0xd3, 0xb1, 0x31, 0x6e, 0xda, 0xde, 0x5c,
		0xb3, 0x05, 0xc3, 0x3c, 0x31, 0xb4, 0x61, 0x40, 0x1b, 0x86, 0x1d, 0x06, 0x2e, 0xf7, 0xac, 0x0d,
		0x83, 0xed, 0x10, 0xb6, 0x60, 0x48, 0x88, 0x21, 0xef, 0x50, 0x84, 0x78, 0x16, 0x84, 0xb8, 0x90,
		0x77, 0xd8, 0x8d, 0xdf, 0x4b, 0x9f, 0x77, 0xf0, 0xb8, 0xdd, 0x8f, 0x78, 0x9f, 0x32, 0xdd, 0x4a,
		0x91, 0x76, 0xf8, 0x34, 0x0f, 0xc7, 0x92, 0x93, 0xbb, 0x5a, 0x82, 0x5f, 0xd3, 0xbf, 0x5f, 0xe8,
		0x1f, 0x7a, 0x9a, 0x62, 0x25, 0xd4, 0xb8, 0xa0, 0xc6, 0x05, 0x4a, 0x17, 0x4a, 0x17, 0x4a, 0x17,
		0x4a, 0x77, 0xb3, 0xd2, 0x45, 0x8d, 0x0d, 0xd4, 0x2e, 0xd4, 0x2e, 0xd4, 0xee, 0xb1, 0xaa, 0x5d,
		0xa4, 0xe1, 0xa4, 0x99, 0x68, 0x21, 0x0d, 0x67, 0x05, 0x91, 0x75, 0x72, 0x72, 0x6a, 0x3b, 0x0e,
		0x12, 0x72, 0x08, 0xfe, 0xcf, 0x05, 0xff, 0xf5, 0x03, 0xcf, 0x96, 0x99, 0x04, 0xc0, 0x5f, 0xe6,
		0x16, 0x56, 0xe2, 0x2c, 0x80, 0x17, 0xf4, 0x6c, 0x8f, 0x25, 0xd6, 0x97, 0x47, 0xe3, 0x64, 0xa9,
		0x66, 0x2a, 0x60, 0x85, 0x22, 0xf2, 0x01, 0xc8, 0x07, 0xec, 0x10, 0x64, 0xed, 0x59, 0x3e, 0x20,
		0xe6, 0x82, 0xce, 0x4f, 0xda, 0x3c, 0xe9, 0x07, 0x3e, 0x12, 0x7c, 0x24, 0xf8, 0x48, 0x3b, 0xf2,
		0x91, 0x46, 0xae, 0x2f, 0xce, 0x9a, 0xb8, 0x84, 0x90, 0x6f, 0x61, 0x46, 0x2f, 0x21, 0xd4, 0x51,
		0xc8, 0x4e, 0x23, 0x26, 0x8b, 0x47, 0x86, 0x4b, 0x08, 0xc5, 0x9e, 0x1d, 0xfc, 0x62, 0xf8, 0xc5,
		0x53, 0xbf, 0x98, 0xc8, 0x0b, 0x33, 0xe4, 0x1c, 0x7f, 0x48, 0x56, 0xf7, 0x69, 0xb6, 0xb8, 0x12,
		0x3b, 0xc8, 0x41, 0xe4, 0x0e, 0x34, 0x8c, 0xcf, 0xd4, 0xde, 0x8f, 0xe9, 0xc0, 0x19, 0x86, 0x33,
		0x0c, 0x67, 0x18, 0xce, 0x30, 0x9c, 0x61, 0x38, 0xc3, 0x70, 0x86, 0xcd, 0xf4, 0x0b, 0xa7, 0xec,
		0x0f, 0x4e, 0xd4, 0x0f, 0x1c, 0xb0, 0x96, 0x06, 0xd6, 0x6a, 0xa1, 0x28, 0x43, 0x60, 0xf6, 0xa7,
		0x6c, 0x4d, 0x45, 0x61, 0x58, 0xa3, 0xc3, 0x3c, 0x09, 0x12, 0xcd, 0xfa, 0xf7, 0xee, 0x08, 0x30,
		0xe6, 0xcd, 0x20, 0xa4, 0xbc, 0x5f, 0x67, 0x08, 0x6f, 0x52, 0xdc, 0xa7, 0x33, 0x8b, 0x38, 0xd7,
		0xee, 0x63, 0xd1, 0xba, 0xec, 0x85, 0xd9, 0x10, 0x84, 0xac, 0x8c, 0x68, 0xea, 0x48, 0x53, 0xba,
		0x51, 0x65, 0x62, 0x32, 0xb9, 0x32, 0x94, 0xe3, 0x8d, 0xa7, 0x1d, 0x4d, 0xee, 0xd6, 0xd0, 0x72,
		0x6a, 0x65, 0x33, 0x1a, 0x03, 0xb1, 0xa7, 0x65, 0x30, 0xff, 0xe2, 0x3d, 0x51, 0x33, 0xb5, 0xbf,
		0x12, 0x33, 0x24, 0xd4, 0xf5, 0xbb, 0xc6, 0x2e, 0x64, 0x1c, 0x66, 0x25, 0x22, 0xc1, 0x63, 0x4b,
		0xdc, 0xda, 0xc2, 0x72, 0x02, 0xcb, 0x0f, 0x84, 0x35, 0xb4, 0x45, 0xef, 0xd6, 0xb2, 0xfd, 0x07,
		0x2b, 0x13, 0x10, 0x8b, 0xfb, 0x22, 0x7a, 0xd8, 0xfd, 0xf8, 0x70, 0x1d, 0xdd, 0x6e, 0x66, 0x80,
		0xb8, 0xf4, 0x1e, 0x9a, 0xc6, 0x26, 0x2f, 0x68, 0xf5, 0x79, 0x5e, 0xe9, 0x57, 0xd4, 0xdf, 0x26,
		0xf4, 0xb6, 0x04, 0x7f, 0xd0, 0xea, 0xea, 0x7c, 0x67, 0xbb, 0xfd, 0x84, 0x72, 0xec, 0x79, 0xc5,
		0xe7, 0xf7, 0x82, 0x65, 0x1c, 0x95, 0x77, 0xbf, 0x67, 0xda, 0x6f, 0xf6, 0x6c, 0xce, 0xd3, 0x95,
		0x8b, 0x94, 0x4a, 0x87, 0x62, 0x54, 0x42, 0x2e, 0x3a, 0xa1, 0x15, 0x55, 0xad, 0xa4, 0x1d, 0x2a,
		0xd1, 0xd6, 0x41, 0x9a, 0xa1, 0x8f, 0xf2, 0x58, 0x7c, 0xb7, 0xcf, 0xfa, 0xdc, 0x16, 0xa3, 0xa8,
		0x50, 0x8b, 0x37, 0x53, 0x2f, 0xc9, 0x97, 0x5f, 0xf5, 0x47, 0xc9, 0x02, 0x58, 0xb3, 0xc1, 0x1a,
		0x8d, 0x1d, 0x1b, 0xb7, 0xb9, 0xfd, 0x28, 0x93, 0x79, 0xdb, 0xb4, 0x61, 0xe5, 0xb1, 0x64, 0xaf,
		0xf7, 0x04, 0x69, 0x4e, 0x0a, 0xae, 0x33, 0xcc, 0x90, 0xfd, 0x21, 0x55, 0xc6, 0x99, 0x39, 0x3b,
		0x5a, 0x20, 0x9a, 0x41, 0xa5, 0x64, 0x27, 0x00, 0x34, 0x9f, 0x93, 0xc4, 0x95, 0x3d, 0x02, 0x90,
		0x34, 0x07, 0x24, 0xa5, 0x11, 0x12, 0x25, 0x98, 0xfc, 0x91, 0xdf, 0x8b, 0xf7, 0xf9, 0x8f, 0x98,
		0x10, 0x4f, 0x66, 0x9b, 0xa1, 0x08, 0x28, 0xc7, 0x0f, 0x03, 0x51, 0x02, 0x51, 0x02, 0x51, 0x02,
		0x51, 0x02, 0x51, 0xee, 0x14, 0x51, 0xa6, 0xc6, 0x0b, 0x80, 0x52, 0x58, 0x52, 0x66, 0xe9, 0x58,
		0x11, 0xe5, 0x78, 0x93, 0x00, 0x29, 0x0d, 0x43, 0x4a, 0x69, 0x66, 0xa4, 0xc4, 0x94, 0x9f, 0x24,
		0x0e, 0x99, 0x06, 0x54, 0x66, 0x3a, 0x4a, 0x1e, 0x4f, 0x8e, 0x9f, 0x03, 0x94, 0x04, 0x94, 0xdc,
		0x09, 0x94, 0xdc, 0x91, 0x49, 0xcf, 0xac, 0xf8, 0xd1, 0x1a, 0xed, 0x9f, 0x33, 0x44, 0x83, 0x74,
		0xa4, 0x86, 0x4d, 0x97, 0xde, 0x43, 0x98, 0x7c, 0x73, 0x26, 0x5f, 0xca, 0x8c, 0x51, 0x5a, 0xfb,
		0x8c, 0x0b, 0xc8, 0x2c, 0xfd, 0x0b, 0x8d, 0x13, 0x91, 0x3d, 0x09, 0xd2, 0x13, 0xc8, 0xb1, 0xf5,
		0x44, 0x5b, 0xbe, 0x79, 0xaf, 0x9f, 0xdf, 0xc1, 0x0d, 0xbb, 0x57, 0x19, 0xaf, 0x69, 0xf3, 0x9e,
		0xcd, 0x6c, 0x48, 0xf2, 0x73, 0xcb, 0x59, 0xe4, 0xab, 0xb4, 0xcf, 0x8d, 0x90, 0x64, 0x90, 0x91,
		0x0a, 0x22, 0x92, 0xd5, 0xd6, 0xca, 0x08, 0x48, 0x59, 0x17, 0x2b, 0x22, 0x1e, 0x3d, 0x89, 0xca,
		0x5d, 0x29, 0x2e, 0xc3, 0x1b, 0x0b, 0x48, 0xfa, 0x4d, 0x8e, 0xcf, 0x7e, 0xe0, 0xfe, 0x20, 0x95,
		0xd1, 0x7c, 0xf8, 0x40, 0x42, 0x07, 0xab, 0x5c, 0x4b, 0x56, 0x9d, 0x7d, 0xa6, 0x7d, 0x35, 0x55,
		0xfd, 0xea, 0xa9, 0x44, 0x85, 0xa4, 0xd2, 0xb5, 0xdf, 0xe9, 0x96, 0x34, 0xcf, 0xcf, 0xf7, 0x67,
		0x53, 0x88, 0x6c, 0x56, 0x0e, 0xac, 0x5b, 0xf9, 0x64, 0x0b, 0xc1, 0x23, 0x3f, 0x37, 0x0b, 0x57,
		0xae, 0xdf, 0xb1, 0xdf, 0x6c, 0xf6, 0x47, 0x9d, 0x5d, 0x5a, 0x7f, 0xfa, 0xef, 0xff, 0xf8, 0xcf,
		0x3f, 0xff, 0xb3, 0x33, 0xaa, 0xd7, 0x9b, 0xed, 0x6a, 0xed, 0xf1, 0xd5, 0xb7, 0xff, 0xfb, 0x7f,
		0x27, 0xaf, 0x5f, 0x9e, 0x7e, 0xbe, 0xfa, 0xaf, 0xb7, 0xac, 0xfb, 0xcd, 0x76, 0x0d, 0xd0, 0x35,
		0x60, 0x2f, 0x62, 0x61, 0x0b, 0x3e, 0x56, 0x46, 0x39, 0x8d, 0xc6, 0xec, 0x91, 0x7c, 0x96, 0xa3,
		0x01, 0xcb, 0xb1, 0xcf, 0x96, 0x23, 0xef, 0xd5, 0xc1, 0xca, 0x18, 0x3e, 0x49, 0x07, 0x6e, 0x72,
		0xc3, 0x2e, 0x04, 0x6e, 0x10, 0xb8, 0xd1, 0x64, 0xd2, 0x39, 0x66, 0x4d, 0x8b, 0x2f, 0xa5, 0xb7,
		0x7d, 0xc6, 0xb4, 0x92, 0x55, 0xa3, 0x96, 0xfa, 0xe5, 0x71, 0xe5, 0x5b, 0xaa, 0x3a, 0xb7, 0x52,
		0x29, 0x6e, 0xa1, 0x12, 0x47, 0x4e, 0xd4, 0x6f, 0x99, 0x9a, 0xcb, 0x4a, 0xaa, 0xdd, 0x22, 0x35,
		0x7b, 0x75, 0x4c, 0xf5, 0xb2, 0x77, 0xe5, 0x66, 0x10, 0xea, 0xb7, 0x57, 0x50, 0xbb, 0x00, 0x63,
		0xa1, 0xb7, 0x02, 0xb9, 0xf8, 0x90, 0x8b, 0x11, 0xb9, 0x38, 0x11, 0x8b, 0x95, 0x9a, 0x78, 0x29,
		0x8a, 0x99, 0xb6, 0xb8, 0xcd, 0x6c, 0xd1, 0x78, 0x6c, 0x1a, 0xdd, 0xf0, 0x21, 0xed, 0x39, 0x6c,
		0x04, 0xe2, 0x48, 0x26, 0x96, 0x94, 0xe2, 0x69, 0x42, 0x4c, 0xa9, 0xc5, 0xd5, 0x98, 0xd8, 0x1a,
		0x13, 0x5f, 0x43, 0x62, 0xac, 0x27, 0xce, 0x9a, 0x62, 0x4d, 0x26, 0xde, 0x53, 0x42, 0x61, 0xc4,
		0x43, 0xee, 0x3b, 0xf4, 0xe3, 0xa8, 0x27, 0x84, 0x89, 0x0e, 0x91, 0x46, 0xec, 0xc9, 0xc5, 0xdf,
		0x84, 0x1a, 0x30, 0xa9, 0x0e, 0x4c, 0xa9, 0x05, 0xe3, 0xea, 0xc1, 0xb8, 0x9a, 0x30, 0xac, 0x2e,
		0x68, 0xd4, 0x06, 0x91, 0xfa, 0x20, 0x57, 0x23, 0xf3, 0xa8, 0xc1, 0x1f, 0x0d, 0x6f, 0x78, 0x44,
		0xcf, 0x59, 0x73, 0x38, 0x62, 0xfc, 0x15, 0xc4, 0x07, 0x4f, 0xd3, 0xbd, 0xc9, 0xb8, 0xaa, 0x31,
		0xa9, 0x72, 0x8a, 0x50, 0x3d, 0xa6, 0x55, 0x50, 0x61, 0xaa, 0xa8, 0x30, 0x95, 0x54, 0x90, 0x6a,
		0xa2, 0x55, 0x51, 0xc4, 0xaa, 0x6a, 0xba, 0x07, 0x64, 0xdd, 0xa5, 0x9e, 0xe5, 0xf9, 0x91, 0x4f,
		0xd3, 0x67, 0xea, 0x59, 0x0c, 0x73, 0x69, 0x80, 0xf6, 0x78, 0x5b, 0xae, 0x8d, 0x30, 0x9e, 0x19,
		0x01, 0x2d, 0x44, 0xab, 0xaf, 0x3b, 0x80, 0x0b, 0x83, 0x5f, 0x41, 0xdb, 0x22, 0xbb, 0xf8, 0x03,
		0x99, 0xbe, 0x88, 0x89, 0x96, 0xda, 0xcf, 0x7e, 0x99, 0x62, 0xce, 0x5b, 0xf9, 0xfb, 0x4c, 0xb7,
		0x71, 0x7e, 0x9e, 0xdd, 0x4d, 0xb5, 0x77, 0x2e, 0x48, 0xfd, 0xae, 0x67, 0x15, 0xfb, 0xbe, 0x78,
		0x56, 0x31, 0xd5, 0xe2, 0x1b, 0x3c, 0x43, 0x0c, 0x00, 0x8a, 0xa3, 0xde, 0x7d, 0xb1, 0x47, 0x12,
		0x54, 0x80, 0x4d, 0xa5, 0x6d, 0x9b, 0xb9, 0x15, 0xd6, 0xb4, 0x0c, 0x7e, 0x07, 0x4d, 0x9b, 0xcd,
		0xe2, 0x58, 0x92, 0x96, 0x15, 0x9f, 0x4a, 0x39, 0xc1, 0x21, 0xe2, 0x21, 0xb7, 0x05, 0xf3, 0xcd,
		0xb9, 0xfa, 0xd3, 0x6f, 0x20, 0xf6, 0x21, 0xc6, 0x05, 0xaf, 0x46, 0x60, 0x5a, 0xa5, 0x41, 0xeb,
		0x91, 0x75, 0x11, 0xe5, 0x40, 0x94, 0x03, 0x51, 0x0e, 0x44, 0x39, 0xa8, 0xa3, 0x1c, 0xae, 0x2f,
		0xde, 0x18, 0x8c, 0x72, 0x18, 0x80, 0xe5, 0x86, 0x9d, 0x6b, 0x83, 0x88, 0xac, 0x08, 0x67, 0xba,
		0x28, 0x27, 0xba, 0x70, 0x47, 0xa8, 0x38, 0x07, 0xc8, 0xa0, 0xb3, 0x5c, 0x88, 0x93, 0x3c, 0x65,
		0x81, 0xf3, 0x3a, 0x78, 0xa0, 0x54, 0xee, 0xe9, 0x11, 0x79, 0x18, 0xa5, 0x4a, 0x70, 0x1a, 0x98,
		0x8c, 0x3e, 0xa5, 0xad, 0xdd, 0xc8, 0xbe, 0x38, 0x43, 0xb4, 0xd0, 0xf8, 0x7e, 0x5c, 0x88, 0x45,
		0xd9, 0x00, 0xbf, 0x24, 0xe8, 0x97, 0xa2, 0x61, 0x7e, 0xb9, 0xf0, 0xef, 0xc6, 0xf3, 0x2a, 0x3b,
		0x26, 0x7e, 0x51, 0x2e, 0x5d, 0x47, 0xa5, 0x53, 0x88, 0x86, 0xa0, 0xac, 0xd0, 0xd5, 0xbb, 0x2f,
		0x3c, 0xbd, 0x00, 0x75, 0xba, 0x3a, 0x16, 0x65, 0xcc, 0x41, 0xa7, 0xb4, 0x35, 0x59, 0x96, 0xd6,
		0xa5, 0xe3, 0x5f, 0x26, 0xeb, 0xfd, 0xbc, 0x3a, 0x32, 0xe5, 0x5d, 0xfc, 0xc9, 0x16, 0xb7, 0x9f,
		0x3f, 0x8d, 0x97, 0x5b, 0x92, 0xc9, 0x95, 0x04, 0xfc, 0x53, 0x89, 0xf8, 0x30, 0xb8, 0xe3, 0xf4,
		0xd5, 0x76, 0x63, 0xba, 0xb4, 0xc5, 0x76, 0x75, 0x14, 0xdb, 0x95, 0xda, 0x0a, 0xa2, 0xd8, 0x6e,
		0xaf, 0xb0, 0x28, 0x79, 0x4c, 0x67, 0x86, 0xea, 0x82, 0xc0, 0xe3, 0x36, 0x65, 0x98, 0x7c, 0x9a,
		0xd4, 0x69, 0x1c, 0x94, 0xf2, 0x0d, 0x3d, 0xbb, 0x67, 0x44, 0xfb, 0x66, 0x84, 0xa1, 0x7e, 0xa1,
		0x7e, 0xa1, 0x7e, 0x8f, 0x4e, 0xfd, 0x9a, 0xa8, 0x5d, 0x33, 0x50, 0xab, 0x66, 0x28, 0x7c, 0x6e,
		0x20, 0x5a, 0x61, 0x32, 0x5c, 0x6e, 0x3a, 0x4c, 0x5e, 0x58, 0x68, 0xd4, 0x7c, 0x48, 0xd4, 0x40,
		0x38, 0xdc, 0x68, 0x18, 0xbc, 0xb0, 0xda, 0xb0, 0x43, 0x3a, 0x63, 0x84, 0x7c, 0x72, 0x1c, 0xc3,
		0x07, 0x37, 0x16, 0xef, 0x84, 0x20, 0xbe, 0x2c, 0xf3, 0xd1, 0xf5, 0xdf, 0x7b, 0x69, 0x0c, 0x84,
		0x98, 0x85, 0x12, 0x29, 0x9b, 0xa3, 0xdc, 0x78, 0xd3, 0x6a, 0xb5, 0x2f, 0x5a, 0xad, 0xfa, 0xc5,
		0xd9, 0x45, 0xfd, 0xf2, 0xfc, 0xbc, 0xd1, 0x6e, 0x10, 0x0a, 0x46, 0xe5, 0xa7, 0xc8, 0xe1, 0x11,
		0x77, 0xbe, 0x7b, 0x30, 0x57, 0x08, 0x34, 0x8a, 0xe9, 0xaf, 0xfb, 0x18, 0x0c, 0x4d, 0xcf, 0x23,
		0xc3, 0x20, 0xdb, 0x1d, 0x76, 0xf3, 0x60, 0x22, 0xbe, 0x5e, 0x44, 0x50, 0x7a, 0x01, 0x25, 0xa6,
		0x27, 0x81, 0xd4, 0x53, 0x8e, 0x5d, 0x33, 0x99, 0x7a, 0x52, 0x6a, 0xeb, 0xbb, 0x03, 0x20, 0xb7,
		0xd2, 0xe9, 0x7f, 0x18, 0xdc, 0xf1, 0x5a, 0xe5, 0xb0, 0x6d, 0xce, 0x9e, 0x5f, 0x2d, 0x37, 0xc0,
		0xb7, 0xf4, 0xa9, 0x52, 0x13, 0x41, 0xb4, 0x62, 0x52, 0xa3, 0x05, 0x45, 0x23, 0x4c, 0xa4, 0x42,
		0x8b, 0x8d, 0x47, 0x14, 0x93, 0xfa, 0x7c, 0x2a, 0x89, 0xcc, 0x77, 0x77, 0x2a, 0xf3, 0xc4, 0x29,
		0x4d, 0xf3, 0xa9, 0x4c, 0x8a, 0xce, 0x28, 0x06, 0x53, 0x97, 0x7a, 0xfc, 0xa9, 0xce, 0x4d, 0x1a,
		0x7c, 0x50, 0xe9, 0x05, 0xc3, 0xe1, 0xc8, 0x77, 0x85, 0xcb, 0x63, 0xba, 0xa6, 0x3f, 0xf3, 0x44,
		0xd1, 0xf8, 0x67, 0xeb, 0x76, 0xa1, 0xf1, 0x0f, 0x1a, 0xff, 0x6c, 0x7e, 0x27, 0xb2, 0xc6, 0x3f,
		0xb6, 0x63, 0xa0, 0xe9, 0x4f, 0x42, 0x14, 0x49, 0xb0, 0x32, 0xa9, 0x81, 0x82, 0x61, 0x27, 0x92,
		0x60, 0xe5, 0x0e, 0x4a, 0x98, 0x4b, 0x82, 0x79, 0xdc, 0xee, 0x47, 0xbc, 0x6f, 0xa2, 0x06, 0x81,
		0x32, 0x07, 0xf6, 0x69, 0x1e, 0x93, 0x26, 0x27, 0x7d, 0xb5, 0x84, 0x41, 0xa7, 0x7f, 0x3f, 0x81,
		0x2e, 0x0f, 0x2c, 0xe6, 0xe2, 0x34, 0x85, 0x89, 0x28, 0x44, 0xdb, 0xca, 0x06, 0x28, 0x44, 0x83,
		0x11, 0x80, 0x11, 0x80, 0x11, 0x80, 0x11, 0xd8, 0x0b, 0x23, 0x80, 0x82, 0x38, 0x98, 0x01, 0x98,
		0x01, 0x98, 0x01, 0x98, 0x81, 0xdd, 0x98, 0x01, 0xe4, 0x9a, 0xc9, 0x99, 0x6f, 0x21, 0xd7, 0x3c,
		0x99, 0x2a, 0xef, 0x38, 0xc8, 0x3a, 0x1b, 0xa5, 0x70, 0x3c, 0x19, 0x28, 0xba, 0x94, 0x86, 0x65,
		0x2c, 0x0b, 0xf5, 0x97, 0xb9, 0x35, 0xee, 0x61, 0x2a, 0xca, 0x0b, 0x7a, 0xb6, 0xc7, 0x12, 0x08,
		0xc1, 0xa3, 0x71, 0xd9, 0x00, 0x51, 0x3e, 0x6a, 0x85, 0x32, 0x92, 0x52, 0x45, 0x22, 0x50, 0x24,
		0xa5, 0x90, 0x94, 0xda, 0xa8, 0x0c, 0xb9, 0xa0, 0x77, 0x46, 0x13, 0xa2, 0x70, 0x44, 0xe1, 0x88,
		0xc2, 0x11, 0x3d, 0x3a, 0x47, 0x74, 0xe4, 0xfa, 0xe2, 0xac, 0x89, 0x6b, 0x59, 0x34, 0x0b, 0x2d,
		0xe4, 0x5a, 0x56, 0x1d, 0x57, 0x76, 0x8a, 0x11, 0xbb, 0xc5, 0xa3, 0xc5, 0xb5, 0xac, 0x72, 0x9d,
		0x31, 0x82, 0x15, 0x08, 0x56, 0x10, 0x04, 0x2b, 0x88, 0xfd, 0x5d, 0x73, 0x11, 0x8b, 0x0f, 0xc9,
		0x42, 0x3f, 0xcd, 0xd6, 0xb9, 0x87, 0x51, 0x8b, 0x20, 0x72, 0x07, 0x04, 0x16, 0x72, 0x0a, 0x5e,
		0xc6, 0xf4, 0x10, 0xa1, 0x40, 0x84, 0x02, 0x11, 0x0a, 0x44, 0x28, 0x10, 0xa1, 0x40, 0x84, 0x02,
		0x11, 0x8a, 0x43, 0x8b, 0x50, 0x98, 0x99, 0xd1, 0x62, 0x62, 0x26, 0x0b, 0xf1, 0x0c, 0x16, 0xf8,
		0x00, 0x45, 0xf9, 0x00, 0x24, 0x38, 0xd2, 0x1c, 0xf2, 0xff, 0x29, 0x5b, 0xde, 0xae, 0x00, 0x7f,
		0xa1, 0x53, 0xf9, 0x09, 0xeb, 0x34, 0xe8, 0xee, 0x54, 0x13, 0x02, 0xf1, 0x9b, 0x41, 0x68, 0xe2,
		0xee, 0xb4, 0x61, 0x50, 0x4e, 0x79, 0x57, 0xba, 0x18, 0x58, 0xbe, 0x76, 0x9f, 0x77, 0xad, 0x50,
		0x5f, 0x14, 0x1b, 0x54, 0x52, 0x95, 0x41, 0x22, 0xc5, 0x6d, 0x4e, 0x61, 0x6b, 0x70, 0xa2, 0x11,
		0x0d, 0xad, 0xc6, 0x58, 0xf2, 0xec, 0x20, 0xf7, 0x84, 0xe4, 0xf1, 0x53, 0xa8, 0x5e, 0xbd, 0x52,
		0x38, 0x0d, 0x56, 0x5b, 0x29, 0x6d, 0xfb, 0x17, 0xef, 0x89, 0x5a, 0x51, 0xe7, 0xa2, 0x30, 0x81,
		0x4c, 0xdf, 0x38, 0x11, 0xec, 0x56, 0xc6, 0xc1, 0x56, 0x22, 0x7f, 0x3c, 0xb6, 0xc4, 0xad, 0x2d,
		0x2c, 0x27, 0xb0, 0xfc, 0x40, 0x58, 0x43, 0x5b, 0xf4, 0x6e, 0x2d, 0xdb, 0x7f, 0xb0, 0x32, 0x69,
		0xb4, 0xb8, 0x2f, 0x22, 0x9d, 0xfe, 0x4c, 0x54, 0x06, 0xca, 0x80, 0x61, 0x22, 0x37, 0x48, 0x0b,
		0x86, 0x48, 0x7a, 0x8f, 0x8b, 0x06, 0x6a, 0x2f, 0xcc, 0x1a, 0x23, 0x59, 0x2d, 0xa4, 0x69, 0x7c,
		0xcc, 0x18, 0x1d, 0x05, 0x0e, 0x23, 0x37, 0x34, 0x72, 0x8c, 0x91, 0xff, 0x58, 0x25, 0x0e, 0xa8,
		0xe2, 0xf3, 0x7b, 0xc1, 0x32, 0x36, 0x95, 0x3d, 0x9c, 0x99, 0x8a, 0x9e, 0xd1, 0x90, 0x64, 0x0d,
		0xb5, 0x40, 0xbd, 0x72, 0x84, 0x4e, 0x27, 0x12, 0x47, 0x11, 0x71, 0xd3, 0x55, 0x99, 0x64, 0x11,
		0x34, 0x32, 0x05, 0x49, 0x14, 0x11, 0x2b, 0x3f, 0x0c, 0x72, 0xfb, 0xac, 0xcf, 0x6d, 0x31, 0x8a,
		0x76, 0x6a, 0xde, 0x67, 0xba, 0x2f, 0x59, 0xcc, 0x55, 0x7f, 0x94, 0x2c, 0x88, 0x35, 0x1b, 0xac,
		0xd1, 0x28, 0x99, 0x25, 0x9f, 0xdb, 0xaf, 0x32, 0xdb, 0xf2, 0x4d, 0x1b, 0x5a, 0x7e, 0xb3, 0xfd,
		0x7a, 0xcf, 0xe1, 0xfc, 0xe4, 0xa6, 0x4a, 0x06, 0xa8, 0xb2, 0x3f, 0xa4, 0xc6, 0x24, 0xb3, 0xdd,
		0x40, 0xfb, 0x5b, 0x36, 0x33, 0xc3, 0x9b, 0xc9, 0x8e, 0x01, 0xcd, 0xab, 0x6a, 0x80, 0x95, 0x3d,
		0x04, 0x5a, 0x2f, 0x13, 0x5a, 0x57, 0xc6, 0x96, 0xc4, 0x88, 0xfd, 0x47, 0x7e, 0x2f, 0xde, 0xcb,
		0xf3, 0x87, 0x41, 0xd0, 0x9e, 0xed, 0x98, 0x26, 0x6a, 0x1f, 0x13, 0x01, 0x6c, 0x07, 0x6c, 0x07,
		0x6c, 0x07, 0x6c, 0x07, 0x6c, 0x07, 0x6c, 0xd7, 0x80, 0xed, 0xa9, 0x9d, 0x06, 0x6a, 0xcf, 0x8f,
		0xda, 0x95, 0xcc, 0x2f, 0x60, 0xfb, 0xda, 0x4d, 0x04, 0x6e, 0x2f, 0x1d, 0x6e, 0x57, 0x66, 0x6f,
		0x62, 0xe0, 0xfe, 0x49, 0x81, 0x43, 0xcc, 0x20, 0xf7, 0x4c, 0x81, 0xaa, 0x83, 0xf6, 0xf1, 0xf3,
		0xc0, 0xeb, 0xc0, 0xeb, 0x07, 0x89, 0xd7, 0x4b, 0x82, 0x73, 0x32, 0x68, 0x03, 0x24, 0xb3, 0x65,
		0xb7, 0x7e, 0xce, 0xe0, 0x20, 0xaa, 0x0d, 0x0c, 0x02, 0x1d, 0xe9, 0x3d, 0x06, 0x0e, 0x2a, 0x13,
		0x0e, 0x52, 0x32, 0xd8, 0xc4, 0x10, 0x28, 0x63, 0x21, 0x63, 0xf0, 0xe7, 0x05, 0xe1, 0x31, 0xaa,
		0x1e, 0x1f, 0xf1, 0xb1, 0x49, 0x9c, 0x17, 0xdd, 0x39, 0xe5, 0x3b, 0xa0, 0xed, 0xdb, 0x9d, 0x63,
		0xab, 0x33, 0xf7, 0x29, 0xf7, 0x0e, 0x2f, 0xba, 0xae, 0x39, 0x37, 0x47, 0x12, 0x75, 0x4a, 0xa3,
		0x4d, 0x15, 0x94, 0xa9, 0x83, 0x2e, 0x55, 0x2d, 0x90, 0x36, 0x9a, 0xd4, 0xb6, 0x2f, 0x9a, 0xe8,
		0x91, 0x56, 0xc0, 0x65, 0x6f, 0x25, 0x56, 0x6e, 0x06, 0xa1, 0xba, 0xbf, 0x24, 0x5f, 0x5a, 0x0c,
		0x67, 0x09, 0xce, 0x52, 0x01, 0xce, 0x92, 0xea, 0xe5, 0xdc, 0xca, 0x78, 0x18, 0x18, 0xf3, 0xb8,
		0x3f, 0x10, 0xb7, 0xea, 0xc7, 0x36, 0x37, 0xc8, 0x7d, 0x9e, 0x9e, 0xe2, 0x96, 0xeb, 0xdd, 0xb8,
		0xd7, 0xbe, 0x72, 0x4b, 0x71, 0xc5, 0x96, 0xf2, 0x4a, 0xad, 0x21, 0x6f, 0x45, 0xff, 0xca, 0xac,
		0xf9, 0xb4, 0x8c, 0xde, 0x95, 0xd8, 0x62, 0xaf, 0xa6, 0xe9, 0xde, 0x90, 0xaf, 0x04, 0x21, 0x8f,
		0x6c, 0x11, 0x44, 0x84, 0x0d, 0x30, 0x26, 0x14, 0x75, 0x2f, 0xff, 0xf3, 0xbe, 0x3d, 0xf2, 0x68,
		0x9a, 0x18, 0x57, 0xf8, 0xbf, 0xf5, 0x2e, 0x5a, 0x75, 0x69, 0xfa, 0x79, 0xd4, 0xd1, 0xcf, 0xa3,
		0x50, 0xed, 0x63, 0x4c, 0x0b, 0x19, 0xd3, 0x46, 0x86, 0xb4, 0x92, 0x9e, 0x76, 0xd2, 0xd4, 0x52,
		0xd3, 0x77, 0x22, 0xbb, 0x90, 0x3f, 0x3f, 0xa9, 0x32, 0xb4, 0x23, 0x37, 0x0e, 0x7c, 0x36, 0xd1,
		0x3b, 0x4c, 0x24, 0xdf, 0x42, 0xc0, 0x83, 0x84, 0xb7, 0xf1, 0x89, 0x6e, 0xe1, 0xef, 0xa6, 0x43,
		0xd2, 0xc8, 0x77, 0xff, 0x3d, 0x22, 0xec, 0xe6, 0x3c, 0xa6, 0x57, 0x26, 0xf3, 0x90, 0xb6, 0x83,
		0x83, 0x85, 0x80, 0x85, 0x80, 0x85, 0x38, 0x34, 0x0b, 0x71, 0x13, 0x04, 0x1e, 0xb7, 0x7d, 0x4a,
		0x83, 0xd0, 0xd8, 0x43, 0x25, 0x7e, 0x37, 0xee, 0xe6, 0x49, 0xa4, 0xc3, 0x33, 0x72, 0x50, 0x79,
		0x50, 0x79, 0x50, 0x79, 0x9a, 0x5c, 0xf7, 0xd1, 0xf6, 0x9d, 0x04, 0xb7, 0x3e, 0x10, 0xf4, 0x7b,
		0xa4, 0x57, 0x9f, 0x23, 0xd7, 0x17, 0x6f, 0x08, 0x95, 0x27, 0x41, 0x13, 0x61, 0xe2, 0xd6, 0xdb,
		0x84, 0xed, 0xc1, 0x4c, 0xb4, 0xda, 0x36, 0xd5, 0x62, 0xdb, 0x78, 0xdb, 0x65, 0x73, 0xed, 0x96,
		0x09, 0x5b, 0x69, 0x1b, 0x69, 0xa1, 0x3d, 0x3d, 0xb2, 0xe6, 0xf9, 0x39, 0x0e, 0x8d, 0x44, 0xc9,
		0xd2, 0x51, 0xe9, 0xa2, 0x65, 0x99, 0x24, 0xad, 0x32, 0xb6, 0x2c, 0xf3, 0x47, 0xc3, 0x1b, 0x1e,
		0x59, 0x41, 0xdf, 0xb2, 0x63, 0x7f, 0x5c, 0x47, 0xd4, 0x0b, 0x7c, 0xc7, 0x45, 0xf3, 0x32, 0x43,
		0x70, 0x6b, 0xcb, 0x8e, 0xa3, 0x8d, 0x59, 0xbe, 0x1d, 0x2d, 0x59, 0x1b, 0xb3, 0xf4, 0x1c, 0xd3,
		0x7e, 0x93, 0x24, 0x59, 0x54, 0x8b, 0xa8, 0x9c, 0xe8, 0x63, 0xb2, 0xac, 0xb4, 0xcf, 0xe4, 0xbb,
		0xf8, 0x93, 0x2d, 0x6e, 0x3f, 0x64, 0x8b, 0x2a, 0xaa, 0xa5, 0xd9, 0x6b, 0xf5, 0xa4, 0xb6, 0x4e,
		0xa7, 0xe9, 0x95, 0x8c, 0xb6, 0x7a, 0x87, 0x69, 0x4d, 0xdf, 0x1a, 0xe9, 0xec, 0xa2, 0x7c, 0x66,
		0xa4, 0xb3, 0x49, 0xfd, 0x57, 0xc2, 0x61, 0xc6, 0x14, 0xc3, 0x8b, 0x25, 0x86, 0x15, 0xcf, 0xc9,
		0xbc, 0xc6, 0xa8, 0xe2, 0x62, 0x94, 0xdd, 0xc2, 0x60, 0x65, 0x7d, 0x75, 0xb7, 0x48, 0x0e, 0x0a,
		0x0f, 0x0a, 0x0f, 0x0a, 0xef, 0xf0, 0x15, 0x1e, 0xd5, 0x74, 0xf6, 0x62, 0x54, 0x1e, 0xbf, 0x0b,
		0x7d, 0x7d, 0x4d, 0x97, 0x52, 0x41, 0x81, 0x22, 0x14, 0xdc, 0xd1, 0x28, 0x38, 0xed, 0x02, 0xc5,
		0xf4, 0xda, 0x58, 0x56, 0xd3, 0x43, 0x96, 0xbd, 0x9c, 0xa3, 0x89, 0x14, 0x66, 0x11, 0xc2, 0x5a,
		0x50, 0x54, 0x0d, 0x29, 0x4c, 0xc5, 0xa7, 0x91, 0x76, 0xcc, 0x41, 0xea, 0x38, 0xd3, 0x8e, 0x0d,
		0x64, 0xb0, 0x68, 0xa4, 0x64, 0xf1, 0xc8, 0x4c, 0xa6, 0x1d, 0x91, 0x74, 0xa4, 0x51, 0x8b, 0x74,
		0x54, 0xba, 0x3b, 0x55, 0xcf, 0x1f, 0xdc, 0x58, 0xbc, 0x13, 0x82, 0x68, 0x96, 0xe2, 0x47, 0xd7,
		0x7f, 0xef, 0xa5, 0x61, 0x7a, 0x22, 0x56, 0x48, 0x84, 0x61, 0x8e, 0x22, 0x81, 0xc2, 0xa9, 0xfc,
		0x14, 0x39, 0x3c, 0xe2, 0xce, 0x77, 0x0f, 0x95, 0x2b, 0xcb, 0x1f, 0x79, 0xde, 0x51, 0xe4, 0x7c,
		0xcb, 0x9b, 0x5b, 0xd2, 0x70, 0x7b, 0x2d, 0xf2, 0x8c, 0xd2, 0xfb, 0x64, 0x31, 0x18, 0x8e, 0x33,
		0xa6, 0x51, 0x86, 0x26, 0x2c, 0x0b, 0x73, 0xb1, 0x08, 0x73, 0xf9, 0x47, 0xdb, 0x71, 0x65, 0xf3,
		0x86, 0xa2, 0xbd, 0x4a, 0x29, 0xda, 0xab, 0x4c, 0xd5, 0xe3, 0x8e, 0x5a, 0xab, 0x4c, 0x35, 0x62,
		0x19, 0xba, 0xca, 0xf5, 0xed, 0xa1, 0xeb, 0x69, 0xb4, 0x82, 0x1e, 0x3f, 0xaf, 0xd6, 0x28, 0xa1,
		0x8e, 0x46, 0x09, 0xc5, 0x46, 0x5b, 0x8e, 0xab, 0x51, 0x82, 0x72, 0x74, 0x64, 0xde, 0x40, 0xb2,
		0x8c, 0xc3, 0x55, 0x83, 0x96, 0xd3, 0xec, 0x81, 0x82, 0x6f, 0x58, 0xf9, 0xc1, 0xe1, 0xbe, 0x70,
		0xc5, 0xc3, 0x77, 0x76, 0xcc, 0xf5, 0x73, 0x20, 0xc9, 0xcb, 0xd8, 0x8e, 0x13, 0xf1, 0x38, 0x66,
		0x4a, 0x62, 0xbb, 0xe8, 0xef, 0xc6, 0x5a, 0x11, 0x19, 0xa2, 0x80, 0x32, 0x57, 0xc6, 0x94, 0x9a,
		0xfe, 0x1d, 0xd1, 0xfa, 0xdd, 0xf0, 0xae, 0xc5, 0x46, 0xbe, 0xdb, 0xb3, 0x63, 0xb1, 0xe7, 0xef,
		0xd1, 0x26, 0x78, 0x8f, 0x17, 0xc5, 0xf8, 0xf8, 0x4f, 0x25, 0x30, 0xbc, 0x6e, 0xec, 0xc6, 0xea,
		0x66, 0x37, 0x7d, 0x1a, 0xdd, 0x89, 0x60, 0x74, 0x0f, 0xa7, 0x3b, 0x91, 0xc7, 0xef, 0xb8, 0xa7,
		0x6f, 0xe5, 0x32, 0x32, 0xa8, 0x65, 0x42, 0xaa, 0x7f, 0x07, 0xa2, 0xb5, 0x9b, 0xf8, 0x23, 0x5d,
		0x2d, 0x93, 0x6e, 0xf6, 0x8f, 0x20, 0xeb, 0x47, 0x94, 0xed, 0xa3, 0x89, 0xb7, 0xd3, 0xe5, 0xcb,
		0x89, 0xb3, 0x7a, 0xc6, 0x52, 0x43, 0xf4, 0x29, 0xa1, 0x27, 0x9a, 0x44, 0x05, 0xfd, 0x51, 0x34,
		0x8f, 0xef, 0x28, 0x8e, 0xe2, 0xaa, 0x0f, 0xe5, 0x15, 0x3c, 0xad, 0xa6, 0xf2, 0x84, 0xba, 0x68,
		0xa2, 0xa0, 0x4f, 0x4e, 0x4e, 0x4f, 0x4e, 0x4e, 0xc3, 0x28, 0x10, 0x41, 0x2f, 0xf0, 0xac, 0x6f,
		0xad, 0x97, 0x89, 0x27, 0xf0, 0x92, 0xa2, 0x60, 0xe3, 0x7d, 0x14, 0x05, 0xd1, 0x47, 0x1e, 0xc7,
		0xf6, 0x80, 0xb0, 0x4e, 0x68, 0xb2, 0xf0, 0x4f, 0x93, 0x25, 0x27, 0x3b, 0x6a, 0xdd, 0x70, 0x4b,
		0xc1, 0x83, 0x31, 0x0d, 0x53, 0x9e, 0x83, 0x2c, 0x3c, 0xd9, 0x19, 0x36, 0x1c, 0x6f, 0x0d, 0x61,
		0x31, 0x82, 0xa9, 0x5a, 0xa7, 0x15, 0x44, 0xb3, 0x7e, 0xf7, 0x4b, 0x92, 0xa3, 0xdf, 0x33, 0xad,
		0x54, 0x48, 0xd5, 0x33, 0x41, 0xf1, 0x25, 0x5d, 0xd1, 0x25, 0xdc, 0x22, 0xb8, 0x45, 0x47, 0xed,
		0x16, 0x71, 0x7f, 0x34, 0xe4, 0x91, 0x2d, 0xd9, 0xde, 0xff, 0xd9, 0x00, 0x9c, 0x46, 0x5f, 0x43,
		0xcd, 0x7e, 0x86, 0x65, 0x80, 0x54, 0x04, 0x73, 0x35, 0x0d, 0x00, 0xab, 0x67, 0xc7, 0x42, 0xb6,
		0x4b, 0x5e, 0x7d, 0x4d, 0x36, 0x76, 0xd3, 0x38, 0x2a, 0xc9, 0x37, 0x86, 0xb3, 0xbd, 0xc7, 0x1d,
		0x0d, 0x5e, 0xc3, 0xd1, 0x80, 0xa3, 0x01, 0x47, 0x03, 0x8e, 0xc6, 0x8e, 0x1c, 0x0d, 0xa3, 0x89,
		0x9d, 0xf7, 0xf7, 0x42, 0x2d, 0xe5, 0xaf, 0x9f, 0x7e, 0x9b, 0x19, 0x0b, 0x7e, 0x2f, 0xae, 0xfa,
		0x6e, 0x14, 0x0b, 0x16, 0x71, 0x8f, 0xdb, 0x31, 0x77, 0x4a, 0x95, 0x94, 0x6b, 0xd6, 0x4f, 0x1a,
		0xcd, 0x93, 0x86, 0xe9, 0x9c, 0x5c, 0x77, 0xaf, 0x2b, 0xef, 0x14, 0x15, 0x32, 0x5d, 0xe9, 0xdd,
		0x0f, 0xd2, 0x3a, 0xc9, 0x4c, 0x09, 0x40, 0x10, 0x87, 0x7d, 0xf5, 0x12, 0x80, 0xf4, 0x69, 0x94,
		0x00, 0x98, 0xb4, 0xd7, 0x28, 0x01, 0x50, 0xb2, 0x14, 0xea, 0x03, 0x8a, 0x22, 0x6e, 0x33, 0xd7,
		0x21, 0xe8, 0xe3, 0x34, 0x26, 0x84, 0x78, 0x17, 0xe2, 0x5d, 0x88, 0x77, 0x29, 0x99, 0x16, 0x36,
		0x96, 0x21, 0xee, 0x0b, 0xb7, 0xef, 0xf2, 0x88, 0x22, 0xf0, 0xf5, 0x46, 0xaf, 0xbf, 0x89, 0xe0,
		0x91, 0xaf, 0xed, 0x23, 0x57, 0xaa, 0xd5, 0xeb, 0x3a, 0xbb, 0xec, 0x3e, 0x5e, 0x37, 0xd8, 0x65,
		0x37, 0xfb, 0xb5, 0x91, 0xfe, 0xc8, 0x7e, 0x6f, 0x5e, 0xd7, 0x59, 0x6b, 0xf2, 0xfb, 0xf9, 0x75,
		0x9d, 0x9d, 0x77, 0x6b, 0x9d, 0xce, 0x49, 0xed, 0xeb, 0xd9, 0x93, 0xfc, 0x83, 0xba, 0xfc, 0x9d,
		0x50, 0xeb, 0x74, 0x4e, 0xba, 0xdf, 0xe8, 0x12, 0x2a, 0xf2, 0xa5, 0xab, 0x7f, 0xbe, 0xee, 0x74,
		0xc2, 0xaf, 0x3f, 0x3e, 0x25, 0xff, 0xfd, 0xf0, 0xd4, 0x7d, 0x55, 0x7b, 0x5b, 0x41, 0xea, 0xb8,
		0x84, 0x11, 0x9d, 0x44, 0xcc, 0xef, 0x9a, 0x2f, 0xad, 0x20, 0xb2, 0x9e, 0xf9, 0xc7, 0xb3, 0x7d,
		0x0c, 0xf8, 0xfc, 0xf4, 0xcb, 0xa7, 0xef, 0x11, 0xf0, 0xd9, 0x55, 0xc0, 0x27, 0xdd, 0x7d, 0x04,
		0x7c, 0x8a, 0x09, 0xf8, 0x28, 0xb8, 0x44, 0x6e, 0xa2, 0xdc, 0xfc, 0x1e, 0x27, 0xc1, 0xd9, 0xf3,
		0xc4, 0x80, 0xb5, 0x81, 0xb5, 0x81, 0xb5, 0xa5, 0x79, 0x66, 0xe4, 0xfa, 0xe2, 0xac, 0x49, 0x80,
		0xae, 0x2f, 0x50, 0x73, 0xbb, 0x44, 0x8c, 0x78, 0x80, 0x07, 0x6a, 0x6e, 0xf5, 0x8f, 0x82, 0x6c,
		0x30, 0x07, 0xaa, 0x6e, 0xe1, 0x3a, 0xed, 0xda, 0x75, 0xda, 0x5b, 0xef, 0xe8, 0xee, 0x0c, 0xfe,
		0xd1, 0x2e, 0xfd, 0xa3, 0xbb, 0x33, 0x78, 0x48, 0xe5, 0xf5, 0x90, 0x50, 0x7b, 0x0b, 0xff, 0x08,
		0xfe, 0x51, 0x59, 0xfc, 0x23, 0x77, 0xdc, 0x03, 0x83, 0xa8, 0xc5, 0xba, 0xce, 0xcd, 0x44, 0x92,
		0x76, 0x1c, 0x2b, 0x2f, 0x18, 0x06, 0x1e, 0x4b, 0x13, 0x2e, 0xe9, 0x14, 0x0a, 0x8a, 0xde, 0xc8,
		0x04, 0xed, 0x39, 0xe8, 0x40, 0xd4, 0xc2, 0xbb, 0x26, 0x6f, 0xc7, 0x9a, 0x8c, 0xdf, 0x8b, 0x4a,
		0x19, 0x7c, 0x1c, 0x13, 0x6f, 0xd7, 0x20, 0x7a, 0x3b, 0xbd, 0x99, 0xe8, 0x47, 0x38, 0x2d, 0x0f,
		0xf9, 0x96, 0x1d, 0x7a, 0x14, 0xf0, 0x27, 0x90, 0x6f, 0x41, 0x81, 0xad, 0x96, 0x52, 0x44, 0x81,
		0x6d, 0x0e, 0xf6, 0x47, 0x81, 0x6d, 0x8e, 0x02, 0x5b, 0x85, 0xca, 0x50, 0x8b, 0xb4, 0xc0, 0xf6,
		0xa7, 0x64, 0x01, 0x25, 0x28, 0xb0, 0xcd, 0x1c, 0x3b, 0xa5, 0x59, 0x69, 0x33, 0x78, 0x3e, 0xa3,
		0x81, 0x26, 0x97, 0x26, 0x6d, 0x37, 0x8a, 0x6d, 0x95, 0xac, 0x86, 0x7e, 0x93, 0x4b, 0xf5, 0x01,
		0x66, 0x3a, 0x83, 0xcb, 0x24, 0x06, 0x96, 0xcd, 0x44, 0x50, 0x61, 0x5a, 0x99, 0x29, 0xcd, 0x92,
		0xc1, 0x30, 0x1d, 0xbd, 0x32, 0xa6, 0x00, 0xad, 0x02, 0xad, 0x72, 0x80, 0x5a, 0x45, 0x2f, 0x6e,
		0x57, 0xa2, 0xb6, 0xb9, 0x6e, 0xc8, 0xf4, 0xa3, 0xf8, 0xe5, 0xe9, 0x98, 0xab, 0x77, 0x21, 0x73,
		0xf7, 0x9d, 0x66, 0xed, 0xc1, 0x20, 0xe2, 0x03, 0x5b, 0xf0, 0x7d, 0x7e, 0x09, 0xdf, 0xf9, 0xbd,
		0xb1, 0xcf, 0xeb, 0xbf, 0x91, 0x6d, 0x5e, 0x5f, 0xae, 0xe5, 0x67, 0x81, 0xb8, 0x3d, 0x67, 0xa0,
		0xe6, 0x9e, 0x33, 0x10, 0xdb, 0xf7, 0xde, 0xdd, 0xb7, 0xc1, 0x7e, 0xf7, 0xec, 0xf6, 0x82, 0x9e,
		0xed, 0xed, 0xb5, 0x29, 0x88, 0x42, 0xe6, 0x3b, 0x7b, 0x7d, 0x04, 0xae, 0x3f, 0xba, 0xdf, 0xe7,
		0x17, 0x88, 0x85, 0x2d, 0xdc, 0xde, 0xde, 0xdb, 0x82, 0xb3, 0x7d, 0x7e, 0x03, 0xe7, 0xb6, 0x17,
		0x1e, 0x71, 0xcf, 0xfd, 0x17, 0x84, 0xa7, 0xa4, 0x93, 0x90, 0x54, 0x9f, 0xe8, 0xa5, 0xe1, 0x65,
		0x65, 0xa1, 0x92, 0xb9, 0x21, 0x53, 0x96, 0x08, 0xc6, 0x83, 0xa7, 0x02, 0xdf, 0x4a, 0xfd, 0x96,
		0xd8, 0xda, 0xbd, 0xdb, 0xad, 0x33, 0xb9, 0xcb, 0x8c, 0xe3, 0x9d, 0x6f, 0xe3, 0x4a, 0xc3, 0xe5,
		0x5d, 0x52, 0x2e, 0x57, 0x4c, 0x57, 0xd0, 0xa6, 0x29, 0x24, 0xd8, 0x81, 0x2c, 0x33, 0x91, 0xef,
		0x40, 0xb7, 0x1f, 0x4b, 0x8e, 0x8d, 0xae, 0xc4, 0xfc, 0xdf, 0x23, 0x2e, 0x79, 0xd1, 0x6a, 0x66,
		0x57, 0xe7, 0x1e, 0xce, 0x79, 0xa8, 0x72, 0x81, 0x41, 0xe9, 0x80, 0xa0, 0x4a, 0x20, 0x50, 0x27,
		0x00, 0xa8, 0xaa, 0x81, 0xb4, 0x03, 0x7e, 0xda, 0xfa, 0x46, 0x33, 0xc0, 0x47, 0x6b, 0xd0, 0xa4,
		0x03, 0x79, 0xea, 0x17, 0x93, 0x14, 0x2e, 0x22, 0x29, 0x5e, 0x3c, 0x52, 0x30, 0x98, 0x3a, 0x17,
		0x8b, 0x74, 0x9b, 0xf7, 0x93, 0xdd, 0x55, 0xd1, 0xbf, 0x9b, 0xa2, 0x52, 0x0f, 0xad, 0x73, 0x11,
		0x68, 0xba, 0x75, 0xad, 0xe6, 0x65, 0xeb, 0xb2, 0x7d, 0xd1, 0xbc, 0x3c, 0xdf, 0xff, 0x3d, 0xdc,
		0xad, 0x8d, 0x7f, 0xa1, 0xf7, 0x89, 0x2d, 0x1c, 0x90, 0xa8, 0x4f, 0x39, 0x03, 0x24, 0x37, 0xe5,
		0x5a, 0x7e, 0x8a, 0xf5, 0xf2, 0x94, 0xea, 0x37, 0xad, 0x56, 0xfb, 0xa2, 0xd5, 0xaa, 0x5f, 0x9c,
		0x5d, 0xd4, 0x2f, 0xcf, 0xcf, 0x1b, 0xed, 0x3c, 0x39, 0x02, 0xb9, 0xc1, 0xd4, 0xdb, 0xf6, 0x48,
		0x12, 0x3f, 0x51, 0xe1, 0xa6, 0x4a, 0x1e, 0xd4, 0xa1, 0x8d, 0x94, 0x36, 0x5b, 0xaa, 0xe7, 0x99,
		0x6b, 0xfd, 0xbf, 0x3c, 0xb3, 0x95, 0x13, 0x36, 0x4b, 0x17, 0xfa, 0xcc, 0x47, 0x72, 0xf1, 0x55,
		0x7e, 0x7e, 0xd2, 0xe2, 0xa3, 0x7c, 0xfc, 0xf3, 0xdc, 0xcb, 0xe6, 0xe4, 0x17, 0x3d, 0x3e, 0xd9,
		0xc0, 0x1d, 0xca, 0x5c, 0xb1, 0x9e, 0x17, 0x56, 0x4f, 0x7a, 0xcd, 0x8b, 0xe7, 0x29, 0xbe, 0xc9,
		0x5f, 0x64, 0xb3, 0xa5, 0x73, 0xdd, 0x56, 0x34, 0x9b, 0x07, 0xbd, 0xca, 0xa0, 0xd5, 0xbc, 0xe8,
		0x54, 0x1a, 0x8d, 0x4a, 0xa3, 0x4f, 0x49, 0xb4, 0x29, 0x27, 0xa5, 0xdb, 0x3a, 0xb9, 0x55, 0xc6,
		0x2c, 0xb5, 0x65, 0x13, 0xa6, 0x59, 0x8b, 0xe7, 0xa5, 0x5d, 0xd2, 0x8d, 0xc9, 0xed, 0xbe, 0xc8,
		0xb8, 0x2d, 0x2a, 0xee, 0x8a, 0xac, 0x9b, 0xa2, 0xec, 0x9e, 0x28, 0xbb, 0x25, 0x8a, 0xee, 0x88,
		0x1e, 0x8a, 0xc8, 0xed, 0x76, 0xc8, 0xf0, 0x86, 0x25, 0xd9, 0x4b, 0xac, 0xf2, 0x81, 0xfb, 0x83,
		0x54, 0x97, 0xe6, 0x73, 0x2f, 0x24, 0x9c, 0x24, 0x15, 0x77, 0x42, 0xd5, 0x8d, 0xd0, 0x86, 0xbe,
		0xea, 0x90, 0x57, 0xa6, 0x24, 0x4a, 0xc5, 0x4d, 0x50, 0xef, 0x0b, 0xb0, 0xcb, 0x4d, 0x21, 0xc2,
		0xe9, 0x39, 0x8a, 0x8c, 0xa5, 0xbb, 0xde, 0x55, 0xae, 0xdf, 0xb1, 0xdf, 0x6c, 0xf6, 0x47, 0x9d,
		0x5d, 0x5a, 0x7f, 0xfa, 0xef, 0xff, 0xf8, 0xcf, 0x3f, 0xff, 0xb3, 0x33, 0xaa, 0xd7, 0x9b, 0xed,
		0x6a, 0xed, 0xf1, 0xd5, 0xb7, 0xff, 0xfb, 0x7f, 0x27, 0xaf, 0x5f, 0x9e, 0x7e, 0xbe, 0xfa, 0xaf,
		0xb7, 0xac, 0xfb, 0xcd, 0x76, 0x0d, 0xd0, 0x55, 0x05, 0x82, 0x1b, 0xcc, 0x66, 0x98, 0x4f, 0x1b,
		0x2f, 0x01, 0x83, 0x9c, 0x36, 0xa3, 0x01, 0x9b, 0xb1, 0xcf, 0x36, 0x23, 0x6f, 0xdb, 0xd8, 0x8a,
		0x1b, 0xb2, 0x50, 0x2e, 0x18, 0x39, 0x5f, 0xcc, 0x25, 0xb7, 0x83, 0x88, 0xaa, 0x22, 0xaa, 0x4a,
		0x19, 0x55, 0x95, 0x65, 0xc0, 0x05, 0xfd, 0x76, 0x29, 0xf1, 0xcc, 0x78, 0x89, 0x85, 0x65, 0x22,
		0xd3, 0x49, 0xf6, 0xca, 0x15, 0xb6, 0x3a, 0x2d, 0x62, 0xb5, 0x5b, 0xc3, 0x16, 0xda, 0x1d, 0xf5,
		0x74, 0xfc, 0x65, 0xb5, 0xc7, 0xea, 0x75, 0x83, 0x35, 0xbb, 0x93, 0x3f, 0x9c, 0x5d, 0xd7, 0x59,
		0xb3, 0x5b, 0xab, 0xc9, 0xe7, 0x1c, 0xbb, 0x26, 0x2b, 0x81, 0xf5, 0x38, 0xa2, 0xbd, 0xbf, 0x1c,
		0x71, 0xf5, 0x98, 0x9c, 0x8c, 0xcd, 0xfa, 0xef, 0xd8, 0xf7, 0xdd, 0xaf, 0xf5, 0xd7, 0xad, 0xa7,
		0xda, 0x55, 0xad, 0xba, 0xfc, 0x77, 0x57, 0xb5, 0xaf, 0xf5, 0xd7, 0xe7, 0x4f, 0xd5, 0xea, 0x9a,
		0x7f, 0x79, 0xbb, 0x8e, 0x46, 0xed, 0xb1, 0x5a, 0xad, 0x8e, 0x79, 0x61, 0x81, 0x3f, 0xae, 0xeb,
		0x8d, 0xee, 0xdb, 0xf4, 0xd7, 0xec, 0xbf, 0x53, 0x0e, 0xcb, 0xf5, 0xe1, 0x5a, 0xad, 0x3a, 0xcf,
		0x58, 0xc9, 0xcf, 0xaf, 0xcd, 0xa7, 0xda, 0x63, 0x35, 0x61, 0xc7, 0xc6, 0x94, 0xc9, 0x1a, 0x09,
		0x91, 0x37, 0xc9, 0xc7, 0x8d, 0xb3, 0x59, 0xf1, 0x61, 0xef, 0x1c, 0xc0, 0x6b, 0x68, 0xc7, 0xbf,
		0x33, 0x2f, 0xf5, 0x0a, 0x59, 0x34, 0x4e, 0x3d, 0x49, 0x22, 0x88, 0x55, 0x12, 0x40, 0x12, 0x40,
		0x12, 0x3b, 0x40, 0x12, 0xb1, 0x88, 0x5c, 0x7f, 0xa0, 0x02, 0x23, 0x24, 0x34, 0xaa, 0xb2, 0x26,
		0xad, 0x64, 0x4a, 0xe8, 0x55, 0xa7, 0x73, 0xd2, 0xe9, 0x9c, 0x64, 0xbf, 0xd7, 0x1e, 0xf9, 0xbd,
		0xdd, 0x93, 0xa8, 0x99, 0x2d, 0x55, 0x46, 0x6c, 0x8a, 0xdc, 0x2c, 0x59, 0x15, 0x80, 0x0c, 0xd9,
		0xd6, 0x2f, 0x57, 0xcd, 0x7c, 0xcc, 0x6e, 0x06, 0xe6, 0xd6, 0x25, 0x2a, 0xc9, 0x90, 0x94, 0xf6,
		0x2f, 0x5c, 0x8c, 0x7f, 0x43, 0x8a, 0x4c, 0x99, 0x81, 0x76, 0x95, 0x22, 0xcb, 0x73, 0x8b, 0x5b,
		0x87, 0x33, 0x72, 0x67, 0xca, 0x5e, 0x6c, 0xd8, 0x8d, 0x3c, 0xe5, 0xa7, 0xdb, 0xcb, 0x4c, 0x73,
		0x64, 0xb8, 0x32, 0x70, 0x31, 0x8a, 0xb8, 0x35, 0x7e, 0x1d, 0xeb, 0xd3, 0xd6, 0x1c, 0xa2, 0x5a,
		0xc6, 0x2b, 0x4f, 0xe5, 0xa7, 0x5e, 0xce, 0xeb, 0xd9, 0x77, 0x91, 0x15, 0xc3, 0x17, 0x9b, 0xcd,
		0xcf, 0xf2, 0x59, 0x6d, 0xe1, 0x58, 0x45, 0x4e, 0x5d, 0xb3, 0x55, 0xf2, 0x6c, 0xb9, 0xf8, 0xea,
		0xb3, 0x17, 0x9b, 0x7b, 0x85, 0x4a, 0xfc, 0x10, 0x0b, 0x3e, 0x5c, 0x59, 0xfa, 0x0c, 0x5e, 0x64,
		0xff, 0xbe, 0xf4, 0xd2, 0xeb, 0x23, 0xad, 0xcf, 0x82, 0xd5, 0x4d, 0xa0, 0x74, 0xcd, 0xe8, 0xdd,
		0xb5, 0xdf, 0x99, 0x87, 0xf9, 0x72, 0x83, 0xca, 0xdc, 0xac, 0xf6, 0xcc, 0xb0, 0xda, 0xf1, 0x0a,
		0x25, 0xc5, 0xfa, 0xb9, 0xc8, 0x66, 0xc5, 0x1e, 0x89, 0x5b, 0xee, 0x0b, 0xb7, 0xb7, 0x59, 0xf3,
		0xcd, 0x6e, 0xbc, 0x2c, 0x7e, 0xbe, 0x24, 0xb9, 0xf2, 0x6c, 0x6b, 0x7e, 0xe7, 0x0f, 0xbd, 0x5b,
		0xdb, 0xf5, 0xe3, 0xfd, 0x4c, 0x9b, 0x2f, 0xbf, 0x44, 0x51, 0x19, 0xf4, 0xc9, 0x37, 0xe6, 0xcf,
		0x89, 0x4c, 0x9f, 0xd8, 0x93, 0xac, 0x48, 0x7e, 0xf6, 0xd8, 0xe3, 0x04, 0x49, 0x6e, 0xf6, 0x29,
		0x38, 0x57, 0x62, 0x3b, 0x43, 0xd7, 0x67, 0x69, 0x09, 0x99, 0x7c, 0xac, 0x63, 0xfe, 0xe1, 0x9c,
		0xfb, 0xf2, 0x57, 0xde, 0xb7, 0x47, 0x9e, 0x5c, 0x23, 0xbe, 0x8a, 0xe3, 0xc6, 0x29, 0xde, 0xc9,
		0xf5, 0x44, 0xf7, 0x40, 0xe2, 0x2d, 0xf2, 0x62, 0x71, 0x80, 0xa1, 0x17, 0x69, 0xb1, 0x29, 0x5b,
		0x14, 0x46, 0x5e, 0x44, 0x16, 0x74, 0x73, 0x4b, 0xe2, 0x99, 0xf7, 0xfe, 0x28, 0xc5, 0x6b, 0x4f,
		0x05, 0x06, 0x4c, 0x1d, 0x1e, 0xf7, 0x22, 0x37, 0x94, 0xba, 0x2a, 0x34, 0xbb, 0x98, 0x38, 0xf7,
		0x30, 0x84, 0x16, 0x42, 0x5b, 0x1a, 0xa1, 0x95, 0x67, 0x4c, 0xe5, 0xf8, 0xa9, 0x64, 0x09, 0x9a,
		0x46, 0xda, 0x0d, 0x37, 0x5c, 0x64, 0xb8, 0x67, 0x39, 0xec, 0xa5, 0xbf, 0x75, 0xca, 0xa3, 0x6d,
		0x8e, 0xe1, 0x6a, 0x4b, 0x11, 0x19, 0x07, 0xc2, 0xd2, 0x37, 0xf2, 0x04, 0x44, 0x0e, 0x53, 0xfb,
		0x7b, 0x1a, 0xee, 0x95, 0x34, 0xb1, 0xc9, 0x43, 0x72, 0xa6, 0xb5, 0x01, 0xd3, 0x0a, 0xd3, 0xba,
		0xd5, 0x8b, 0x93, 0x9c, 0xe0, 0x5e, 0xb1, 0xbd, 0x41, 0x10, 0xb9, 0xe2, 0x76, 0xa8, 0xde, 0x10,
		0x71, 0x46, 0xe2, 0x48, 0x3a, 0x22, 0xaa, 0x33, 0xbc, 0x2e, 0xe3, 0x93, 0x09, 0x00, 0x99, 0x20,
		0xd0, 0x0b, 0x84, 0xa2, 0x49, 0x2b, 0xbc, 0x4f, 0xe2, 0x94, 0xed, 0x55, 0xfb, 0x0b, 0xaa, 0xf8,
		0x92, 0x8a, 0x3e, 0xa5, 0xea, 0x2e, 0x11, 0x8c, 0x79, 0xd0, 0x1b, 0xef, 0x40, 0x30, 0x87, 0xe6,
		0xc4, 0xfa, 0xd6, 0x7a, 0xd9, 0xf3, 0xb8, 0x1d, 0x09, 0x7e, 0x2f, 0x5e, 0x5a, 0xb6, 0xef, 0x58,
		0xd5, 0x6c, 0x8c, 0x43, 0x72, 0x70, 0x93, 0x11, 0x0e, 0x73, 0xd3, 0x1d, 0x26, 0x7f, 0xed, 0xc6,
		0x6e, 0xbc, 0xe6, 0xaf, 0xef, 0xa2, 0x28, 0x7c, 0x59, 0x4b, 0xff, 0x3e, 0xf9, 0xe3, 0xd0, 0x39,
		0x97, 0x21, 0x2a, 0x7a, 0x21, 0x4b, 0x1f, 0xd9, 0x46, 0xf7, 0x76, 0x68, 0xf7, 0xd8, 0x94, 0xf8,
		0x9a, 0x95, 0x55, 0x0a, 0x6a, 0x9e, 0xdf, 0x2d, 0x41, 0xdb, 0xde, 0xc5, 0xfc, 0x09, 0x93, 0x81,
		0x5c, 0xab, 0x82, 0xbb, 0x4a, 0x0b, 0x86, 0x0b, 0x86, 0xeb, 0x68, 0x0c, 0x97, 0x74, 0xfd, 0x99,
		0x4e, 0x1c, 0x45, 0x37, 0x9e, 0x42, 0x60, 0x08, 0x28, 0x46, 0x13, 0xeb, 0xc6, 0x59, 0xc8, 0x43,
		0x06, 0x74, 0xa1, 0x03, 0x8d, 0xf8, 0x0b, 0x49, 0x1c, 0x66, 0x4d, 0x3c, 0xe6, 0x70, 0xf7, 0xf8,
		0x88, 0x4c, 0xb6, 0xeb, 0x3b, 0xfc, 0x5e, 0xdd, 0x4a, 0x67, 0x8f, 0xc3, 0x30, 0xc3, 0x30, 0x1f,
		0x8d, 0x61, 0x1e, 0xb9, 0xbe, 0x78, 0xa3, 0x61, 0x97, 0x55, 0x5a, 0xee, 0xab, 0xf5, 0xf1, 0x2a,
		0x9b, 0x55, 0xae, 0xc3, 0x2a, 0x9b, 0xb7, 0xca, 0x30, 0xcb, 0xa5, 0x35, 0xcb, 0xa4, 0x31, 0xe4,
		0xc9, 0xb5, 0x09, 0x09, 0x03, 0x2c, 0x77, 0x51, 0x62, 0x5e, 0x07, 0xc8, 0x5d, 0x98, 0x98, 0x67,
		0xed, 0xf9, 0x7a, 0x77, 0x89, 0x27, 0xa5, 0x6e, 0x4b, 0xc8, 0x6e, 0x1d, 0x79, 0x7f, 0xd6, 0xac,
		0x6c, 0xf5, 0x74, 0xfc, 0x63, 0x31, 0x72, 0x71, 0x3a, 0x31, 0x85, 0xa7, 0x72, 0x21, 0x8c, 0x67,
		0xca, 0x92, 0x7f, 0x49, 0xbf, 0xe3, 0xf3, 0xf8, 0xc7, 0xbb, 0x85, 0xaf, 0xfa, 0xfc, 0x8f, 0xf1,
		0x57, 0x25, 0xbf, 0x14, 0xd9, 0x8b, 0x35, 0x57, 0x9b, 0xa2, 0x15, 0x43, 0x9a, 0xb3, 0x25, 0x8d,
		0x85, 0xc2, 0x15, 0x23, 0x50, 0x10, 0x85, 0x2b, 0x3a, 0x1c, 0x69, 0xa1, 0x62, 0xa5, 0x10, 0x18,
		0x81, 0x8a, 0x15, 0x54, 0xac, 0x1c, 0x69, 0xc5, 0x8a, 0x90, 0xd1, 0x63, 0x0b, 0x53, 0xf2, 0x61,
		0x55, 0x61, 0x55, 0xcb, 0x63, 0x55, 0x27, 0x4b, 0x97, 0xcd, 0xc0, 0x97, 0xa3, 0x8a, 0x9b, 0xe2,
		0x6e, 0x7b, 0x9e, 0xc6, 0x9c, 0x05, 0x5f, 0x62, 0xaf, 0x37, 0x5b, 0x7b, 0x7b, 0x69, 0x3d, 0x97,
		0xbb, 0xa5, 0x7e, 0x55, 0x3d, 0x97, 0x8b, 0x55, 0xcc, 0x1d, 0x75, 0xed, 0x6b, 0xdb, 0x9b, 0xb6,
		0x4a, 0xfe, 0xaa, 0xf6, 0xa6, 0x9d, 0xd1, 0xe9, 0x65, 0xdc, 0xe7, 0xb6, 0x18, 0x45, 0xe9, 0x00,
		0xcf, 0x2d, 0x37, 0x34, 0xa7, 0x9f, 0xdc, 0x7c, 0x37, 0xb3, 0xbe, 0xed, 0x6e, 0x66, 0x93, 0xf4,
		0x6e, 0xe6, 0xb3, 0x17, 0x6b, 0x65, 0xcd, 0xd1, 0xce, 0x2e, 0x66, 0x3e, 0x77, 0xf1, 0x56, 0x8d,
		0x6d, 0xb7, 0xda, 0x8a, 0xbc, 0x1e, 0x57, 0x1e, 0x0f, 0x2b, 0xaf, 0x47, 0x95, 0x4f, 0xab, 0xe6,
		0x07, 0x5c, 0x92, 0x1e, 0x92, 0x32, 0xa8, 0x97, 0x07, 0xf1, 0x4f, 0xf9, 0xcc, 0x81, 0xfc, 0xab,
		0xe6, 0xf6, 0x68, 0x8a, 0x7c, 0x59, 0x45, 0x45, 0xbc, 0xc1, 0x03, 0xc9, 0xed, 0x71, 0x50, 0x78,
		0x18, 0x5d, 0x29, 0xc9, 0x7a, 0x7f, 0x2f, 0x36, 0x8f, 0x39, 0xce, 0xaf, 0x5f, 0xe2, 0xc8, 0x63,
		0xfc, 0x5e, 0x5c, 0xf5, 0xdd, 0x28, 0x16, 0x2c, 0xe2, 0x1e, 0xb7, 0x63, 0xee, 0x18, 0xd5, 0x37,
		0xcd, 0xfa, 0x49, 0xfb, 0x64, 0xc3, 0x64, 0xde, 0x0d, 0x8c, 0xbb, 0xdf, 0xef, 0xf5, 0x42, 0x82,
		0x03, 0xf7, 0xb1, 0xeb, 0x4c, 0x2e, 0x2b, 0x2f, 0x22, 0xbb, 0xc7, 0x59, 0x90, 0xde, 0x0b, 0xcb,
		0x61, 0xea, 0x17, 0x3f, 0xae, 0x69, 0xef, 0xeb, 0xb0, 0xf7, 0xa5, 0xb0, 0xf7, 0xdc, 0x1f, 0x0d,
		0x79, 0xb4, 0x15, 0x7e, 0xe6, 0xf0, 0xfc, 0xb6, 0x78, 0x7a, 0x87, 0xa9, 0x40, 0x1b, 0x97, 0x27,
		0x8d, 0xc6, 0x21, 0x6a, 0xd0, 0xed, 0x2f, 0x06, 0x15, 0x6a, 0x59, 0x95, 0x2f, 0x76, 0x34, 0x64,
		0x11, 0xbf, 0x09, 0x82, 0x1c, 0x53, 0x5f, 0xe6, 0x3f, 0x5c, 0xaa, 0x56, 0x36, 0x99, 0xf2, 0xd9,
		0xbc, 0xb4, 0x3d, 0xd2, 0xa2, 0x93, 0x17, 0x29, 0xaa, 0xa5, 0xcd, 0xcd, 0x20, 0x64, 0x43, 0xfb,
		0x9e, 0x7d, 0xb1, 0x5d, 0x91, 0xbf, 0xad, 0xcd, 0xc2, 0x53, 0xdb, 0xda, 0x9f, 0x48, 0x74, 0x19,
		0xa9, 0xb4, 0xeb, 0xf5, 0xcd, 0xc1, 0x90, 0xee, 0x9e, 0x8c, 0xa4, 0xc9, 0xce, 0xf4, 0x66, 0x10,
		0x1e, 0x72, 0x0b, 0x9d, 0xe4, 0xf5, 0x4a, 0x37, 0x9c, 0x66, 0xe4, 0xfa, 0xa2, 0xd1, 0x96, 0x18,
		0x4f, 0xd3, 0xce, 0xf1, 0x51, 0xb9, 0x9a, 0xb9, 0xa2, 0x86, 0xd3, 0xd4, 0x31, 0x9c, 0x66, 0x79,
		0x4b, 0xce, 0xda, 0xf5, 0xfa, 0xf1, 0x4d, 0xa7, 0x29, 0x24, 0x7e, 0xbc, 0xe7, 0xe1, 0x82, 0x06,
		0xa5, 0x5b, 0xfd, 0x6e, 0x34, 0x48, 0x08, 0x73, 0x47, 0x67, 0x43, 0x26, 0x1a, 0x6b, 0x25, 0xc4,
		0x7e, 0x35, 0x89, 0xb4, 0xaf, 0x07, 0x07, 0x57, 0xdb, 0xc1, 0x58, 0x4e, 0x50, 0x06, 0x7b, 0xb8,
		0x6f, 0xf6, 0x30, 0x77, 0x33, 0x39, 0x29, 0x60, 0xa7, 0x03, 0xf0, 0xe6, 0x80, 0xde, 0x7c, 0xff,
		0xa9, 0xca, 0xaf, 0xb7, 0xdc, 0x1a, 0xda, 0xf7, 0xee, 0x70, 0x34, 0xb4, 0xec, 0x61, 0x30, 0xf2,
		0x85, 0x15, 0xf4, 0x2d, 0xe1, 0x0e, 0xb9, 0x25, 0x6e, 0x6d, 0x61, 0x7d, 0xf7, 0xb7, 0x4f, 0xd6,
		0x17, 0xd7, 0xf3, 0xac, 0xe4, 0x3b, 0x2c, 0x11, 0x58, 0x11, 0xef, 0x71, 0xf7, 0x8e, 0x5b, 0xef,
		0x7d, 0x27, 0xf9, 0xe4, 0xcf, 0x3f, 0x7c, 0x67, 0x0d, 0xed, 0xe8, 0x77, 0x1e, 0xc5, 0x56, 0x3f,
		0x0a, 0x86, 0x96, 0xed, 0x79, 0x56, 0xc8, 0x93, 0x3f, 0xda, 0xbe, 0x63, 0xf5, 0x83, 0x28, 0xfd,
		0x1b, 0xdb, 0x71, 0x22, 0x1e, 0xc7, 0x56, 0xdf, 0x1e, 0xba, 0x9e, 0xcb, 0xe3, 0x8c, 0xf8, 0x17,
		0x1e, 0x71, 0x6b, 0x14, 0x5a, 0x61, 0xe4, 0x06, 0x51, 0x42, 0x3c, 0x11, 0x19, 0x2b, 0x13, 0x19,
		0xab, 0xea, 0xfa, 0xe9, 0xa3, 0x3e, 0x17, 0x5f, 0x82, 0xe8, 0x77, 0xcb, 0xf5, 0x63, 0x61, 0xfb,
		0x3d, 0x1e, 0xd7, 0x4e, 0x3a, 0x7e, 0xc7, 0x7f, 0xd7, 0x17, 0x3c, 0xb2, 0xc4, 0xad, 0x1b, 0x67,
		0xab, 0xe5, 0x9e, 0x1d, 0xc6, 0x3c, 0x4e, 0x17, 0xec, 0xf0, 0x9e, 0x67, 0x47, 0x93, 0x6f, 0xe9,
		0x05, 0xfe, 0x1d, 0x8f, 0x06, 0xdc, 0xef, 0x71, 0xeb, 0xd6, 0x8e, 0xad, 0xa0, 0xd7, 0x1b, 0x45,
		0x11, 0x77, 0xd2, 0x05, 0xc6, 0xdc, 0x77, 0x62, 0xcb, 0x15, 0xb1, 0x15, 0x7c, 0xf1, 0xad, 0xf7,
		0x3f, 0xfd, 0x3c, 0x7d, 0x1b, 0x11, 0xa4, 0x7f, 0x9d, 0xbe, 0xcb, 0x89, 0xd1, 0x66, 0x7d, 0x5b,
		0xe1, 0x74, 0x4e, 0x58, 0x2d, 0x09, 0xaf, 0xa5, 0xd5, 0x8a, 0x8a, 0x7a, 0xd1, 0x56, 0x33, 0xaa,
		0xea, 0x46, 0x5b, 0xed, 0x68, 0xab, 0x1f, 0x0a, 0x35, 0x24, 0x89, 0x41, 0x0a, 0x19, 0x61, 0x9f,
		0x0b, 0xb6, 0x2b, 0xc0, 0x77, 0x45, 0x18, 0x2f, 0x0f, 0xe7, 0xb5, 0x60, 0xbd, 0x2e, 0xbc, 0x27,
		0x03, 0xb4, 0xfa, 0xc0, 0x56, 0x01, 0xf6, 0x6b, 0xc1, 0x7f, 0x02, 0x37, 0xa0, 0x8c, 0xbb, 0x77,
		0xd0, 0xc3, 0xeb, 0x15, 0x1a, 0x8d, 0x54, 0xdc, 0x3e, 0x1b, 0x17, 0x6d, 0x98, 0xf0, 0xc5, 0x57,
		0x0d, 0x49, 0xf2, 0x65, 0x12, 0x68, 0x9b, 0xda, 0xaa, 0xcc, 0xbd, 0x6e, 0x39, 0x2c, 0xcb, 0xca,
		0x7e, 0xec, 0xb9, 0xab, 0xdb, 0x2d, 0xa6, 0x54, 0x2a, 0x1f, 0x07, 0xe5, 0xaa, 0x93, 0xfa, 0xff,
		0xec, 0x68, 0xf8, 0xf3, 0x86, 0xbd, 0x97, 0x9d, 0x62, 0xb1, 0xd9, 0x91, 0xdd, 0x92, 0x14, 0x48,
		0x5e, 0x78, 0xd1, 0x65, 0x45, 0x6e, 0xe0, 0x80, 0x72, 0x03, 0x79, 0x12, 0x44, 0x0a, 0x89, 0xa2,
		0x67, 0x1d, 0xc6, 0x20, 0x64, 0x1e, 0xbf, 0xe3, 0x5e, 0xe2, 0x57, 0x09, 0xdb, 0xf5, 0x79, 0x94,
		0x7a, 0x79, 0xf3, 0xae, 0xdb, 0xe6, 0x0c, 0x7e, 0x49, 0xa3, 0x1e, 0x79, 0xd9, 0x70, 0xef, 0xe3,
		0x1f, 0x39, 0xd9, 0x34, 0x27, 0x7e, 0x40, 0xd8, 0x92, 0x3c, 0x6c, 0x29, 0x81, 0xb9, 0x64, 0xb0,
		0x96, 0x92, 0x54, 0x28, 0x60, 0x2b, 0x1d, 0xc1, 0x90, 0xc6, 0x52, 0xd4, 0xc2, 0x21, 0x8f, 0x9d,
		0x94, 0xab, 0x11, 0xd5, 0x8b, 0x02, 0x72, 0x18, 0xfc, 0x75, 0x91, 0x6a, 0x4c, 0xb7, 0x21, 0x37,
		0xf9, 0xc5, 0x4f, 0xb7, 0xc9, 0x39, 0xe0, 0x68, 0x65, 0xe3, 0x73, 0x5f, 0x04, 0x58, 0x67, 0xf4,
		0xff, 0xb2, 0x60, 0xea, 0xc3, 0x28, 0x10, 0x41, 0x2f, 0xf0, 0xac, 0x45, 0x9a, 0x13, 0xb3, 0x6f,
		0xd9, 0x77, 0xb6, 0xeb, 0x25, 0xaa, 0xcb, 0xca, 0xf8, 0xce, 0xfa, 0xe2, 0x3a, 0x1c, 0xb3, 0x75,
		0x4a, 0x07, 0x04, 0xe8, 0x66, 0xeb, 0x68, 0x0f, 0x86, 0x5b, 0xfc, 0x9b, 0x2e, 0xd5, 0x60, 0xb8,
		0x05, 0x07, 0x2f, 0xff, 0x20, 0xb8, 0x05, 0x67, 0xee, 0xd9, 0xd1, 0x6f, 0x2f, 0xe6, 0xe4, 0xf8,
		0xb9, 0x25, 0x56, 0xdc, 0xf8, 0x7b, 0xfb, 0x77, 0xfe, 0x73, 0x06, 0xce, 0x17, 0x4f, 0x6c, 0x79,
		0xd9, 0x95, 0xf9, 0x7f, 0x5a, 0x58, 0xd7, 0x5f, 0xf9, 0x9d, 0xdb, 0x1b, 0x0f, 0xf3, 0x79, 0x7a,
		0xf1, 0xf4, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x47, 0xe4,
		0x0a, 0xc5, 0xcb, 0x16, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/interface/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_AdminState)(0)),
	},
	"/interface/breakout-mode/channel-speed": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_BreakoutMode_ChannelSpeed)(0)),
	},
	"/interface/ethernet/duplex-mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_DuplexMode)(0)),
	},
	"/interface/ethernet/physical-medium": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_PhysicalMedium)(0)),
	},
	"/interface/ethernet/port-speed": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed)(0)),
	},
	"/interface/ethernet/standby-signaling": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_StandbySignaling)(0)),
	},
	"/interface/ethernet/storm-control/units": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Ethernet_StormControl_Units)(0)),
	},
	"/interface/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_PortOperDownReason)(0)),
	},
	"/interface/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_OperState)(0)),
	},
	"/interface/subinterface/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_AdminState)(0)),
	},
	"/interface/subinterface/anycast-gw/anycast-gw-mac-origin": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_AnycastGwMacOrigin)(0)),
	},
	"/interface/subinterface/bridge-table/mac-duplication/action": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Subinterface_BridgeTable_MacDuplication_Action)(0)),
	},
	"/interface/subinterface/bridge-table/mac-learning/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfacesBridgeTable_AdminState)(0)),
	},
	"/interface/subinterface/bridge-table/mac-learning/aging/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfacesBridgeTable_AdminState)(0)),
	},
	"/interface/subinterface/ipv4/address/origin": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_AddressOrigin)(0)),
	},
	"/interface/subinterface/ipv4/address/status": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_Ipv4AddressStatus)(0)),
	},
	"/interface/subinterface/ipv6/address/origin": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_AddressOrigin)(0)),
	},
	"/interface/subinterface/ipv6/address/status": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIfIp_Ipv6AddressStatus)(0)),
	},
	"/interface/subinterface/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_SubifOperDownReason)(0)),
	},
	"/interface/subinterface/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Subinterface_OperState)(0)),
	},
	"/interface/subinterface/type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_SiType)(0)),
	},
	"/interface/transceiver/connector-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType)(0)),
	},
	"/interface/transceiver/form-factor": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor)(0)),
	},
	"/interface/transceiver/forward-error-correction": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection)(0)),
	},
	"/interface/transceiver/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaInterfaces_TransceiverOperState)(0)),
	},
	"/network-instance/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_AdminState)(0)),
	},
	"/network-instance/bridge-table/mac-duplication/action": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication_Action)(0)),
	},
	"/network-instance/bridge-table/mac-duplication/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBridgeTableMacDuplication_AdminState)(0)),
	},
	"/network-instance/bridge-table/mac-learning/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBridgeTableMacLearning_AdminState)(0)),
	},
	"/network-instance/bridge-table/mac-learning/aging/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBridgeTableMacLearning_AdminState)(0)),
	},
	"/network-instance/bridge-table/mac-learning/oper-mac-learning": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBridgeTableMacLearning_OperState)(0)),
	},
	"/network-instance/bridge-table/mac-learning/oper-mac-learning-disabled-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_OperMacLearningDisabledReason)(0)),
	},
	"/network-instance/icmp/statistics/type/name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name)(0)),
	},
	"/network-instance/icmp6/statistics/type/name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name)(0)),
	},
	"/network-instance/interface/multicast-forwarding": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_MulticastType)(0)),
	},
	"/network-instance/interface/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason)(0)),
	},
	"/network-instance/interface/oper-mac-learning": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_OperState)(0)),
	},
	"/network-instance/interface/oper-mac-learning-disabled-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperMacLearningDisabledReason)(0)),
	},
	"/network-instance/interface/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_OperState)(0)),
	},
	"/network-instance/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_OperState)(0)),
	},
	"/network-instance/protocols/bgp/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/as-path-options/remove-private-as/mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions_RemovePrivateAs_Mode)(0)),
	},
	"/network-instance/protocols/bgp/evpn/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/graceful-restart/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/group/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/group/as-path-options/remove-private-as/mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions_RemovePrivateAs_Mode)(0)),
	},
	"/network-instance/protocols/bgp/group/evpn/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/group/graceful-restart/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/group/ipv4-unicast/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/group/ipv6-unicast/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/group/trace-options/flag/modifier": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier)(0)),
	},
	"/network-instance/protocols/bgp/group/trace-options/flag/name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name)(0)),
	},
	"/network-instance/protocols/bgp/ipv4-unicast/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/ipv4-unicast/convergence/convergence-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState)(0)),
	},
	"/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/allowed-tunnel-types": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_TunnelType)(0)),
	},
	"/network-instance/protocols/bgp/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode)(0)),
	},
	"/network-instance/protocols/bgp/ipv6-unicast/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/ipv6-unicast/convergence/convergence-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState)(0)),
	},
	"/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/allowed-tunnel-types": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_TunnelType)(0)),
	},
	"/network-instance/protocols/bgp/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_NextHopResolution_Ipv4NextHops_TunnelResolution_Mode)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/advertised-capabilities": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as/mode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions_RemovePrivateAs_Mode)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/evpn/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/evpn/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Evpn_OperState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/graceful-restart/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/graceful-restart/neighbor-capability/afi-safi/name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/ipv4-unicast/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/ipv4-unicast/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/ipv6-unicast/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaBgp_AdminState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/ipv6-unicast/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/last-event": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/last-notification-error-code": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/last-notification-error-subcode": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/last-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/received-afi-safi": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/received-capabilities": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/received-end-of-rib": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/sent-end-of-rib": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/session-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/slow-peer": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/trace-options/flag/modifier": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier)(0)),
	},
	"/network-instance/protocols/bgp/neighbor/trace-options/flag/name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name)(0)),
	},
	"/network-instance/protocols/bgp/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState)(0)),
	},
	"/network-instance/protocols/bgp/trace-options/flag/modifier": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier)(0)),
	},
	"/network-instance/protocols/bgp/trace-options/flag/name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name)(0)),
	},
	"/network-instance/route-table/ipv4-unicast/route-summary/route-type/ip-route-type-name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_IpRouteType)(0)),
	},
	"/network-instance/route-table/ipv4-unicast/route/fib-programming/status": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status)(0)),
	},
	"/network-instance/route-table/ipv4-unicast/route/route-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_IpRouteType)(0)),
	},
	"/network-instance/route-table/ipv6-unicast/route-summary/route-type/ip-route-type-name": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_IpRouteType)(0)),
	},
	"/network-instance/route-table/ipv6-unicast/route/fib-programming/status": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status)(0)),
	},
	"/network-instance/route-table/ipv6-unicast/route/route-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_IpRouteType)(0)),
	},
	"/network-instance/route-table/next-hop-group/next-hop/resolved": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop_Resolved)(0)),
	},
	"/network-instance/route-table/next-hop/mpls/pushed-mpls-label-stack": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_Mpls_PushedMplsLabelStack)(0)),
	},
	"/network-instance/route-table/next-hop/resolving-route/route-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_IpRouteType)(0)),
	},
	"/network-instance/route-table/next-hop/resolving-tunnel/tunnel-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_TunnelType)(0)),
	},
	"/network-instance/route-table/next-hop/type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaIpRouteTables_FibNexthopType)(0)),
	},
	"/network-instance/system-ipv4-address/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv4Address_OperDownReason)(0)),
	},
	"/network-instance/system-ipv4-address/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_OperState)(0)),
	},
	"/network-instance/system-ipv6-address/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_SystemIpv6Address_OperDownReason)(0)),
	},
	"/network-instance/system-ipv6-address/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_OperState)(0)),
	},
	"/network-instance/type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NiType)(0)),
	},
	"/network-instance/vxlan-interface/oper-down-reason": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_NetworkInstance_VxlanInterface_OperDownReason)(0)),
	},
	"/network-instance/vxlan-interface/oper-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaNetworkInstance_OperState)(0)),
	},
	"/routing-policy/community-set/member": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaPolicyTypes_BgpWellKnownCommunity)(0)),
	},
	"/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber)(0)),
	},
	"/routing-policy/policy/default-action/accept/bgp/origin/set": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set)(0)),
	},
	"/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber)(0)),
	},
	"/routing-policy/policy/statement/action/accept/bgp/origin/set": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set)(0)),
	},
	"/routing-policy/policy/statement/match/bgp/as-path-length/operator": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_ComparisonOperatorType)(0)),
	},
	"/routing-policy/policy/statement/match/family": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_BgpFamilyType)(0)),
	},
	"/routing-policy/policy/statement/match/isis/route-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Isis_RouteType)(0)),
	},
	"/routing-policy/policy/statement/match/ospf/route-type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaPolicyTypes_PolOspfPathType)(0)),
	},
	"/routing-policy/policy/statement/match/protocol": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaCommon_IpRouteType)(0)),
	},
	"/system/authentication/keychain/admin-state": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaKeychains_AdminState)(0)),
	},
	"/system/authentication/keychain/key/algorithm": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaKeychains_AlgorithmType)(0)),
	},
	"/system/authentication/keychain/type": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaKeychains_KeychainType)(0)),
	},
	"/system/trace-options": []reflect.Type{
		reflect.TypeOf((E_SrlNokiaSystem_System_TraceOptions)(0)),
	},
}

